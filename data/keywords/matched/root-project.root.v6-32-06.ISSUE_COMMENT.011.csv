id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/2148:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2148
https://github.com/root-project/root/pull/2148:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2148
https://github.com/root-project/root/pull/2148:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2148
https://github.com/root-project/root/pull/2150:11,deployability,build,build,11,@phsft-bot build just on ubuntu18/native with flags -Dvc=ON -DCMAKE_CXX_FLAGS=-march=native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2150
https://github.com/root-project/root/pull/2150:11,deployability,build,build,11,"@phsft-bot build just on ubuntu18/native with flags -Dvc=ON -DCMAKE_CXX_FLAGS=""-march=native""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2150
https://github.com/root-project/root/pull/2150:11,deployability,build,build,11,"@phsft-bot build just on ubuntu18/native with flags -Dvc=ON -DCMAKE_CXX_FLAGS=""-march=native""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2150
https://github.com/root-project/root/pull/2150:11,deployability,build,build,11,"@phsft-bot build just on ubuntu18/native with flags -Dbuiltin_vc=ON -DCMAKE_CXX_FLAGS=""-march=native""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2150
https://github.com/root-project/root/pull/2150:11,deployability,build,build,11,@phsft-bot build just on ubuntu18/native with flags -Dbuiltin_vc=ON -DCMAKE_CXX_FLAGS='-march=native',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2150
https://github.com/root-project/root/pull/2150:11,deployability,build,build,11,@phsft-bot build just on ubuntu18/native with flags -Dbuiltin_vc=ON -DCMAKE_CXX_FLAGS='-march=native',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2150
https://github.com/root-project/root/pull/2150:0,deployability,Build,Build,0,"Build passed, but there was some problem in Jenkins. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29171",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2150
https://github.com/root-project/root/pull/2150:105,deployability,build,build,105,"Build passed, but there was some problem in Jenkins. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29171",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2150
https://github.com/root-project/root/pull/2152:41,performance,parallel,parallel,41,"@dpiparo @pcanal @etejedor take 2: avoid parallel branch processing is `GetListOfBranches()` only has one element, get rid of `nSortedBranches`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2152
https://github.com/root-project/root/pull/2152:35,safety,avoid,avoid,35,"@dpiparo @pcanal @etejedor take 2: avoid parallel branch processing is `GetListOfBranches()` only has one element, get rid of `nSortedBranches`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2152
https://github.com/root-project/root/pull/2154:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2154
https://github.com/root-project/root/pull/2154:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Dctest_test_exclude_none=On -Droofit=Off.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2154
https://github.com/root-project/root/pull/2154:11,deployability,build,build,11,@phsft-bot build on ubuntu16/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2154
https://github.com/root-project/root/pull/2154:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2154
https://github.com/root-project/root/pull/2154:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2154
https://github.com/root-project/root/pull/2154:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2154
https://github.com/root-project/root/pull/2155:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc48 centos7/gcc7 mac1013/native windows10/vc15 with flags -Dgenvector=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2155
https://github.com/root-project/root/pull/2155:11,deployability,build,build,11,"@phsft-bot build on slc6/gcc48, centos7/gcc7, mac1013/native, windows10/vc15 with flags -Dgenvector=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2155
https://github.com/root-project/root/pull/2155:35,availability,failur,failures,35,"@Axel-Naumann @lmoneta I don't see failures other than genvector from roottest on my machine after these changes. However, should we just remove the `genvector` build option instead and make it always `ON`? What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2155
https://github.com/root-project/root/pull/2155:35,deployability,fail,failures,35,"@Axel-Naumann @lmoneta I don't see failures other than genvector from roottest on my machine after these changes. However, should we just remove the `genvector` build option instead and make it always `ON`? What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2155
https://github.com/root-project/root/pull/2155:161,deployability,build,build,161,"@Axel-Naumann @lmoneta I don't see failures other than genvector from roottest on my machine after these changes. However, should we just remove the `genvector` build option instead and make it always `ON`? What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2155
https://github.com/root-project/root/pull/2155:35,performance,failur,failures,35,"@Axel-Naumann @lmoneta I don't see failures other than genvector from roottest on my machine after these changes. However, should we just remove the `genvector` build option instead and make it always `ON`? What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2155
https://github.com/root-project/root/pull/2155:35,reliability,fail,failures,35,"@Axel-Naumann @lmoneta I don't see failures other than genvector from roottest on my machine after these changes. However, should we just remove the `genvector` build option instead and make it always `ON`? What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2155
https://github.com/root-project/root/pull/2156:17,deployability,fail,failed,17,Initial checkout failed on Windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2156
https://github.com/root-project/root/pull/2156:17,reliability,fail,failed,17,Initial checkout failed on Windows.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2156
https://github.com/root-project/root/pull/2156:4,availability,failur,failures,4,The failures above are not related to this pull request.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2156
https://github.com/root-project/root/pull/2156:4,deployability,fail,failures,4,The failures above are not related to this pull request.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2156
https://github.com/root-project/root/pull/2156:4,performance,failur,failures,4,The failures above are not related to this pull request.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2156
https://github.com/root-project/root/pull/2156:4,reliability,fail,failures,4,The failures above are not related to this pull request.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2156
https://github.com/root-project/root/pull/2158:6,availability,failur,failures,6,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2158:6,deployability,fail,failures,6,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2158:37,deployability,patch,patch,37,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2158:66,deployability,build,build,66,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2158:6,performance,failur,failures,6,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2158:6,reliability,fail,failures,6,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2158:0,safety,Test,Tests,0,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2158:37,safety,patch,patch,37,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2158:37,security,patch,patch,37,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2158:0,testability,Test,Tests,0,Tests failures are unrelated to this patch ... and fix the 32bits build :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2158
https://github.com/root-project/root/pull/2160:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2160
https://github.com/root-project/root/pull/2160:32,deployability,build,build,32,"Runtime looks good,. @phsft-bot build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2160
https://github.com/root-project/root/pull/2160:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2160
https://github.com/root-project/root/pull/2160:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2160
https://github.com/root-project/root/pull/2160:0,availability,Failur,Failures,0,"Failures are unrelated or already fixed, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2160
https://github.com/root-project/root/pull/2160:0,deployability,Fail,Failures,0,"Failures are unrelated or already fixed, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2160
https://github.com/root-project/root/pull/2160:0,performance,Failur,Failures,0,"Failures are unrelated or already fixed, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2160
https://github.com/root-project/root/pull/2160:0,reliability,Fail,Failures,0,"Failures are unrelated or already fixed, merging",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2160
https://github.com/root-project/root/pull/2161:114,deployability,automat,automatically,114,"🥇 great. About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? We should make sure this is well communicated to the users.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:25,interoperability,standard,standard,25,"🥇 great. About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? We should make sure this is well communicated to the users.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:35,reliability,doe,does,35,"🥇 great. About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? We should make sure this is well communicated to the users.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:114,testability,automat,automatically,114,"🥇 great. About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? We should make sure this is well communicated to the users.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:192,usability,user,users,192,"🥇 great. About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? We should make sure this is well communicated to the users.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:107,deployability,automat,automatically,107,"> About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? C++14 is activated automatically only for the CPyCppyy target that needs it [here](https://github.com/root-project/root/commit/770fd593dd94b6bfcb5a9ff0d68b812b08a1b61d#diff-a6ebcf3cd576dd7538dbfbd1c01fbfc1R40).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:151,deployability,automat,automatically,151,"> About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? C++14 is activated automatically only for the CPyCppyy target that needs it [here](https://github.com/root-project/root/commit/770fd593dd94b6bfcb5a9ff0d68b812b08a1b61d#diff-a6ebcf3cd576dd7538dbfbd1c01fbfc1R40).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:18,interoperability,standard,standard,18,"> About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? C++14 is activated automatically only for the CPyCppyy target that needs it [here](https://github.com/root-project/root/commit/770fd593dd94b6bfcb5a9ff0d68b812b08a1b61d#diff-a6ebcf3cd576dd7538dbfbd1c01fbfc1R40).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:28,reliability,doe,does,28,"> About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? C++14 is activated automatically only for the CPyCppyy target that needs it [here](https://github.com/root-project/root/commit/770fd593dd94b6bfcb5a9ff0d68b812b08a1b61d#diff-a6ebcf3cd576dd7538dbfbd1c01fbfc1R40).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:107,testability,automat,automatically,107,"> About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? C++14 is activated automatically only for the CPyCppyy target that needs it [here](https://github.com/root-project/root/commit/770fd593dd94b6bfcb5a9ff0d68b812b08a1b61d#diff-a6ebcf3cd576dd7538dbfbd1c01fbfc1R40).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:151,testability,automat,automatically,151,"> About the c++14 standard: does this mean that to try out the new PyROOT one needs c++14? If yes, is this automatically activated? C++14 is activated automatically only for the CPyCppyy target that needs it [here](https://github.com/root-project/root/commit/770fd593dd94b6bfcb5a9ff0d68b812b08a1b61d#diff-a6ebcf3cd576dd7538dbfbd1c01fbfc1R40).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:43,energy efficiency,clock,clock,43,"GitHub is confused because the there was a clock skew in the computer where I created the commits, so it looks like they're in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:189,deployability,modul,module,189,"Hi @dpiparo @Axel-Naumann, did @amadio address your comments with 40b8f83037 ? Also please feel free to comment on the skeleton of the code for PyROOT as well (Python layer + C++ extension module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:119,interoperability,skeleton,skeleton,119,"Hi @dpiparo @Axel-Naumann, did @amadio address your comments with 40b8f83037 ? Also please feel free to comment on the skeleton of the code for PyROOT as well (Python layer + C++ extension module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:167,modifiability,layer,layer,167,"Hi @dpiparo @Axel-Naumann, did @amadio address your comments with 40b8f83037 ? Also please feel free to comment on the skeleton of the code for PyROOT as well (Python layer + C++ extension module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:179,modifiability,extens,extension,179,"Hi @dpiparo @Axel-Naumann, did @amadio address your comments with 40b8f83037 ? Also please feel free to comment on the skeleton of the code for PyROOT as well (Python layer + C++ extension module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:189,modifiability,modul,module,189,"Hi @dpiparo @Axel-Naumann, did @amadio address your comments with 40b8f83037 ? Also please feel free to comment on the skeleton of the code for PyROOT as well (Python layer + C++ extension module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:189,safety,modul,module,189,"Hi @dpiparo @Axel-Naumann, did @amadio address your comments with 40b8f83037 ? Also please feel free to comment on the skeleton of the code for PyROOT as well (Python layer + C++ extension module).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:10,deployability,updat,update,10,"Could you update Wim's entry in the CREDITS to reflect his cppyy ""contribution""? And please add ""PyROOT"" to your's, Enric!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:10,safety,updat,update,10,"Could you update Wim's entry in the CREDITS to reflect his cppyy ""contribution""? And please add ""PyROOT"" to your's, Enric!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:10,security,updat,update,10,"Could you update Wim's entry in the CREDITS to reflect his cppyy ""contribution""? And please add ""PyROOT"" to your's, Enric!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:514,deployability,modul,modules,514,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:569,deployability,modul,module,569,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:630,deployability,modul,module,630,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:39,modifiability,deco,decorators,39,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:514,modifiability,modul,modules,514,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:569,modifiability,modul,module,569,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:630,modifiability,modul,module,630,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:514,safety,modul,modules,514,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:569,safety,modul,module,569,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:630,safety,modul,module,630,"Just leaving here my ideas about using decorators as register mechanism of the pythonizations:. ```python. __pythonizations__ = []. def pythonization(function):. __pythonizations__.append(function). @pythonization. def foo():. print(""foo""). @pythonization. def bar():. print(""foo""). print(__pythonizations__). ```. ```bash. [<function foo at 0x7f69f1f07668>, <function bar at 0x7f69f1f076e0>]. ```. The resulting list of functions looks a little bit nicer in the cppyy code to register the pythonizations from the modules:. ```python. # Now. cppyy.py.add_pythonization(module.get_pythonizor()). # Then. cppyy.py.add_pythonization(module.__pythonizations__). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:147,performance,time,time,147,"@Axel-Naumann thanks a lot for all your comments, I implemented most of them and a few were answered by @amadio and myself. Whenever you have some time, please have a last look at those answers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:84,availability,sli,slightly,84,"@stwunsch thank you for your suggestion, I implemented it in 014920f . I followed a slightly different approach: we do not actually need a private list in each of the pythonizor modules (e.g. `_ttree.py`), we can have the decorator function defined in `ROOT/__init__.py` so that it adds the pythonizors directly to Cppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:178,deployability,modul,modules,178,"@stwunsch thank you for your suggestion, I implemented it in 014920f . I followed a slightly different approach: we do not actually need a private list in each of the pythonizor modules (e.g. `_ttree.py`), we can have the decorator function defined in `ROOT/__init__.py` so that it adds the pythonizors directly to Cppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:178,modifiability,modul,modules,178,"@stwunsch thank you for your suggestion, I implemented it in 014920f . I followed a slightly different approach: we do not actually need a private list in each of the pythonizor modules (e.g. `_ttree.py`), we can have the decorator function defined in `ROOT/__init__.py` so that it adds the pythonizors directly to Cppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:222,modifiability,deco,decorator,222,"@stwunsch thank you for your suggestion, I implemented it in 014920f . I followed a slightly different approach: we do not actually need a private list in each of the pythonizor modules (e.g. `_ttree.py`), we can have the decorator function defined in `ROOT/__init__.py` so that it adds the pythonizors directly to Cppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:84,reliability,sli,slightly,84,"@stwunsch thank you for your suggestion, I implemented it in 014920f . I followed a slightly different approach: we do not actually need a private list in each of the pythonizor modules (e.g. `_ttree.py`), we can have the decorator function defined in `ROOT/__init__.py` so that it adds the pythonizors directly to Cppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2161:178,safety,modul,modules,178,"@stwunsch thank you for your suggestion, I implemented it in 014920f . I followed a slightly different approach: we do not actually need a private list in each of the pythonizor modules (e.g. `_ttree.py`), we can have the decorator function defined in `ROOT/__init__.py` so that it adds the pythonizors directly to Cppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2161
https://github.com/root-project/root/pull/2162:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2162
https://github.com/root-project/root/pull/2162:21,integrability,sub,subset,21,Indeed this is/was a subset of the change in #2123,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2162
https://github.com/root-project/root/pull/2163:22,deployability,fail,failed,22,windows: git checkout failed. execUnloading: pre-existing issue. slc6/gcc48: race condition is build system. slc6/gcc62: pre-existing issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2163
https://github.com/root-project/root/pull/2163:95,deployability,build,build,95,windows: git checkout failed. execUnloading: pre-existing issue. slc6/gcc48: race condition is build system. slc6/gcc62: pre-existing issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2163
https://github.com/root-project/root/pull/2163:22,reliability,fail,failed,22,windows: git checkout failed. execUnloading: pre-existing issue. slc6/gcc48: race condition is build system. slc6/gcc62: pre-existing issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2163
https://github.com/root-project/root/pull/2163:88,deployability,patch,patches,88,@lmoneta This fixes the snapshot test on 32bits. Can you approve the merging into v6.14 patches? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2163
https://github.com/root-project/root/pull/2163:33,safety,test,test,33,@lmoneta This fixes the snapshot test on 32bits. Can you approve the merging into v6.14 patches? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2163
https://github.com/root-project/root/pull/2163:88,safety,patch,patches,88,@lmoneta This fixes the snapshot test on 32bits. Can you approve the merging into v6.14 patches? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2163
https://github.com/root-project/root/pull/2163:88,security,patch,patches,88,@lmoneta This fixes the snapshot test on 32bits. Can you approve the merging into v6.14 patches? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2163
https://github.com/root-project/root/pull/2163:33,testability,test,test,33,@lmoneta This fixes the snapshot test on 32bits. Can you approve the merging into v6.14 patches? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2163
https://github.com/root-project/root/pull/2164:56,deployability,version,version,56,as agreed with @lmoneta I'll merge this tomorrow if the version in master does not cause any problems,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2164
https://github.com/root-project/root/pull/2164:56,integrability,version,version,56,as agreed with @lmoneta I'll merge this tomorrow if the version in master does not cause any problems,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2164
https://github.com/root-project/root/pull/2164:56,modifiability,version,version,56,as agreed with @lmoneta I'll merge this tomorrow if the version in master does not cause any problems,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2164
https://github.com/root-project/root/pull/2164:74,reliability,doe,does,74,as agreed with @lmoneta I'll merge this tomorrow if the version in master does not cause any problems,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2164
https://github.com/root-project/root/pull/2166:63,deployability,Modul,Module,63,@dpiparo @amadio do you know where this `<TCling::LoadModule>: Module VecOps not found!` could come from?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2166
https://github.com/root-project/root/pull/2166:50,energy efficiency,Load,LoadModule,50,@dpiparo @amadio do you know where this `<TCling::LoadModule>: Module VecOps not found!` could come from?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2166
https://github.com/root-project/root/pull/2166:63,modifiability,Modul,Module,63,@dpiparo @amadio do you know where this `<TCling::LoadModule>: Module VecOps not found!` could come from?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2166
https://github.com/root-project/root/pull/2166:50,performance,Load,LoadModule,50,@dpiparo @amadio do you know where this `<TCling::LoadModule>: Module VecOps not found!` could come from?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2166
https://github.com/root-project/root/pull/2166:63,safety,Modul,Module,63,@dpiparo @amadio do you know where this `<TCling::LoadModule>: Module VecOps not found!` could come from?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2166
https://github.com/root-project/root/pull/2166:36,energy efficiency,green,green,36,"as agreed, merging since master was green",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2166
https://github.com/root-project/root/pull/2167:153,deployability,contain,contained,153,"Note that the original implementation is detailed in the documentation:. ```. /// and if not found. /// a direct try of libname will be made (in case it contained an. /// absolute path). ```. Can you verify (by code inspection) if ```gSystem->DynamicPathName``` now return true for absolute path (even if it is not in the dynamic path)? . If so, I guess the function can indeed be simplified but the documentation needs to revise accordingly. The new code add 'GetPathInfo' and 'AccessPathName' calls to the path where DynamicPathName returned a positive answer. Can you verify that those check are not already done in DynamicPathName? (The previous implementation seemed to have assumed it was, it may still or may no longer be the case, we need to check).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:479,security,Access,AccessPathName,479,"Note that the original implementation is detailed in the documentation:. ```. /// and if not found. /// a direct try of libname will be made (in case it contained an. /// absolute path). ```. Can you verify (by code inspection) if ```gSystem->DynamicPathName``` now return true for absolute path (even if it is not in the dynamic path)? . If so, I guess the function can indeed be simplified but the documentation needs to revise accordingly. The new code add 'GetPathInfo' and 'AccessPathName' calls to the path where DynamicPathName returned a positive answer. Can you verify that those check are not already done in DynamicPathName? (The previous implementation seemed to have assumed it was, it may still or may no longer be the case, we need to check).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:200,testability,verif,verify,200,"Note that the original implementation is detailed in the documentation:. ```. /// and if not found. /// a direct try of libname will be made (in case it contained an. /// absolute path). ```. Can you verify (by code inspection) if ```gSystem->DynamicPathName``` now return true for absolute path (even if it is not in the dynamic path)? . If so, I guess the function can indeed be simplified but the documentation needs to revise accordingly. The new code add 'GetPathInfo' and 'AccessPathName' calls to the path where DynamicPathName returned a positive answer. Can you verify that those check are not already done in DynamicPathName? (The previous implementation seemed to have assumed it was, it may still or may no longer be the case, we need to check).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:381,testability,simpl,simplified,381,"Note that the original implementation is detailed in the documentation:. ```. /// and if not found. /// a direct try of libname will be made (in case it contained an. /// absolute path). ```. Can you verify (by code inspection) if ```gSystem->DynamicPathName``` now return true for absolute path (even if it is not in the dynamic path)? . If so, I guess the function can indeed be simplified but the documentation needs to revise accordingly. The new code add 'GetPathInfo' and 'AccessPathName' calls to the path where DynamicPathName returned a positive answer. Can you verify that those check are not already done in DynamicPathName? (The previous implementation seemed to have assumed it was, it may still or may no longer be the case, we need to check).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:571,testability,verif,verify,571,"Note that the original implementation is detailed in the documentation:. ```. /// and if not found. /// a direct try of libname will be made (in case it contained an. /// absolute path). ```. Can you verify (by code inspection) if ```gSystem->DynamicPathName``` now return true for absolute path (even if it is not in the dynamic path)? . If so, I guess the function can indeed be simplified but the documentation needs to revise accordingly. The new code add 'GetPathInfo' and 'AccessPathName' calls to the path where DynamicPathName returned a positive answer. Can you verify that those check are not already done in DynamicPathName? (The previous implementation seemed to have assumed it was, it may still or may no longer be the case, we need to check).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:57,usability,document,documentation,57,"Note that the original implementation is detailed in the documentation:. ```. /// and if not found. /// a direct try of libname will be made (in case it contained an. /// absolute path). ```. Can you verify (by code inspection) if ```gSystem->DynamicPathName``` now return true for absolute path (even if it is not in the dynamic path)? . If so, I guess the function can indeed be simplified but the documentation needs to revise accordingly. The new code add 'GetPathInfo' and 'AccessPathName' calls to the path where DynamicPathName returned a positive answer. Can you verify that those check are not already done in DynamicPathName? (The previous implementation seemed to have assumed it was, it may still or may no longer be the case, we need to check).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:381,usability,simpl,simplified,381,"Note that the original implementation is detailed in the documentation:. ```. /// and if not found. /// a direct try of libname will be made (in case it contained an. /// absolute path). ```. Can you verify (by code inspection) if ```gSystem->DynamicPathName``` now return true for absolute path (even if it is not in the dynamic path)? . If so, I guess the function can indeed be simplified but the documentation needs to revise accordingly. The new code add 'GetPathInfo' and 'AccessPathName' calls to the path where DynamicPathName returned a positive answer. Can you verify that those check are not already done in DynamicPathName? (The previous implementation seemed to have assumed it was, it may still or may no longer be the case, we need to check).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:400,usability,document,documentation,400,"Note that the original implementation is detailed in the documentation:. ```. /// and if not found. /// a direct try of libname will be made (in case it contained an. /// absolute path). ```. Can you verify (by code inspection) if ```gSystem->DynamicPathName``` now return true for absolute path (even if it is not in the dynamic path)? . If so, I guess the function can indeed be simplified but the documentation needs to revise accordingly. The new code add 'GetPathInfo' and 'AccessPathName' calls to the path where DynamicPathName returned a positive answer. Can you verify that those check are not already done in DynamicPathName? (The previous implementation seemed to have assumed it was, it may still or may no longer be the case, we need to check).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:627,availability,consist,consistent,627,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:141,deployability,releas,release,141,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:199,deployability,releas,release,199,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:275,deployability,releas,release,275,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:334,deployability,releas,release,334,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:411,deployability,releas,release,411,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:593,deployability,Updat,Updated,593,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:605,deployability,patch,patch,605,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:593,safety,Updat,Updated,593,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:605,safety,patch,patch,605,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:521,security,Access,AccessPathName,521,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:593,security,Updat,Updated,593,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:605,security,patch,patch,605,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:627,usability,consist,consistent,627,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:661,usability,document,document,661,"gSystem->DynamicPathName returns true for absolute path, but is this what you meant? ```. root [2] gSystem->DynamicPathName(""/home/yuka/root-release/lib/libHist.so"", true). (char *) ""/home/yuka/root-release/lib/libHist.so"". root [3] gSystem->DynamicPathName(""/home/yuka/root-release/bin/thisroot.sh"", true). (char *) ""/home/yuka/root-release/bin/thisroot.sh"". root [4] gSystem->DynamicPathName(""/home/yuka/root-release/bin/foobar"", true). (char *) nullptr. ```. And true, previous implementaiton is doing GetPathInfo and AccessPathName when DynamicPathName **couldn't** find the library name. Updated the patch according to be consistent with that. (However in document it says `If check is true it will only check if libname exists and is readable.` which is inconsistent with the previous implementation)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:129,safety,permiss,permission,129,"> Isn't that part of DynamicPathName? It looks not, I think `gSystem->AccessPathName(libname, kReadPermission)` is checking read permission",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:70,security,Access,AccessPathName,70,"> Isn't that part of DynamicPathName? It looks not, I think `gSystem->AccessPathName(libname, kReadPermission)` is checking read permission",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:10,deployability,updat,update,10,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:28,deployability,log,log,28,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:78,deployability,patch,patch,78,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:10,safety,updat,update,10,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:28,safety,log,log,28,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:78,safety,patch,patch,78,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:10,security,updat,update,10,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:28,security,log,log,28,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:78,security,patch,patch,78,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:28,testability,log,log,28,Should we update the commit log? It seems to no longer correspond to the code/patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:121,safety,permiss,permission,121,"> Are you sure? Is line TUnixSystem.cxx:4695 used in that code path and what is it's effect? Ah true, it's checking read permission",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:52,deployability,log,log,52,"Could you use a better first line of the git commit log? The first line is crucial (there's tons of web pages on this). And it should be specific: here, we don't know what it fixes and how. At least mention ""modules"", ideally mention in three words what's the behavioral change. ""Fix"" is insufficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:208,deployability,modul,modules,208,"Could you use a better first line of the git commit log? The first line is crucial (there's tons of web pages on this). And it should be specific: here, we don't know what it fixes and how. At least mention ""modules"", ideally mention in three words what's the behavioral change. ""Fix"" is insufficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:137,interoperability,specif,specific,137,"Could you use a better first line of the git commit log? The first line is crucial (there's tons of web pages on this). And it should be specific: here, we don't know what it fixes and how. At least mention ""modules"", ideally mention in three words what's the behavioral change. ""Fix"" is insufficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:208,modifiability,modul,modules,208,"Could you use a better first line of the git commit log? The first line is crucial (there's tons of web pages on this). And it should be specific: here, we don't know what it fixes and how. At least mention ""modules"", ideally mention in three words what's the behavioral change. ""Fix"" is insufficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:52,safety,log,log,52,"Could you use a better first line of the git commit log? The first line is crucial (there's tons of web pages on this). And it should be specific: here, we don't know what it fixes and how. At least mention ""modules"", ideally mention in three words what's the behavioral change. ""Fix"" is insufficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:208,safety,modul,modules,208,"Could you use a better first line of the git commit log? The first line is crucial (there's tons of web pages on this). And it should be specific: here, we don't know what it fixes and how. At least mention ""modules"", ideally mention in three words what's the behavioral change. ""Fix"" is insufficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:52,security,log,log,52,"Could you use a better first line of the git commit log? The first line is crucial (there's tons of web pages on this). And it should be specific: here, we don't know what it fixes and how. At least mention ""modules"", ideally mention in three words what's the behavioral change. ""Fix"" is insufficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:52,testability,log,log,52,"Could you use a better first line of the git commit log? The first line is crucial (there's tons of web pages on this). And it should be specific: here, we don't know what it fixes and how. At least mention ""modules"", ideally mention in three words what's the behavioral change. ""Fix"" is insufficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:260,usability,behavi,behavioral,260,"Could you use a better first line of the git commit log? The first line is crucial (there's tons of web pages on this). And it should be specific: here, we don't know what it fixes and how. At least mention ""modules"", ideally mention in three words what's the behavioral change. ""Fix"" is insufficient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:32,deployability,log,logs,32,"The code seems fine. The commit logs reads:. ```. Before, it was loading the library which doesn't exists. ```. I am bit confused by the wording, what is the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:65,energy efficiency,load,loading,65,"The code seems fine. The commit logs reads:. ```. Before, it was loading the library which doesn't exists. ```. I am bit confused by the wording, what is the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:65,performance,load,loading,65,"The code seems fine. The commit logs reads:. ```. Before, it was loading the library which doesn't exists. ```. I am bit confused by the wording, what is the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:91,reliability,doe,doesn,91,"The code seems fine. The commit logs reads:. ```. Before, it was loading the library which doesn't exists. ```. I am bit confused by the wording, what is the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:32,safety,log,logs,32,"The code seems fine. The commit logs reads:. ```. Before, it was loading the library which doesn't exists. ```. I am bit confused by the wording, what is the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:32,security,log,logs,32,"The code seems fine. The commit logs reads:. ```. Before, it was loading the library which doesn't exists. ```. I am bit confused by the wording, what is the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:32,testability,log,logs,32,"The code seems fine. The commit logs reads:. ```. Before, it was loading the library which doesn't exists. ```. I am bit confused by the wording, what is the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:68,deployability,fail,fails,68,I meant it was gSystem->Load ing even when gSystem->DynamicPathName fails. Changed commit message,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:24,energy efficiency,Load,Load,24,I meant it was gSystem->Load ing even when gSystem->DynamicPathName fails. Changed commit message,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:90,integrability,messag,message,90,I meant it was gSystem->Load ing even when gSystem->DynamicPathName fails. Changed commit message,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:90,interoperability,messag,message,90,I meant it was gSystem->Load ing even when gSystem->DynamicPathName fails. Changed commit message,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:24,performance,Load,Load,24,I meant it was gSystem->Load ing even when gSystem->DynamicPathName fails. Changed commit message,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:68,reliability,fail,fails,68,I meant it was gSystem->Load ing even when gSystem->DynamicPathName fails. Changed commit message,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:120,deployability,fail,fails,120,"> Before, it was loading the library which doesn't exists (It was gSystem->Load ing. even when gSystem->DynamicPathName fails). Maybe. Before, it was calling gSystem->Load even when gSystem->DynamicPathName did not find the library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:17,energy efficiency,load,loading,17,"> Before, it was loading the library which doesn't exists (It was gSystem->Load ing. even when gSystem->DynamicPathName fails). Maybe. Before, it was calling gSystem->Load even when gSystem->DynamicPathName did not find the library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:75,energy efficiency,Load,Load,75,"> Before, it was loading the library which doesn't exists (It was gSystem->Load ing. even when gSystem->DynamicPathName fails). Maybe. Before, it was calling gSystem->Load even when gSystem->DynamicPathName did not find the library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:167,energy efficiency,Load,Load,167,"> Before, it was loading the library which doesn't exists (It was gSystem->Load ing. even when gSystem->DynamicPathName fails). Maybe. Before, it was calling gSystem->Load even when gSystem->DynamicPathName did not find the library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:17,performance,load,loading,17,"> Before, it was loading the library which doesn't exists (It was gSystem->Load ing. even when gSystem->DynamicPathName fails). Maybe. Before, it was calling gSystem->Load even when gSystem->DynamicPathName did not find the library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:75,performance,Load,Load,75,"> Before, it was loading the library which doesn't exists (It was gSystem->Load ing. even when gSystem->DynamicPathName fails). Maybe. Before, it was calling gSystem->Load even when gSystem->DynamicPathName did not find the library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:167,performance,Load,Load,167,"> Before, it was loading the library which doesn't exists (It was gSystem->Load ing. even when gSystem->DynamicPathName fails). Maybe. Before, it was calling gSystem->Load even when gSystem->DynamicPathName did not find the library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:43,reliability,doe,doesn,43,"> Before, it was loading the library which doesn't exists (It was gSystem->Load ing. even when gSystem->DynamicPathName fails). Maybe. Before, it was calling gSystem->Load even when gSystem->DynamicPathName did not find the library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:120,reliability,fail,fails,120,"> Before, it was loading the library which doesn't exists (It was gSystem->Load ing. even when gSystem->DynamicPathName fails). Maybe. Before, it was calling gSystem->Load even when gSystem->DynamicPathName did not find the library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:11,deployability,build,build,11,"@phsft-bot build! @yamaguchi1024, why projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_root fails?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:112,deployability,fail,fails,112,"@phsft-bot build! @yamaguchi1024, why projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_root fails?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:112,reliability,fail,fails,112,"@phsft-bot build! @yamaguchi1024, why projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_root fails?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:65,safety,test,test,65,"@phsft-bot build! @yamaguchi1024, why projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_root fails?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:65,testability,test,test,65,"@phsft-bot build! @yamaguchi1024, why projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_root fails?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:58,deployability,BUILD,BUILDTYPE,58,"https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/6345/. @vgvassilev because it's failing in the master ^",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:132,deployability,fail,failing,132,"https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/6345/. @vgvassilev because it's failing in the master ^",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2167:132,reliability,fail,failing,132,"https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/6345/. @vgvassilev because it's failing in the master ^",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2167
https://github.com/root-project/root/pull/2170:107,interoperability,specif,specific,107,Sure we can do the same for these other gcc7 warnings. Let me commit this PR first as it is connected to a specific Jira ticket .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2170
https://github.com/root-project/root/pull/2173:12,availability,failur,failures,12,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:12,deployability,fail,failures,12,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:40,deployability,modul,modules,40,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:48,deployability,build,build,48,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:90,deployability,build,build,90,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:142,deployability,build,build,142,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:167,deployability,updat,updated,167,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:191,deployability,build,builds,191,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:40,modifiability,modul,modules,40,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:12,performance,failur,failures,12,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:12,reliability,fail,failures,12,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:40,safety,modul,modules,40,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:167,safety,updat,updated,167,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:167,security,updat,updated,167,@pcanal The failures above are from the modules build and the warnings are from the C++17 build. These were made visible recently because the build matrix for PRs was updated to include more builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:0,safety,test,testing,0,testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2173:0,testability,test,testing,0,testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2173
https://github.com/root-project/root/pull/2174:11,deployability,build,build,11,@phsft-bot build also on mac1011/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2174
https://github.com/root-project/root/pull/2174:11,deployability,build,build,11,@phsft-bot build also on mac1011/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2174
https://github.com/root-project/root/pull/2174:132,deployability,build,build,132,"although there was no message here in the github PR, one can see from https://epsft-jenkins.cern.ch/view/ROOT/job/root-pullrequests-build/ that the fix built successfully on mac1011/native as well as the other platforms. merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2174
https://github.com/root-project/root/pull/2174:22,integrability,messag,message,22,"although there was no message here in the github PR, one can see from https://epsft-jenkins.cern.ch/view/ROOT/job/root-pullrequests-build/ that the fix built successfully on mac1011/native as well as the other platforms. merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2174
https://github.com/root-project/root/pull/2174:22,interoperability,messag,message,22,"although there was no message here in the github PR, one can see from https://epsft-jenkins.cern.ch/view/ROOT/job/root-pullrequests-build/ that the fix built successfully on mac1011/native as well as the other platforms. merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2174
https://github.com/root-project/root/pull/2174:210,interoperability,platform,platforms,210,"although there was no message here in the github PR, one can see from https://epsft-jenkins.cern.ch/view/ROOT/job/root-pullrequests-build/ that the fix built successfully on mac1011/native as well as the other platforms. merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2174
https://github.com/root-project/root/pull/2175:36,interoperability,conflict,conflict,36,"Hi Manos, . Can you please fix this conflict, so I can test the PR. . Thank you. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2175
https://github.com/root-project/root/pull/2175:55,safety,test,test,55,"Hi Manos, . Can you please fix this conflict, so I can test the PR. . Thank you. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2175
https://github.com/root-project/root/pull/2175:55,testability,test,test,55,"Hi Manos, . Can you please fix this conflict, so I can test the PR. . Thank you. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2175
https://github.com/root-project/root/pull/2175:12,interoperability,conflict,conflicts,12,I fixed the conflicts and rebased - should be ready now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2175
https://github.com/root-project/root/pull/2175:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2175
https://github.com/root-project/root/pull/2176:61,availability,failur,failures,61,"closing for now, will wait for a fix/workaround to the 32bit failures",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2176
https://github.com/root-project/root/pull/2176:61,deployability,fail,failures,61,"closing for now, will wait for a fix/workaround to the 32bit failures",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2176
https://github.com/root-project/root/pull/2176:61,performance,failur,failures,61,"closing for now, will wait for a fix/workaround to the 32bit failures",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2176
https://github.com/root-project/root/pull/2176:61,reliability,fail,failures,61,"closing for now, will wait for a fix/workaround to the 32bit failures",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2176
https://github.com/root-project/root/pull/2179:22,deployability,updat,update,22,Could you also add an update of the Release Notes? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2179
https://github.com/root-project/root/pull/2179:36,deployability,Releas,Release,36,Could you also add an update of the Release Notes? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2179
https://github.com/root-project/root/pull/2179:22,safety,updat,update,22,Could you also add an update of the Release Notes? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2179
https://github.com/root-project/root/pull/2179:22,security,updat,update,22,Could you also add an update of the Release Notes? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2179
https://github.com/root-project/root/pull/2182:990,availability,operat,operator,990,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):. ```valgrind. ==29487== Conditional jump or move depends on uninitialised value(s). ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29487==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:206,deployability,depend,depends,206,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):. ```valgrind. ==29487== Conditional jump or move depends on uninitialised value(s). ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29487==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:206,integrability,depend,depends,206,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):. ```valgrind. ==29487== Conditional jump or move depends on uninitialised value(s). ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29487==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:206,modifiability,depend,depends,206,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):. ```valgrind. ==29487== Conditional jump or move depends on uninitialised value(s). ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29487==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:123,safety,test,test,123,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):. ```valgrind. ==29487== Conditional jump or move depends on uninitialised value(s). ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29487==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:206,safety,depend,depends,206,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):. ```valgrind. ==29487== Conditional jump or move depends on uninitialised value(s). ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29487==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:123,testability,test,test,123,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):. ```valgrind. ==29487== Conditional jump or move depends on uninitialised value(s). ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29487==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:206,testability,depend,depends,206,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):. ```valgrind. ==29487== Conditional jump or move depends on uninitialised value(s). ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29487==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:24,availability,error,error,24,"Most often this type of error is due to uninitialized value in the user data. Try using --track-origins=yes and if no information, try to disable compression.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:24,performance,error,error,24,"Most often this type of error is due to uninitialized value in the user data. Try using --track-origins=yes and if no information, try to disable compression.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:24,safety,error,error,24,"Most often this type of error is due to uninitialized value in the user data. Try using --track-origins=yes and if no information, try to disable compression.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:24,usability,error,error,24,"Most often this type of error is due to uninitialized value in the user data. Try using --track-origins=yes and if no information, try to disable compression.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:67,usability,user,user,67,"Most often this type of error is due to uninitialized value in the user data. Try using --track-origins=yes and if no information, try to disable compression.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:869,availability,operat,operator,869,"@pcanal with `--track-origins=yes`:. ```valgrind. ==29712== Conditional jump or move depends on uninitialised value(s). ==29712== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712== Uninitialised value was created by a heap allocation. ==29712== at 0x4C2BBAF: malloc (vg_replace_malloc.c:299). ==29712== by 0x8971219: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:1902,availability,operat,operator,1902," /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712== Uninitialised value was created by a heap allocation. ==29712== at 0x4C2BBAF: malloc (vg_replace_malloc.c:299). ==29712== by 0x8971219: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:85,deployability,depend,depends,85,"@pcanal with `--track-origins=yes`:. ```valgrind. ==29712== Conditional jump or move depends on uninitialised value(s). ==29712== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712== Uninitialised value was created by a heap allocation. ==29712== at 0x4C2BBAF: malloc (vg_replace_malloc.c:299). ==29712== by 0x8971219: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:1156,energy efficiency,alloc,allocation,1156," /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712== Uninitialised value was created by a heap allocation. ==29712== at 0x4C2BBAF: malloc (vg_replace_malloc.c:299). ==29712== by 0x8971219: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712==. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:85,integrability,depend,depends,85,"@pcanal with `--track-origins=yes`:. ```valgrind. ==29712== Conditional jump or move depends on uninitialised value(s). ==29712== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712== Uninitialised value was created by a heap allocation. ==29712== at 0x4C2BBAF: malloc (vg_replace_malloc.c:299). ==29712== by 0x8971219: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:85,modifiability,depend,depends,85,"@pcanal with `--track-origins=yes`:. ```valgrind. ==29712== Conditional jump or move depends on uninitialised value(s). ==29712== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712== Uninitialised value was created by a heap allocation. ==29712== at 0x4C2BBAF: malloc (vg_replace_malloc.c:299). ==29712== by 0x8971219: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:85,safety,depend,depends,85,"@pcanal with `--track-origins=yes`:. ```valgrind. ==29712== Conditional jump or move depends on uninitialised value(s). ==29712== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712== Uninitialised value was created by a heap allocation. ==29712== at 0x4C2BBAF: malloc (vg_replace_malloc.c:299). ==29712== by 0x8971219: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:85,testability,depend,depends,85,"@pcanal with `--track-origins=yes`:. ```valgrind. ==29712== Conditional jump or move depends on uninitialised value(s). ==29712== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842). ==29712== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139). ==29712== Uninitialised value was created by a heap allocation. ==29712== at 0x4C2BBAF: malloc (vg_replace_malloc.c:299). ==29712== by 0x8971219: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2). ==29712== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57). ==29712== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95). ==29712== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099). ==29712== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792). ==29712== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:77,energy efficiency,optim,optimization,77,So it seems to be the less common case were valgrind is confused by the hand optimization of compression algorithm .. kinda annoying .. but if you do not see any visible effect (i.e. all data is correct when read back) then ignore ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:77,performance,optimiz,optimization,77,So it seems to be the less common case were valgrind is confused by the hand optimization of compression algorithm .. kinda annoying .. but if you do not see any visible effect (i.e. all data is correct when read back) then ignore ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:111,deployability,log,log,111,"The pull request blur is good description of the change. Could it be added (if not already) to either a commit log, the releases notes or the documentation? [If not already done]. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:120,deployability,releas,releases,120,"The pull request blur is good description of the change. Could it be added (if not already) to either a commit log, the releases notes or the documentation? [If not already done]. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:111,safety,log,log,111,"The pull request blur is good description of the change. Could it be added (if not already) to either a commit log, the releases notes or the documentation? [If not already done]. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:111,security,log,log,111,"The pull request blur is good description of the change. Could it be added (if not already) to either a commit log, the releases notes or the documentation? [If not already done]. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:111,testability,log,log,111,"The pull request blur is good description of the change. Could it be added (if not already) to either a commit log, the releases notes or the documentation? [If not already done]. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:142,usability,document,documentation,142,"The pull request blur is good description of the change. Could it be added (if not already) to either a commit log, the releases notes or the documentation? [If not already done]. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:573,interoperability,convers,conversion,573,"@etejedor @Axel-Naumann @dpiparo . given Axel's comments, instead of this syntax:. ```c++. auto maybe_ranged = [&df, mustAddRange] { . return mustAddRange ? ROOT::RDF::ToCommonNodeType(d.Range(1)). : ROOT::RDF::ToCommonNodeType(d); . }();. ```. I would propose this one:. ```c++. auto maybe_ranged = [&df, mustAddRange] { . return mustAddRange ? ROOT::RDF::RNode(d.Range(1)). : ROOT::RDF::RNode(d); . }();. ```. Where `ROOT::RDF::Node` is not a free function but an alias for the type `RInterface<RNode>` which all `RInterface<T>` can convert to. Question: do we want this conversion to be explicit or implicit? An implicit conversion would allow e.g. this leaner syntax:. ```c++. auto maybe_ranged = [&df, mustAddRange]() -> ROOT::RDF::RNode { . return mustAddRange ? d.Range(1) : d; . }(); . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:624,interoperability,convers,conversion,624,"@etejedor @Axel-Naumann @dpiparo . given Axel's comments, instead of this syntax:. ```c++. auto maybe_ranged = [&df, mustAddRange] { . return mustAddRange ? ROOT::RDF::ToCommonNodeType(d.Range(1)). : ROOT::RDF::ToCommonNodeType(d); . }();. ```. I would propose this one:. ```c++. auto maybe_ranged = [&df, mustAddRange] { . return mustAddRange ? ROOT::RDF::RNode(d.Range(1)). : ROOT::RDF::RNode(d); . }();. ```. Where `ROOT::RDF::Node` is not a free function but an alias for the type `RInterface<RNode>` which all `RInterface<T>` can convert to. Question: do we want this conversion to be explicit or implicit? An implicit conversion would allow e.g. this leaner syntax:. ```c++. auto maybe_ranged = [&df, mustAddRange]() -> ROOT::RDF::RNode { . return mustAddRange ? d.Range(1) : d; . }(); . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:44,interoperability,convers,conversion,44,"If it's not hard to implement, the implicit conversion looks much more attractive. My 2 cents.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:103,availability,operat,operator,103,@dpiparo i think it's just a matter of putting or not putting an `explicit` in front of the conversion operator,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:92,interoperability,convers,conversion,92,@dpiparo i think it's just a matter of putting or not putting an `explicit` in front of the conversion operator,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:30,deployability,version,version,30,Yes I also think the implicit version looks nicer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:30,integrability,version,version,30,Yes I also think the implicit version looks nicer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:30,modifiability,version,version,30,Yes I also think the implicit version looks nicer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:53,availability,down,downside,53,"@etejedor @dpiparo ok I'll go with it then. The only downside is that it might make it _too_ easy for users to virtualize function calls in the event loop, but the common mode of operation of `RDataFrame` should not require casts to `RNode` anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:179,availability,operat,operation,179,"@etejedor @dpiparo ok I'll go with it then. The only downside is that it might make it _too_ easy for users to virtualize function calls in the event loop, but the common mode of operation of `RDataFrame` should not require casts to `RNode` anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:144,integrability,event,event,144,"@etejedor @dpiparo ok I'll go with it then. The only downside is that it might make it _too_ easy for users to virtualize function calls in the event loop, but the common mode of operation of `RDataFrame` should not require casts to `RNode` anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:102,usability,user,users,102,"@etejedor @dpiparo ok I'll go with it then. The only downside is that it might make it _too_ easy for users to virtualize function calls in the event loop, but the common mode of operation of `RDataFrame` should not require casts to `RNode` anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2182:35,interoperability,conflict,conflicts,35,"superseded by #2568 (same commits, conflicts fixed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2182
https://github.com/root-project/root/pull/2183:136,availability,error,error,136,"This seems to confirm that 07a0da4 is, as expected given @yamaguchi1024 testing, solving the execUnload problem. This leave as the only error the ""VecOps"" not found. @vgvassilev is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2183
https://github.com/root-project/root/pull/2183:136,performance,error,error,136,"This seems to confirm that 07a0da4 is, as expected given @yamaguchi1024 testing, solving the execUnload problem. This leave as the only error the ""VecOps"" not found. @vgvassilev is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2183
https://github.com/root-project/root/pull/2183:72,safety,test,testing,72,"This seems to confirm that 07a0da4 is, as expected given @yamaguchi1024 testing, solving the execUnload problem. This leave as the only error the ""VecOps"" not found. @vgvassilev is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2183
https://github.com/root-project/root/pull/2183:136,safety,error,error,136,"This seems to confirm that 07a0da4 is, as expected given @yamaguchi1024 testing, solving the execUnload problem. This leave as the only error the ""VecOps"" not found. @vgvassilev is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2183
https://github.com/root-project/root/pull/2183:72,testability,test,testing,72,"This seems to confirm that 07a0da4 is, as expected given @yamaguchi1024 testing, solving the execUnload problem. This leave as the only error the ""VecOps"" not found. @vgvassilev is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2183
https://github.com/root-project/root/pull/2183:14,usability,confirm,confirm,14,"This seems to confirm that 07a0da4 is, as expected given @yamaguchi1024 testing, solving the execUnload problem. This leave as the only error the ""VecOps"" not found. @vgvassilev is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2183
https://github.com/root-project/root/pull/2183:136,usability,error,error,136,"This seems to confirm that 07a0da4 is, as expected given @yamaguchi1024 testing, solving the execUnload problem. This leave as the only error the ""VecOps"" not found. @vgvassilev is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2183
https://github.com/root-project/root/pull/2184:4,availability,error,error,4,The error in the cxxmodule build (sl6/gcc62) are expected.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2184
https://github.com/root-project/root/pull/2184:27,deployability,build,build,27,The error in the cxxmodule build (sl6/gcc62) are expected.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2184
https://github.com/root-project/root/pull/2184:4,performance,error,error,4,The error in the cxxmodule build (sl6/gcc62) are expected.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2184
https://github.com/root-project/root/pull/2184:4,safety,error,error,4,The error in the cxxmodule build (sl6/gcc62) are expected.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2184
https://github.com/root-project/root/pull/2184:4,usability,error,error,4,The error in the cxxmodule build (sl6/gcc62) are expected.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2184
https://github.com/root-project/root/pull/2186:123,availability,error,errors,123,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:123,performance,error,errors,123,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:697,reliability,doe,does,697,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:123,safety,error,errors,123,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:165,safety,test,tested,165,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:245,safety,test,tested,245,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:284,safety,test,tested,284,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:490,safety,test,tested,490,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:538,safety,test,tested,538,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:591,safety,test,test,591,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:637,safety,test,tested,637,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:686,safety,test,tested,686,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:730,safety,test,testing,730,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:87,testability,understand,understand,87,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:165,testability,test,tested,165,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:245,testability,test,tested,245,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:284,testability,test,tested,284,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:490,testability,test,tested,490,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:538,testability,test,tested,538,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:591,testability,test,test,591,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:596,testability,coverag,coverage,596,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:637,testability,test,tested,637,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:686,testability,test,tested,686,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:730,testability,test,testing,730,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2186:123,usability,error,errors,123,"So @bluehood , about the cases you described, my comments:. This is the situation as I understand it:. - horrible template errors in instantiating a RVec: fixed and tested -> YES. - reading vector<bool> in RDataFrame:. - with jitting: fixed and tested -> YES. - in compiled code: not tested but works..? -> YES. - reading bool[n] branches: now impossible..? -> YES. - writing a bool[n] with RDataFrame: now impossible..? -> YES. - writing vector<bool> with RDataFrame:. - with jitting: not tested but works..? -> YES. - in compiled code: tested and works -> YES. I agree that increasing the test coverage is necessary for the cases ""not tested but works"" given that if something is not tested, it does not work :) (even if we not testing that is independent from this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2186
https://github.com/root-project/root/pull/2187:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:152,deployability,depend,dependency,152,"> Adding NEEDED section when generating so files. > This is like a ""static linker"" solution, which means we'll change. > rootcling_impl to properly add dependency libraries. This features already exist but is based on the content of rootmap files. See TSystem::CompileMacro (In particular the use of mapfileout and depLibraries) and rootcling's --lib-list-prefix= and --rml options.). By the way, you can see the command line executed by ACLiC by adding the letter v after the trailing +.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:152,integrability,depend,dependency,152,"> Adding NEEDED section when generating so files. > This is like a ""static linker"" solution, which means we'll change. > rootcling_impl to properly add dependency libraries. This features already exist but is based on the content of rootmap files. See TSystem::CompileMacro (In particular the use of mapfileout and depLibraries) and rootcling's --lib-list-prefix= and --rml options.). By the way, you can see the command line executed by ACLiC by adding the letter v after the trailing +.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:152,modifiability,depend,dependency,152,"> Adding NEEDED section when generating so files. > This is like a ""static linker"" solution, which means we'll change. > rootcling_impl to properly add dependency libraries. This features already exist but is based on the content of rootmap files. See TSystem::CompileMacro (In particular the use of mapfileout and depLibraries) and rootcling's --lib-list-prefix= and --rml options.). By the way, you can see the command line executed by ACLiC by adding the letter v after the trailing +.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:222,performance,content,content,222,"> Adding NEEDED section when generating so files. > This is like a ""static linker"" solution, which means we'll change. > rootcling_impl to properly add dependency libraries. This features already exist but is based on the content of rootmap files. See TSystem::CompileMacro (In particular the use of mapfileout and depLibraries) and rootcling's --lib-list-prefix= and --rml options.). By the way, you can see the command line executed by ACLiC by adding the letter v after the trailing +.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:152,safety,depend,dependency,152,"> Adding NEEDED section when generating so files. > This is like a ""static linker"" solution, which means we'll change. > rootcling_impl to properly add dependency libraries. This features already exist but is based on the content of rootmap files. See TSystem::CompileMacro (In particular the use of mapfileout and depLibraries) and rootcling's --lib-list-prefix= and --rml options.). By the way, you can see the command line executed by ACLiC by adding the letter v after the trailing +.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:152,testability,depend,dependency,152,"> Adding NEEDED section when generating so files. > This is like a ""static linker"" solution, which means we'll change. > rootcling_impl to properly add dependency libraries. This features already exist but is based on the content of rootmap files. See TSystem::CompileMacro (In particular the use of mapfileout and depLibraries) and rootcling's --lib-list-prefix= and --rml options.). By the way, you can see the command line executed by ACLiC by adding the letter v after the trailing +.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:413,usability,command,command,413,"> Adding NEEDED section when generating so files. > This is like a ""static linker"" solution, which means we'll change. > rootcling_impl to properly add dependency libraries. This features already exist but is based on the content of rootmap files. See TSystem::CompileMacro (In particular the use of mapfileout and depLibraries) and rootcling's --lib-list-prefix= and --rml options.). By the way, you can see the command line executed by ACLiC by adding the letter v after the trailing +.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:64,deployability,Depend,Depending,64,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:475,energy efficiency,load,load,475,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:64,integrability,Depend,Depending,64,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:64,modifiability,Depend,Depending,64,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:475,performance,load,load,475,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:64,safety,Depend,Depending,64,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:315,safety,input,input,315,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:64,testability,Depend,Depending,64,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:315,usability,input,input,315,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:350,usability,hint,hints,350,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:218,deployability,modul,modules,218,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:304,deployability,depend,dependency,304,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:517,deployability,patch,patch,517,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:113,energy efficiency,load,loaded,113,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:352,energy efficiency,load,load,352,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:374,energy efficiency,load,loading,374,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:304,integrability,depend,dependency,304,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:218,modifiability,modul,modules,218,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:304,modifiability,depend,dependency,304,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:113,performance,load,loaded,113,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:352,performance,load,load,352,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:374,performance,load,loading,374,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:218,safety,modul,modules,218,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:304,safety,depend,dependency,304,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:517,safety,patch,patch,517,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:517,security,patch,patch,517,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:304,testability,depend,dependency,304,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:220,deployability,modul,modules,220,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:306,deployability,depend,dependency,306,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:686,deployability,patch,patch,686,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:115,energy efficiency,load,loaded,115,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:354,energy efficiency,load,load,354,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:376,energy efficiency,load,loading,376,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:306,integrability,depend,dependency,306,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:220,modifiability,modul,modules,220,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:306,modifiability,depend,dependency,306,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:115,performance,load,loaded,115,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:354,performance,load,load,354,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:376,performance,load,loading,376,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:220,safety,modul,modules,220,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:306,safety,depend,dependency,306,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:444,safety,input,input,444,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:548,safety,input,input,548,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:686,safety,patch,patch,686,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:686,security,patch,patch,686,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:306,testability,depend,dependency,306,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:424,testability,simpl,simply,424,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:424,usability,simpl,simply,424,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:444,usability,input,input,444,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:548,usability,input,input,548,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so? Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2187:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2187
https://github.com/root-project/root/pull/2188:7,safety,test,test,7,remove test relying on output capturing as this is not stable.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2188
https://github.com/root-project/root/pull/2188:7,testability,test,test,7,remove test relying on output capturing as this is not stable.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2188
https://github.com/root-project/root/pull/2189:108,modifiability,paramet,parameters,108,"Thanks @stwunsch , this also made evident a tiny bug, i.e. the absence of checks for the number of template parameters and columns... PR coming to fix that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2189
https://github.com/root-project/root/pull/2189:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2189
https://github.com/root-project/root/pull/2193:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2193
https://github.com/root-project/root/pull/2194:22,deployability,modul,modules,22,"Is there a reason why modules do not go through: `interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:22,modifiability,modul,modules,22,"Is there a reason why modules do not go through: `interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:22,safety,modul,modules,22,"Is there a reason why modules do not go through: `interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:24,deployability,modul,modules,24,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:278,deployability,modul,modules,278,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:415,deployability,modul,modules,415,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:618,deployability,contain,contained,618,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:477,energy efficiency,core,core,477,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:666,energy efficiency,load,loaded,666,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:24,modifiability,modul,modules,24,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:278,modifiability,modul,modules,278,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:415,modifiability,modul,modules,415,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:666,performance,load,loaded,666,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:698,performance,time,time,698,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:24,safety,modul,modules,24,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:278,safety,modul,modules,278,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:415,safety,modul,modules,415,"> Is there a reason why modules do not go through: interpreter/cling/lib/Interpreter/ValuePrinter.cpp:936 Interp->declare(""#include \""cling/Interpreter/RuntimePrintValue.h\"""");. Because when IncrementalParser::Compile compiles code, for example `cling::printValue(""hoge"")`, w/o modules cling emits a callback saying that ""we can't find cling::printValue"" and fallback to printValueInternal. However with preloading modules, we find the declaration in overloaded function (Eg. `core/base/src/TObject.cxx:std::string cling::printValue(TObject *val) {`) but not in RuntimePrintValue.h, because RuntimePrintValue.h is not contained in pcm because this is required to be loaded only once at the startup time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:84,deployability,modul,modules,84,I do not understand why the header is not included by PrintValue.cpp in the case of modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:84,modifiability,modul,modules,84,I do not understand why the header is not included by PrintValue.cpp in the case of modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:84,safety,modul,modules,84,I do not understand why the header is not included by PrintValue.cpp in the case of modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2194:9,testability,understand,understand,9,I do not understand why the header is not included by PrintValue.cpp in the case of modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2194
https://github.com/root-project/root/pull/2195:18,safety,valid,validation,18,"@dpiparo for perf validation, see https://sft.its.cern.ch/jira/browse/ROOT-9470",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2195
https://github.com/root-project/root/pull/2195:18,security,validat,validation,18,"@dpiparo for perf validation, see https://sft.its.cern.ch/jira/browse/ROOT-9470",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2195
https://github.com/root-project/root/pull/2197:11,deployability,build,build,11,"@phsft-bot build again, just to be sure",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:18,deployability,fail,failed,18,"Test for snapshot failed, is that reproducible locally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:18,reliability,fail,failed,18,"Test for snapshot failed, is that reproducible locally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:0,safety,Test,Test,0,"Test for snapshot failed, is that reproducible locally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:0,testability,Test,Test,0,"Test for snapshot failed, is that reproducible locally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:43,safety,test,test,43,@amadio I hadn't seen it but I'll keep the test running for a while :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:43,testability,test,test,43,@amadio I hadn't seen it but I'll keep the test running for a while :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:223,availability,failur,failures,223,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:223,deployability,fail,failures,223,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:118,integrability,sub,subsequently,118,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:144,performance,time,timed,144,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:179,performance,network,network,179,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:223,performance,failur,failures,223,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:48,reliability,doe,does,48,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:223,reliability,fail,failures,223,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:57,safety,compl,complain,57,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:80,safety,test,test,80,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:57,security,compl,complain,57,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:179,security,network,network,179,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:80,testability,test,test,80,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth? The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:4,availability,failur,failure,4,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:112,availability,failur,failure,112,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:790,availability,slo,slots,790,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:4,deployability,fail,failure,4,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:112,deployability,fail,failure,112,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:815,interoperability,exchang,exchange,815,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:747,modifiability,variab,variables,747,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:4,performance,failur,failure,4,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:112,performance,failur,failure,112,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:378,performance,time,time,378,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:477,performance,multi-thread,multi-thread,477,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:4,reliability,fail,failure,4,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:112,reliability,fail,failure,112,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:790,reliability,slo,slots,790,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:222,safety,input,input,222,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:252,safety,input,input,252,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:547,safety,input,input,547,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:583,safety,input,input,583,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:1043,safety,input,input,1043,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:599,security,access,access,599,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:222,usability,input,input,222,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:252,usability,input,input,252,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:547,usability,input,input,547,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:583,usability,input,input,583,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:945,usability,help,helpers,945,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:1043,usability,input,input,1043,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input. TChain for that _thread_ in TTreeProcessorMT, causing a destruction of. the previous _thread-local_ TTree. At the same time, the initialization of a new task _in a different. thread_ could delete the output TTree of a multi-thread Snapshot. action, which was listed in the fClones of the input TTree. . This race caused the input ~TTree to access an output tree just. after its deletion, in TTree::CopyAddresses. . The root cause of this issue is that TTreeProcessorMT uses thread-local. variables while RDataFrame uses processing slots which threads can. exchange between themselves. I see two options to solve this:. 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy. 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think? I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:182,availability,operat,operates,182,"@bluehood isn't option two worse because you will have unnecessary deletions of `TChain`s? In the current model, you can reuse the `TChain` in a subsequent task as long as that task operates on a range in the same file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:98,energy efficiency,current,current,98,"@bluehood isn't option two worse because you will have unnecessary deletions of `TChain`s? In the current model, you can reuse the `TChain` in a subsequent task as long as that task operates on a range in the same file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:106,energy efficiency,model,model,106,"@bluehood isn't option two worse because you will have unnecessary deletions of `TChain`s? In the current model, you can reuse the `TChain` in a subsequent task as long as that task operates on a range in the same file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:145,integrability,sub,subsequent,145,"@bluehood isn't option two worse because you will have unnecessary deletions of `TChain`s? In the current model, you can reuse the `TChain` in a subsequent task as long as that task operates on a range in the same file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:121,modifiability,reu,reuse,121,"@bluehood isn't option two worse because you will have unnecessary deletions of `TChain`s? In the current model, you can reuse the `TChain` in a subsequent task as long as that task operates on a range in the same file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:106,security,model,model,106,"@bluehood isn't option two worse because you will have unnecessary deletions of `TChain`s? In the current model, you can reuse the `TChain` in a subsequent task as long as that task operates on a range in the same file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2197:68,usability,help,helpers,68,"@etejedor @dpiparo solution 1. is implemented at #2221 : all action helpers have an empty `FinalizeSlot` there, that is called at the end of each task",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2197
https://github.com/root-project/root/pull/2200:11,deployability,build,build,11,@phsft-bot build with flags -Dhttp=ON -Droot7=ON -Dcxx14=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2200
https://github.com/root-project/root/pull/2200:11,deployability,build,build,11,@phsft-bot build with flags -Dhttp=ON -Droot7=ON -Dcxx14=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2200
https://github.com/root-project/root/pull/2201:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:49,safety,test,test,49,"@stwunsch . Is it possible to change prettyprint test from. ```. self.assertEqual(""Name: TObject Title: Basic ROOT object"", x.__str__()). to . self.assertEqual(""(TObject &) Name: TObject Title: Basic ROOT object\n"", x.__str__()). ```. for this change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:49,testability,test,test,49,"@stwunsch . Is it possible to change prettyprint test from. ```. self.assertEqual(""Name: TObject Title: Basic ROOT object"", x.__str__()). to . self.assertEqual(""(TObject &) Name: TObject Title: Basic ROOT object\n"", x.__str__()). ```. for this change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:70,testability,assert,assertEqual,70,"@stwunsch . Is it possible to change prettyprint test from. ```. self.assertEqual(""Name: TObject Title: Basic ROOT object"", x.__str__()). to . self.assertEqual(""(TObject &) Name: TObject Title: Basic ROOT object\n"", x.__str__()). ```. for this change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:148,testability,assert,assertEqual,148,"@stwunsch . Is it possible to change prettyprint test from. ```. self.assertEqual(""Name: TObject Title: Basic ROOT object"", x.__str__()). to . self.assertEqual(""(TObject &) Name: TObject Title: Basic ROOT object\n"", x.__str__()). ```. for this change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:41,testability,Assert,AssertEqual,41,"Ofc, no problem. You can as well change `AssertEqual` to `AssertIn`, which should be sufficient and covers your case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:58,testability,Assert,AssertIn,58,"Ofc, no problem. You can as well change `AssertEqual` to `AssertIn`, which should be sufficient and covers your case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:332,energy efficiency,current,currently,332,"I do not agree with changing the behaviour from returning `{ 1, 2 }` to `(SomeType&) { 1, 2 }`, which spoils the user experience (imho!). The use of the `str` output in python is an informal representation of the object which should be most convenient for the user. If you want the type, you have the `repr` method in Python, which currently returns you something like `ROOT::SomeType at address 0x12345`. That behaviour is as well similar to numpy & co.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:33,usability,behavi,behaviour,33,"I do not agree with changing the behaviour from returning `{ 1, 2 }` to `(SomeType&) { 1, 2 }`, which spoils the user experience (imho!). The use of the `str` output in python is an informal representation of the object which should be most convenient for the user. If you want the type, you have the `repr` method in Python, which currently returns you something like `ROOT::SomeType at address 0x12345`. That behaviour is as well similar to numpy & co.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:113,usability,user,user,113,"I do not agree with changing the behaviour from returning `{ 1, 2 }` to `(SomeType&) { 1, 2 }`, which spoils the user experience (imho!). The use of the `str` output in python is an informal representation of the object which should be most convenient for the user. If you want the type, you have the `repr` method in Python, which currently returns you something like `ROOT::SomeType at address 0x12345`. That behaviour is as well similar to numpy & co.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:118,usability,experien,experience,118,"I do not agree with changing the behaviour from returning `{ 1, 2 }` to `(SomeType&) { 1, 2 }`, which spoils the user experience (imho!). The use of the `str` output in python is an informal representation of the object which should be most convenient for the user. If you want the type, you have the `repr` method in Python, which currently returns you something like `ROOT::SomeType at address 0x12345`. That behaviour is as well similar to numpy & co.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:260,usability,user,user,260,"I do not agree with changing the behaviour from returning `{ 1, 2 }` to `(SomeType&) { 1, 2 }`, which spoils the user experience (imho!). The use of the `str` output in python is an informal representation of the object which should be most convenient for the user. If you want the type, you have the `repr` method in Python, which currently returns you something like `ROOT::SomeType at address 0x12345`. That behaviour is as well similar to numpy & co.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:411,usability,behavi,behaviour,411,"I do not agree with changing the behaviour from returning `{ 1, 2 }` to `(SomeType&) { 1, 2 }`, which spoils the user experience (imho!). The use of the `str` output in python is an informal representation of the object which should be most convenient for the user. If you want the type, you have the `repr` method in Python, which currently returns you something like `ROOT::SomeType at address 0x12345`. That behaviour is as well similar to numpy & co.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:9,availability,sli,slide,9,Here the slide concerning the desing decision from a recent PPP meeting:. ![exploring new pyroot features](https://user-images.githubusercontent.com/6951222/41587025-7c47411c-73ae-11e8-97fc-30131c3ce0ba.png),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:15,modifiability,concern,concerning,15,Here the slide concerning the desing decision from a recent PPP meeting:. ![exploring new pyroot features](https://user-images.githubusercontent.com/6951222/41587025-7c47411c-73ae-11e8-97fc-30131c3ce0ba.png),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:9,reliability,sli,slide,9,Here the slide concerning the desing decision from a recent PPP meeting:. ![exploring new pyroot features](https://user-images.githubusercontent.com/6951222/41587025-7c47411c-73ae-11e8-97fc-30131c3ce0ba.png),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:15,testability,concern,concerning,15,Here the slide concerning the desing decision from a recent PPP meeting:. ![exploring new pyroot features](https://user-images.githubusercontent.com/6951222/41587025-7c47411c-73ae-11e8-97fc-30131c3ce0ba.png),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:115,usability,user,user-images,115,Here the slide concerning the desing decision from a recent PPP meeting:. ![exploring new pyroot features](https://user-images.githubusercontent.com/6951222/41587025-7c47411c-73ae-11e8-97fc-30131c3ce0ba.png),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:194,usability,behavi,behaviour,194,"Here numpy as example:. ```python. >>> import numpy. >>> x = numpy.array([0, 1, 2], dtype=""float32""). >>> print(x). [ 0. 1. 2.]. >>> x. array([ 0., 1., 2.], dtype=float32). ```. I even like our behaviour more because the `repr` output is truly unique (due to the address).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:40,testability,simpl,simpler,40,"I agree with @stwunsch , `{ 1 , 2 }` is simpler and it is actually all you want to see in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:40,usability,simpl,simpler,40,"I agree with @stwunsch , `{ 1 , 2 }` is simpler and it is actually all you want to see in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:72,deployability,modul,modules,72,It'll be helpful if we can decide this so that we can get greenlight on modules..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:58,energy efficiency,green,greenlight,58,It'll be helpful if we can decide this so that we can get greenlight on modules..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:72,modifiability,modul,modules,72,It'll be helpful if we can decide this so that we can get greenlight on modules..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:72,safety,modul,modules,72,It'll be helpful if we can decide this so that we can get greenlight on modules..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:9,usability,help,helpful,9,It'll be helpful if we can decide this so that we can get greenlight on modules..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:72,energy efficiency,current,current,72,@yamaguchi1024 Can you explain me the following: Why we cannot keep the current call to the interpeter (and `cling::printValue`)? What is the problem?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:122,availability,avail,available,122,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:276,availability,avail,available,276,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:655,availability,slo,slow,655,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:660,availability,down,down,660,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:141,deployability,modul,modules,141,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:211,deployability,contain,containing,211,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:795,deployability,API,API,795,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:908,deployability,modul,modules,908,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:387,integrability,interfac,interface,387,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:788,integrability,pub,public,788,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:795,integrability,API,API,795,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:315,interoperability,standard,standard,315,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:387,interoperability,interfac,interface,387,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:795,interoperability,API,API,795,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:141,modifiability,modul,modules,141,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:387,modifiability,interfac,interface,387,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:908,modifiability,modul,modules,908,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:122,reliability,availab,available,122,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:276,reliability,availab,available,276,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:655,reliability,slo,slow,655,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:122,safety,avail,available,122,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:141,safety,modul,modules,141,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:276,safety,avail,available,276,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:908,safety,modul,modules,908,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:122,security,availab,available,122,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:276,security,availab,available,276,"@stwunsch, the problem is twofold. First, `cling::printValue` relies on extra interpreter runtime, which is generally not available (the non-modules implementation resolves the problem by chance). This runtime (containing various printValue overloads) was designed to be made available if somebody requests it via 'standard' value printing request, that is, by calling an evaluate-aware interface. Second, the use of `cling::printValue` works around the intended way to communicate with the interpreter when it comes to extraction of execution results. We can make `cling::printValue` work by unconditionally including all runtime in question. That would slow down some usecases (notably outside of ROOT) for no good reason. In my opinion, `cling::printValue` is on the border of being a public API and internal implementation detail. Relying on it is rather dangerous because it can break (as it broke with modules). If you need to split the type information from the actual execution result I believe we need another way to do it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2201:14,availability,ping,ping,14,@Axel-Naumann ping? :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2201
https://github.com/root-project/root/pull/2202:115,integrability,interfac,interfaces,115,"Hi @sinnfashen , very nice exercise. Since a while ROOT adopts for internal parallelisation the usage of low level interfaces which allow to leverage on the internally spawned TBB pool, for example [TThreadExecutor](https://root.cern.ch/doc/v610/classROOT_1_1TThreadExecutor.html): I don't think the usage of TThread is the way to go. Said that, what is the advantage of the parallelisation? Is there a usecase you were trying to improve?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:115,interoperability,interfac,interfaces,115,"Hi @sinnfashen , very nice exercise. Since a while ROOT adopts for internal parallelisation the usage of low level interfaces which allow to leverage on the internally spawned TBB pool, for example [TThreadExecutor](https://root.cern.ch/doc/v610/classROOT_1_1TThreadExecutor.html): I don't think the usage of TThread is the way to go. Said that, what is the advantage of the parallelisation? Is there a usecase you were trying to improve?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:115,modifiability,interfac,interfaces,115,"Hi @sinnfashen , very nice exercise. Since a while ROOT adopts for internal parallelisation the usage of low level interfaces which allow to leverage on the internally spawned TBB pool, for example [TThreadExecutor](https://root.cern.ch/doc/v610/classROOT_1_1TThreadExecutor.html): I don't think the usage of TThread is the way to go. Said that, what is the advantage of the parallelisation? Is there a usecase you were trying to improve?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:76,performance,parallel,parallelisation,76,"Hi @sinnfashen , very nice exercise. Since a while ROOT adopts for internal parallelisation the usage of low level interfaces which allow to leverage on the internally spawned TBB pool, for example [TThreadExecutor](https://root.cern.ch/doc/v610/classROOT_1_1TThreadExecutor.html): I don't think the usage of TThread is the way to go. Said that, what is the advantage of the parallelisation? Is there a usecase you were trying to improve?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:375,performance,parallel,parallelisation,375,"Hi @sinnfashen , very nice exercise. Since a while ROOT adopts for internal parallelisation the usage of low level interfaces which allow to leverage on the internally spawned TBB pool, for example [TThreadExecutor](https://root.cern.ch/doc/v610/classROOT_1_1TThreadExecutor.html): I don't think the usage of TThread is the way to go. Said that, what is the advantage of the parallelisation? Is there a usecase you were trying to improve?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:307,deployability,build,build,307,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. . The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:384,deployability,build,build,384,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. . The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:77,performance,parallel,parallel,77,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. . The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:294,performance,parallel,parallel,294,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. . The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:247,safety,test,test,247,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. . The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:134,testability,simpl,simple,134,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. . The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:247,testability,test,test,247,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. . The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:113,usability,document,document,113,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. . The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:134,usability,simpl,simple,134,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. . The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:191,energy efficiency,current,current,191,"I see. I let @lmoneta comment about the impact that this parallelisation can have on real life use cases (probably we'll need some hard numbers coming from benchmarks). For what concerns the current implementation, it cannot find its place in the ROOT code base as it is. Adapting it to the way in which multithreaded parallelism is implemented in the other corners of the framework is a requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:272,energy efficiency,Adapt,Adapting,272,"I see. I let @lmoneta comment about the impact that this parallelisation can have on real life use cases (probably we'll need some hard numbers coming from benchmarks). For what concerns the current implementation, it cannot find its place in the ROOT code base as it is. Adapting it to the way in which multithreaded parallelism is implemented in the other corners of the framework is a requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:272,integrability,Adapt,Adapting,272,"I see. I let @lmoneta comment about the impact that this parallelisation can have on real life use cases (probably we'll need some hard numbers coming from benchmarks). For what concerns the current implementation, it cannot find its place in the ROOT code base as it is. Adapting it to the way in which multithreaded parallelism is implemented in the other corners of the framework is a requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:272,interoperability,Adapt,Adapting,272,"I see. I let @lmoneta comment about the impact that this parallelisation can have on real life use cases (probably we'll need some hard numbers coming from benchmarks). For what concerns the current implementation, it cannot find its place in the ROOT code base as it is. Adapting it to the way in which multithreaded parallelism is implemented in the other corners of the framework is a requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:178,modifiability,concern,concerns,178,"I see. I let @lmoneta comment about the impact that this parallelisation can have on real life use cases (probably we'll need some hard numbers coming from benchmarks). For what concerns the current implementation, it cannot find its place in the ROOT code base as it is. Adapting it to the way in which multithreaded parallelism is implemented in the other corners of the framework is a requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:272,modifiability,Adapt,Adapting,272,"I see. I let @lmoneta comment about the impact that this parallelisation can have on real life use cases (probably we'll need some hard numbers coming from benchmarks). For what concerns the current implementation, it cannot find its place in the ROOT code base as it is. Adapting it to the way in which multithreaded parallelism is implemented in the other corners of the framework is a requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:57,performance,parallel,parallelisation,57,"I see. I let @lmoneta comment about the impact that this parallelisation can have on real life use cases (probably we'll need some hard numbers coming from benchmarks). For what concerns the current implementation, it cannot find its place in the ROOT code base as it is. Adapting it to the way in which multithreaded parallelism is implemented in the other corners of the framework is a requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:318,performance,parallel,parallelism,318,"I see. I let @lmoneta comment about the impact that this parallelisation can have on real life use cases (probably we'll need some hard numbers coming from benchmarks). For what concerns the current implementation, it cannot find its place in the ROOT code base as it is. Adapting it to the way in which multithreaded parallelism is implemented in the other corners of the framework is a requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:178,testability,concern,concerns,178,"I see. I let @lmoneta comment about the impact that this parallelisation can have on real life use cases (probably we'll need some hard numbers coming from benchmarks). For what concerns the current implementation, it cannot find its place in the ROOT code base as it is. Adapting it to the way in which multithreaded parallelism is implemented in the other corners of the framework is a requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:82,performance,parallel,parallelism,82,Okay. So do you suggest that I should use TThreadExecutor to change TThread to do parallelism? is there other more thing that should be change?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:114,performance,parallel,parallelisation,114,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:228,performance,parallel,parallelisation,228,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:190,safety,compl,complete,190,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:199,safety,test,testing,199,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:213,safety,compl,complement,213,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:80,security,ident,identify,80,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:190,security,compl,complete,190,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:213,security,compl,complement,213,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:199,testability,test,testing,199,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:142,usability,help,help,142,"This is for sure a start. But as we said before, the most important thing is to identify a use case for which the parallelisation would be of help and produce solid benchmarks. In addition, complete testing shall complement any parallelisation: the correctness of the results needs to be ensured as well as the absence of any threading issue in the code. But I let @lmoneta comment more in detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:258,modifiability,maintain,maintain,258,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:334,modifiability,scal,scalability,334,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:17,performance,parallel,parallelisation,17,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:184,performance,parallel,parallelisation,184,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:317,performance,perform,performances,317,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:334,performance,scalab,scalability,334,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:406,performance,parallel,parallelisation,406,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:258,safety,maintain,maintain,258,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:359,safety,test,test,359,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:359,testability,test,test,359,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:108,usability,efficien,efficiently,108,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:317,usability,perform,performances,317,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability. - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:49,safety,test,test,49,"Thank you for adding the TThreadExecutor and the test . I had only a small comment for the test program, otherwise we are ready to merge this PR. Thank you for the contribution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:91,safety,test,test,91,"Thank you for adding the TThreadExecutor and the test . I had only a small comment for the test program, otherwise we are ready to merge this PR. Thank you for the contribution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:49,testability,test,test,49,"Thank you for adding the TThreadExecutor and the test . I had only a small comment for the test program, otherwise we are ready to merge this PR. Thank you for the contribution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:91,testability,test,test,91,"Thank you for adding the TThreadExecutor and the test . I had only a small comment for the test program, otherwise we are ready to merge this PR. Thank you for the contribution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:111,safety,test,test,111,"@lmoneta Hi, sorry I just had a very busy month last month. Could I ask what improvement should I do about the test program? I will start right away. Again, sorry for taking so long to come back to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:111,testability,test,test,111,"@lmoneta Hi, sorry I just had a very busy month last month. Could I ask what improvement should I do about the test program? I will start right away. Again, sorry for taking so long to come back to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:208,energy efficiency,charg,charge,208,"> Thank you for adding the TThreadExecutor and the test. > I had only a small comment for the test program, otherwise we are ready to merge this PR. > . > Thank you for the contribution. Hi, are you still in charge of this thing? Or anyone can help look at this thing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:51,safety,test,test,51,"> Thank you for adding the TThreadExecutor and the test. > I had only a small comment for the test program, otherwise we are ready to merge this PR. > . > Thank you for the contribution. Hi, are you still in charge of this thing? Or anyone can help look at this thing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:94,safety,test,test,94,"> Thank you for adding the TThreadExecutor and the test. > I had only a small comment for the test program, otherwise we are ready to merge this PR. > . > Thank you for the contribution. Hi, are you still in charge of this thing? Or anyone can help look at this thing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:51,testability,test,test,51,"> Thank you for adding the TThreadExecutor and the test. > I had only a small comment for the test program, otherwise we are ready to merge this PR. > . > Thank you for the contribution. Hi, are you still in charge of this thing? Or anyone can help look at this thing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:94,testability,test,test,94,"> Thank you for adding the TThreadExecutor and the test. > I had only a small comment for the test program, otherwise we are ready to merge this PR. > . > Thank you for the contribution. Hi, are you still in charge of this thing? Or anyone can help look at this thing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:244,usability,help,help,244,"> Thank you for adding the TThreadExecutor and the test. > I had only a small comment for the test program, otherwise we are ready to merge this PR. > . > Thank you for the contribution. Hi, are you still in charge of this thing? Or anyone can help look at this thing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:60,deployability,updat,updates,60,"Hi,. @sinnfashen sorry for my late reply. Thank you for the updates, still I have some comments before merging it. See my review. If you don't have more time to work on this, please let me know and then complete from your work. . Thank you, . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:153,performance,time,time,153,"Hi,. @sinnfashen sorry for my late reply. Thank you for the updates, still I have some comments before merging it. See my review. If you don't have more time to work on this, please let me know and then complete from your work. . Thank you, . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:60,safety,updat,updates,60,"Hi,. @sinnfashen sorry for my late reply. Thank you for the updates, still I have some comments before merging it. See my review. If you don't have more time to work on this, please let me know and then complete from your work. . Thank you, . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:122,safety,review,review,122,"Hi,. @sinnfashen sorry for my late reply. Thank you for the updates, still I have some comments before merging it. See my review. If you don't have more time to work on this, please let me know and then complete from your work. . Thank you, . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:203,safety,compl,complete,203,"Hi,. @sinnfashen sorry for my late reply. Thank you for the updates, still I have some comments before merging it. See my review. If you don't have more time to work on this, please let me know and then complete from your work. . Thank you, . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:60,security,updat,updates,60,"Hi,. @sinnfashen sorry for my late reply. Thank you for the updates, still I have some comments before merging it. See my review. If you don't have more time to work on this, please let me know and then complete from your work. . Thank you, . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:203,security,compl,complete,203,"Hi,. @sinnfashen sorry for my late reply. Thank you for the updates, still I have some comments before merging it. See my review. If you don't have more time to work on this, please let me know and then complete from your work. . Thank you, . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:122,testability,review,review,122,"Hi,. @sinnfashen sorry for my late reply. Thank you for the updates, still I have some comments before merging it. See my review. If you don't have more time to work on this, please let me know and then complete from your work. . Thank you, . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:258,availability,slo,slowdown,258,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:151,deployability,depend,depending,151,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:794,deployability,scale,scales,794,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:794,energy efficiency,scale,scales,794,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:151,integrability,depend,depending,151,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:91,interoperability,conflict,conflicts,91,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:151,modifiability,depend,depending,151,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:499,modifiability,concern,concerns,499,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:794,modifiability,scal,scales,794,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:223,performance,parallel,parallelization,223,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:758,performance,parallel,parallelized,758,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:782,performance,perform,performance,782,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:794,performance,scale,scales,794,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:258,reliability,slo,slowdown,258,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:151,safety,depend,depending,151,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:151,testability,depend,depending,151,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:499,testability,concern,concerns,499,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:362,usability,clear,clear,362,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:663,usability,close,close,663,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2202:782,usability,perform,performance,782,"Hello @sinnfashen, thank you very much for your PR! I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2202
https://github.com/root-project/root/pull/2203:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2203
https://github.com/root-project/root/pull/2203:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2203
https://github.com/root-project/root/pull/2204:11,deployability,build,build,11,@phsft-bot build! (jenkins build is not triggered by making pr?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2204
https://github.com/root-project/root/pull/2204:27,deployability,build,build,27,@phsft-bot build! (jenkins build is not triggered by making pr?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2204
https://github.com/root-project/root/pull/2204:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2204
https://github.com/root-project/root/pull/2204:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2204
https://github.com/root-project/root/pull/2204:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2204
https://github.com/root-project/root/pull/2206:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2206
https://github.com/root-project/root/pull/2206:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2206
https://github.com/root-project/root/pull/2206:49,usability,user,user-images,49,It behaves similar in notebooks:. ![foo](https://user-images.githubusercontent.com/6951222/41587673-0dcda576-73b0-11e8-9699-b6f286270792.png).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2206
https://github.com/root-project/root/pull/2207:16,reliability,doe,does,16,Closing as this does not solve the problem in case the input tree has friends and therefore we _need_ to add the output trees as clones of the input tree (for when a friend switches files).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2207
https://github.com/root-project/root/pull/2207:55,safety,input,input,55,Closing as this does not solve the problem in case the input tree has friends and therefore we _need_ to add the output trees as clones of the input tree (for when a friend switches files).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2207
https://github.com/root-project/root/pull/2207:143,safety,input,input,143,Closing as this does not solve the problem in case the input tree has friends and therefore we _need_ to add the output trees as clones of the input tree (for when a friend switches files).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2207
https://github.com/root-project/root/pull/2207:55,usability,input,input,55,Closing as this does not solve the problem in case the input tree has friends and therefore we _need_ to add the output trees as clones of the input tree (for when a friend switches files).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2207
https://github.com/root-project/root/pull/2207:143,usability,input,input,143,Closing as this does not solve the problem in case the input tree has friends and therefore we _need_ to add the output trees as clones of the input tree (for when a friend switches files).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2207
https://github.com/root-project/root/pull/2208:52,deployability,configurat,configurations,52,"I can merge this PR. Jenkins does not have yet Cuda configurations, but I have tested on Cuda. . Thank you Maos for the fix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2208
https://github.com/root-project/root/pull/2208:52,integrability,configur,configurations,52,"I can merge this PR. Jenkins does not have yet Cuda configurations, but I have tested on Cuda. . Thank you Maos for the fix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2208
https://github.com/root-project/root/pull/2208:52,modifiability,configur,configurations,52,"I can merge this PR. Jenkins does not have yet Cuda configurations, but I have tested on Cuda. . Thank you Maos for the fix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2208
https://github.com/root-project/root/pull/2208:29,reliability,doe,does,29,"I can merge this PR. Jenkins does not have yet Cuda configurations, but I have tested on Cuda. . Thank you Maos for the fix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2208
https://github.com/root-project/root/pull/2208:79,safety,test,tested,79,"I can merge this PR. Jenkins does not have yet Cuda configurations, but I have tested on Cuda. . Thank you Maos for the fix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2208
https://github.com/root-project/root/pull/2208:52,security,configur,configurations,52,"I can merge this PR. Jenkins does not have yet Cuda configurations, but I have tested on Cuda. . Thank you Maos for the fix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2208
https://github.com/root-project/root/pull/2208:79,testability,test,tested,79,"I can merge this PR. Jenkins does not have yet Cuda configurations, but I have tested on Cuda. . Thank you Maos for the fix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2208
https://github.com/root-project/root/pull/2212:26,deployability,patch,patches,26,Also merged into v6-14-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2212
https://github.com/root-project/root/pull/2212:26,safety,patch,patches,26,Also merged into v6-14-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2212
https://github.com/root-project/root/pull/2212:26,security,patch,patches,26,Also merged into v6-14-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2212
https://github.com/root-project/root/pull/2213:11,deployability,build,build,11,@phsft-bot build! please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2213
https://github.com/root-project/root/pull/2213:11,deployability,build,build,11,@phsft-bot build!!!!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2213
https://github.com/root-project/root/pull/2215:50,deployability,patch,patch,50,"It looks like the checks never completed, but the patch should not be the reason.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:31,safety,compl,completed,31,"It looks like the checks never completed, but the patch should not be the reason.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:50,safety,patch,patch,50,"It looks like the checks never completed, but the patch should not be the reason.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:31,security,compl,completed,31,"It looks like the checks never completed, but the patch should not be the reason.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:50,security,patch,patch,50,"It looks like the checks never completed, but the patch should not be the reason.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:37,deployability,patch,patch,37,"@henryiii You may interested in this patch for Goofit, it avoids some superfluous computations in Minuit2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:37,safety,patch,patch,37,"@henryiii You may interested in this patch for Goofit, it avoids some superfluous computations in Minuit2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:58,safety,avoid,avoids,58,"@henryiii You may interested in this patch for Goofit, it avoids some superfluous computations in Minuit2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:37,security,patch,patch,37,"@henryiii You may interested in this patch for Goofit, it avoids some superfluous computations in Minuit2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:58,safety,test,tests,58,"Looks fine as far as I can tell. Travis runs some Minuit2 tests which must have passed, as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:58,testability,test,tests,58,"Looks fine as far as I can tell. Travis runs some Minuit2 tests which must have passed, as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:111,availability,avail,available,111,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:22,deployability,patch,patch,22,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:322,deployability,Modul,ModularFunction,322,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:322,integrability,Modular,ModularFunction,322,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:322,modifiability,Modul,ModularFunction,322,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:192,performance,cach,cached,192,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:281,performance,time,times,281,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:434,performance,time,time,434,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:111,reliability,availab,available,111,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:22,safety,patch,patch,22,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:111,safety,avail,available,111,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:322,safety,Modul,ModularFunction,322,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:22,security,patch,patch,22,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:111,security,availab,available,111,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:322,testability,Modula,ModularFunction,322,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:149,usability,prefer,prefer,149,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:339,usability,Minim,Minimize,339,"Hi, . @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. . However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:100,availability,failur,failure,100,"@HDembinski please fork also [roottest,](https://github.com/root-project/roottest) to prevent build failure on `windows10/cxx14`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:94,deployability,build,build,94,"@HDembinski please fork also [roottest,](https://github.com/root-project/roottest) to prevent build failure on `windows10/cxx14`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:100,deployability,fail,failure,100,"@HDembinski please fork also [roottest,](https://github.com/root-project/roottest) to prevent build failure on `windows10/cxx14`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:100,performance,failur,failure,100,"@HDembinski please fork also [roottest,](https://github.com/root-project/roottest) to prevent build failure on `windows10/cxx14`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:100,reliability,fail,failure,100,"@HDembinski please fork also [roottest,](https://github.com/root-project/roottest) to prevent build failure on `windows10/cxx14`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:86,safety,prevent,prevent,86,"@HDembinski please fork also [roottest,](https://github.com/root-project/roottest) to prevent build failure on `windows10/cxx14`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:86,security,preven,prevent,86,"@HDembinski please fork also [roottest,](https://github.com/root-project/roottest) to prevent build failure on `windows10/cxx14`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:61,energy efficiency,green,green,61,Thank you for doing this ! I would like to merge it if it is green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:364,deployability,version,version,364,"I agree with you Hans. It is better to use directly std::numeric_limits<double>. The values are as expected the same ( ROOT::Minuit2::MnMachinePrecision::Eps() = 8*std::numeric_limits<double>::epsilon() ). I think it was not used for historical reason, at the time Minuit was designed 50 years ago there, but it is true this could have been changed in the new C++ version. . I will then create a new PR and close this one",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:364,integrability,version,version,364,"I agree with you Hans. It is better to use directly std::numeric_limits<double>. The values are as expected the same ( ROOT::Minuit2::MnMachinePrecision::Eps() = 8*std::numeric_limits<double>::epsilon() ). I think it was not used for historical reason, at the time Minuit was designed 50 years ago there, but it is true this could have been changed in the new C++ version. . I will then create a new PR and close this one",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:364,modifiability,version,version,364,"I agree with you Hans. It is better to use directly std::numeric_limits<double>. The values are as expected the same ( ROOT::Minuit2::MnMachinePrecision::Eps() = 8*std::numeric_limits<double>::epsilon() ). I think it was not used for historical reason, at the time Minuit was designed 50 years ago there, but it is true this could have been changed in the new C++ version. . I will then create a new PR and close this one",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:260,performance,time,time,260,"I agree with you Hans. It is better to use directly std::numeric_limits<double>. The values are as expected the same ( ROOT::Minuit2::MnMachinePrecision::Eps() = 8*std::numeric_limits<double>::epsilon() ). I think it was not used for historical reason, at the time Minuit was designed 50 years ago there, but it is true this could have been changed in the new C++ version. . I will then create a new PR and close this one",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:407,usability,close,close,407,"I agree with you Hans. It is better to use directly std::numeric_limits<double>. The values are as expected the same ( ROOT::Minuit2::MnMachinePrecision::Eps() = 8*std::numeric_limits<double>::epsilon() ). I think it was not used for historical reason, at the time Minuit was designed 50 years ago there, but it is true this could have been changed in the new C++ version. . I will then create a new PR and close this one",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2215:0,energy efficiency,Cool,Cool,0,"Cool, that's even a better solution :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2215
https://github.com/root-project/root/pull/2216:85,interoperability,conflict,conflicts,85,"Hi Manos, . Now that we have the Pooling layer PR is merged, can you please fix this conflicts. . Thanks a lot. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:41,modifiability,layer,layer,41,"Hi Manos, . Now that we have the Pooling layer PR is merged, can you please fix this conflicts. . Thanks a lot. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:235,deployability,depend,depends,235,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:411,deployability,updat,updated,411,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:89,energy efficiency,current,currently,89,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:235,integrability,depend,depends,235,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:475,integrability,messag,messages,475,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:285,interoperability,conflict,conflict,285,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:475,interoperability,messag,messages,475,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:229,modifiability,layer,layer,229,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:235,modifiability,depend,depends,235,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:77,safety,compl,complex,77,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:176,safety,test,tests,176,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:235,safety,depend,depends,235,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:411,safety,updat,updated,411,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:77,security,compl,complex,77,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:411,security,updat,updated,411,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:176,testability,test,tests,176,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:235,testability,depend,depends,235,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:267,testability,simpl,simple,267,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:307,testability,simpl,simple,307,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:594,testability,plan,plan,594,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:267,usability,simpl,simple,267,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:307,usability,simpl,simple,307,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:662,usability,prefer,prefer,662,"Hey Lorenzo! Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:84,deployability,updat,updated,84,"As discussed with @lmoneta I opened a new pull request which is rebased against the updated master, fixes conflicts with previous PRs as well as all warnings. Please refer to #2301",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:106,interoperability,conflict,conflicts,106,"As discussed with @lmoneta I opened a new pull request which is rebased against the updated master, fixes conflicts with previous PRs as well as all warnings. Please refer to #2301",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:84,safety,updat,updated,84,"As discussed with @lmoneta I opened a new pull request which is rebased against the updated master, fixes conflicts with previous PRs as well as all warnings. Please refer to #2301",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2216:84,security,updat,updated,84,"As discussed with @lmoneta I opened a new pull request which is rebased against the updated master, fixes conflicts with previous PRs as well as all warnings. Please refer to #2301",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2216
https://github.com/root-project/root/pull/2217:4,availability,failur,failure,4,The failure in projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck is expected and needs a reference file update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2217
https://github.com/root-project/root/pull/2217:4,deployability,fail,failure,4,The failure in projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck is expected and needs a reference file update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2217
https://github.com/root-project/root/pull/2217:124,deployability,updat,update,124,The failure in projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck is expected and needs a reference file update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2217
https://github.com/root-project/root/pull/2217:41,energy efficiency,core,core,41,The failure in projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck is expected and needs a reference file update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2217
https://github.com/root-project/root/pull/2217:4,performance,failur,failure,4,The failure in projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck is expected and needs a reference file update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2217
https://github.com/root-project/root/pull/2217:4,reliability,fail,failure,4,The failure in projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck is expected and needs a reference file update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2217
https://github.com/root-project/root/pull/2217:124,safety,updat,update,124,The failure in projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck is expected and needs a reference file update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2217
https://github.com/root-project/root/pull/2217:124,security,updat,update,124,The failure in projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck is expected and needs a reference file update.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2217
https://github.com/root-project/root/pull/2219:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2219
https://github.com/root-project/root/pull/2219:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2219
https://github.com/root-project/root/pull/2219:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2219
https://github.com/root-project/root/pull/2220:14,reliability,doe,doesn,14,"Stupid github doesn't understand what ""revert a PR"" means.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2220
https://github.com/root-project/root/pull/2220:22,testability,understand,understand,22,"Stupid github doesn't understand what ""revert a PR"" means.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2220
https://github.com/root-project/root/pull/2221:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2221
https://github.com/root-project/root/pull/2227:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2227
https://github.com/root-project/root/pull/2228:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2228
https://github.com/root-project/root/pull/2228:15,energy efficiency,green,green,15,"nightlies were green, merging this in v6.14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2228
https://github.com/root-project/root/pull/2231:27,availability,failur,failures,27,To be merged in case those failures in `dataframe_nodes` pop up again.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2231
https://github.com/root-project/root/pull/2231:27,deployability,fail,failures,27,To be merged in case those failures in `dataframe_nodes` pop up again.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2231
https://github.com/root-project/root/pull/2231:27,performance,failur,failures,27,To be merged in case those failures in `dataframe_nodes` pop up again.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2231
https://github.com/root-project/root/pull/2231:27,reliability,fail,failures,27,To be merged in case those failures in `dataframe_nodes` pop up again.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2231
https://github.com/root-project/root/pull/2231:83,performance,time,timeouts,83,Closing as we probably want `numeric_limits` and anyway we want to investigate the timeouts should they not be solved by #2240,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2231
https://github.com/root-project/root/pull/2231:83,safety,timeout,timeouts,83,Closing as we probably want `numeric_limits` and anyway we want to investigate the timeouts should they not be solved by #2240,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2231
https://github.com/root-project/root/pull/2232:478,availability,error,error,478,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:582,availability,Slo,Slot,582,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:628,availability,Slo,Slot,628,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:645,availability,Slo,Slot,645,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:814,availability,error,error,814,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:918,availability,Slo,SlotAndEntry,918,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:972,availability,Slo,SlotAndEntry,972,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:997,availability,Slo,SlotAndEntry,997,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1239,availability,error,error,1239,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:92,deployability,build,build,92,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:126,deployability,build,build,126,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:132,deployability,build,build,132,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:195,deployability,build,build,195,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:229,deployability,build,build,229,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:235,deployability,build,build,235,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:313,deployability,build,build,313,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:347,deployability,build,build,347,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:353,deployability,build,build,353,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:703,deployability,build,build,703,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:737,deployability,build,build,737,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:743,deployability,build,build,743,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1063,deployability,build,build,1063,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1097,deployability,build,build,1097,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1103,deployability,build,build,1103,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1160,deployability,build,build,1160,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1194,deployability,build,build,1194,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1200,deployability,build,build,1200,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1281,deployability,build,build,1281,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1315,deployability,build,build,1315,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1321,deployability,build,build,1321,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:521,integrability,pub,public,521,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:857,integrability,pub,public,857,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:241,interoperability,bind,bindings,241,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:241,modifiability,bind,bindings,241,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:478,performance,error,error,478,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:814,performance,error,error,814,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1239,performance,error,error,1239,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:582,reliability,Slo,Slot,582,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:628,reliability,Slo,Slot,628,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:645,reliability,Slo,Slot,645,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:918,reliability,Slo,SlotAndEntry,918,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:972,reliability,Slo,SlotAndEntry,972,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:997,reliability,Slo,SlotAndEntry,997,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1421,reliability,doe,does,1421,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:478,safety,error,error,478,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:814,safety,error,error,814,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1239,safety,error,error,1239,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:478,usability,error,error,478,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:562,usability,Custom,CustomColExtraArgs,562,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:608,usability,Custom,CustomColExtraArgs,608,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:650,usability,Custom,CustomColExtraArgs,650,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:814,usability,error,error,814,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:898,usability,Custom,CustomColExtraArgs,898,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:952,usability,Custom,CustomColExtraArgs,952,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1010,usability,Custom,CustomColExtraArgs,1010,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2232:1239,usability,error,error,1239,"@bellenot any idea how to make windows happy on this one? :sweat_smile: . ```. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\bindings\pyroot\PyROOT.vcxproj"" (default target) (310) ->. 21:03:23 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj"" (default target) (319) ->. 21:03:23 (Link target) -> . 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::Slot & ROOT::Detail::RDF::CustomColExtraArgs::Slot::tag"" (?tag@Slot@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 RDataFrame.obj : error LNK2001: unresolved external symbol ""public: static struct ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry & ROOT::Detail::RDF::CustomColExtraArgs::SlotAndEntry::tag"" (?tag@SlotAndEntry@CustomColExtraArgs@RDF@Detail@ROOT@@2AAU12345@A) [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. 21:03:23 C:\build\workspace\root-pullrequests-build\build\bin\libROOTDataFrame.dll : fatal error LNK1120: 2 unresolved externals [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\ROOTDataFrame.vcxproj]. ```. ...uhm ok, maybe I know, it might be that windows does not like uninitialized static refs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2232
https://github.com/root-project/root/pull/2233:30,deployability,build,build,30,"Except for style, I guess the build system changes are ok. Assigning to Lorenzo to review the CUDA parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2233:36,modifiability,system chang,system changes,36,"Except for style, I guess the build system changes are ok. Assigning to Lorenzo to review the CUDA parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2233:0,safety,Except,Except,0,"Except for style, I guess the build system changes are ok. Assigning to Lorenzo to review the CUDA parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2233:83,safety,review,review,83,"Except for style, I guess the build system changes are ok. Assigning to Lorenzo to review the CUDA parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2233:83,testability,review,review,83,"Except for style, I guess the build system changes are ok. Assigning to Lorenzo to review the CUDA parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2233:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2233:35,deployability,build,building,35,"HI Manos, . There are some warning building this PR due to un-used parameters. Could you please fix them ? See http://cdash.cern.ch/viewBuildError.php?type=1&buildid=531671. Thanks . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2233:158,deployability,build,buildid,158,"HI Manos, . There are some warning building this PR due to un-used parameters. Could you please fix them ? See http://cdash.cern.ch/viewBuildError.php?type=1&buildid=531671. Thanks . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2233:67,modifiability,paramet,parameters,67,"HI Manos, . There are some warning building this PR due to un-used parameters. Could you please fix them ? See http://cdash.cern.ch/viewBuildError.php?type=1&buildid=531671. Thanks . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2233:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2233
https://github.com/root-project/root/pull/2236:30,availability,error,error,30,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:561,availability,error,error,561,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:707,availability,Error,Error,707,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:845,availability,Error,Error,845,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:916,availability,Error,Error,916,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:41,deployability,build,building,41,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:192,deployability,build,build,192,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:209,deployability,version,version,209,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:422,deployability,build,build,422,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:439,deployability,version,version,439,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:620,deployability,build,build,620,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:670,deployability,fail,failed,670,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:793,deployability,fail,failed,793,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:892,deployability,fail,failed,892,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:209,integrability,version,version,209,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:439,integrability,version,version,439,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:209,modifiability,version,version,209,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:439,modifiability,version,version,439,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:30,performance,error,error,30,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:561,performance,error,error,561,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:707,performance,Error,Error,707,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:845,performance,Error,Error,845,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:916,performance,Error,Error,916,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:670,reliability,fail,failed,670,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:793,reliability,fail,failed,793,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:892,reliability,fail,failed,892,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:30,safety,error,error,30,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:561,safety,error,error,561,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:707,safety,Error,Error,707,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:845,safety,Error,Error,845,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:916,safety,Error,Error,916,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:30,usability,error,error,30,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:561,usability,error,error,561,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:587,usability,statu,status,587,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:707,usability,Error,Error,707,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:845,usability,Error,Error,845,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:916,usability,Error,Error,916,"@amadio . I get the following error when building with `-Dbuiltin_vc=ON -Dbuiltin_veccore=ON`. ```. CMakeFiles/RIOObjs.dir/src/TFile.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. CMakeFiles/RIOObjs.dir/src/TFileCacheRead.cxx.o: In function `runLibraryAbiCheck':. /home/arif7/CERN/build/include/Vc/version.h:115: undefined reference to `Vc_1::Common::checkLibraryAbi(unsigned int, unsigned int, char const*)'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:157: recipe for target 'lib/libRIO.so' failed. make[2]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:22576: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. Makefile:151: recipe for target 'all' failed. make: *** [all] Error 2. ```. Is there some other flag I need to pass to cmake ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:45,interoperability,incompatib,incompatibility,45,"Hi @ArifAhmed1995 , that means there is some incompatibility with your compiler, probably. Can you please try with GCC 6.x? I believe you are using GCC 5, right? Vc has some problems with older compilers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:31,deployability,version,version,31,You may also try to add `-fabi-version=0` to your compilation flags with `-DCMAKE_CXX_FLAGS=...`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:31,integrability,version,version,31,You may also try to add `-fabi-version=0` to your compilation flags with `-DCMAKE_CXX_FLAGS=...`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:31,modifiability,version,version,31,You may also try to add `-fabi-version=0` to your compilation flags with `-DCMAKE_CXX_FLAGS=...`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:141,availability,error,error,141,"@amadio I recompiled first `Vc` with `gcc 6.4` and then ROOT with the same. Also, I used `-fabi-version=0` while building ROOT. But the same error pops up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:96,deployability,version,version,96,"@amadio I recompiled first `Vc` with `gcc 6.4` and then ROOT with the same. Also, I used `-fabi-version=0` while building ROOT. But the same error pops up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:113,deployability,build,building,113,"@amadio I recompiled first `Vc` with `gcc 6.4` and then ROOT with the same. Also, I used `-fabi-version=0` while building ROOT. But the same error pops up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:96,integrability,version,version,96,"@amadio I recompiled first `Vc` with `gcc 6.4` and then ROOT with the same. Also, I used `-fabi-version=0` while building ROOT. But the same error pops up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:96,modifiability,version,version,96,"@amadio I recompiled first `Vc` with `gcc 6.4` and then ROOT with the same. Also, I used `-fabi-version=0` while building ROOT. But the same error pops up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:141,performance,error,error,141,"@amadio I recompiled first `Vc` with `gcc 6.4` and then ROOT with the same. Also, I used `-fabi-version=0` while building ROOT. But the same error pops up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:141,safety,error,error,141,"@amadio I recompiled first `Vc` with `gcc 6.4` and then ROOT with the same. Also, I used `-fabi-version=0` while building ROOT. But the same error pops up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:141,usability,error,error,141,"@amadio I recompiled first `Vc` with `gcc 6.4` and then ROOT with the same. Also, I used `-fabi-version=0` while building ROOT. But the same error pops up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:211,deployability,build,build,211,"I don't understand. If you compiled Vc, why are you enabling builtin_vc? Your problem could be that you have two Vc libraries and are using headers from one and the library from the other, or using incompatible build flags for Vc and ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:198,interoperability,incompatib,incompatible,198,"I don't understand. If you compiled Vc, why are you enabling builtin_vc? Your problem could be that you have two Vc libraries and are using headers from one and the library from the other, or using incompatible build flags for Vc and ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:8,testability,understand,understand,8,"I don't understand. If you compiled Vc, why are you enabling builtin_vc? Your problem could be that you have two Vc libraries and are using headers from one and the library from the other, or using incompatible build flags for Vc and ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:35,availability,error,errors,35,"Hi Arif, please take a look at the errors shown above (from our Jenkins builds). We need to fix them before the code can be merged. You can ignore the NewDelete.cxx warnings and just fix the TMath errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:197,availability,error,errors,197,"Hi Arif, please take a look at the errors shown above (from our Jenkins builds). We need to fix them before the code can be merged. You can ignore the NewDelete.cxx warnings and just fix the TMath errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:72,deployability,build,builds,72,"Hi Arif, please take a look at the errors shown above (from our Jenkins builds). We need to fix them before the code can be merged. You can ignore the NewDelete.cxx warnings and just fix the TMath errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:35,performance,error,errors,35,"Hi Arif, please take a look at the errors shown above (from our Jenkins builds). We need to fix them before the code can be merged. You can ignore the NewDelete.cxx warnings and just fix the TMath errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:197,performance,error,errors,197,"Hi Arif, please take a look at the errors shown above (from our Jenkins builds). We need to fix them before the code can be merged. You can ignore the NewDelete.cxx warnings and just fix the TMath errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:35,safety,error,errors,35,"Hi Arif, please take a look at the errors shown above (from our Jenkins builds). We need to fix them before the code can be merged. You can ignore the NewDelete.cxx warnings and just fix the TMath errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:197,safety,error,errors,197,"Hi Arif, please take a look at the errors shown above (from our Jenkins builds). We need to fix them before the code can be merged. You can ignore the NewDelete.cxx warnings and just fix the TMath errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:35,usability,error,errors,35,"Hi Arif, please take a look at the errors shown above (from our Jenkins builds). We need to fix them before the code can be merged. You can ignore the NewDelete.cxx warnings and just fix the TMath errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:197,usability,error,errors,197,"Hi Arif, please take a look at the errors shown above (from our Jenkins builds). We need to fix them before the code can be merged. You can ignore the NewDelete.cxx warnings and just fix the TMath errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build with flags -Dvc=ON -Dbuiltin_veccore=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:22,deployability,build,build,22,"Alright, looks like a build got stuck, so I aborted it. Seems to be working now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:233,interoperability,platform,platforms,233,"Hi Arif, I will add comments soon, but the code still does not compile, please try to fix that in the mean time. Please make sure to test locally with both `veccore=ON` and `veccore=OFF` to avoid the long time it takes to run on all platforms here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:107,performance,time,time,107,"Hi Arif, I will add comments soon, but the code still does not compile, please try to fix that in the mean time. Please make sure to test locally with both `veccore=ON` and `veccore=OFF` to avoid the long time it takes to run on all platforms here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:205,performance,time,time,205,"Hi Arif, I will add comments soon, but the code still does not compile, please try to fix that in the mean time. Please make sure to test locally with both `veccore=ON` and `veccore=OFF` to avoid the long time it takes to run on all platforms here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:54,reliability,doe,does,54,"Hi Arif, I will add comments soon, but the code still does not compile, please try to fix that in the mean time. Please make sure to test locally with both `veccore=ON` and `veccore=OFF` to avoid the long time it takes to run on all platforms here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:133,safety,test,test,133,"Hi Arif, I will add comments soon, but the code still does not compile, please try to fix that in the mean time. Please make sure to test locally with both `veccore=ON` and `veccore=OFF` to avoid the long time it takes to run on all platforms here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:190,safety,avoid,avoid,190,"Hi Arif, I will add comments soon, but the code still does not compile, please try to fix that in the mean time. Please make sure to test locally with both `veccore=ON` and `veccore=OFF` to avoid the long time it takes to run on all platforms here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:133,testability,test,test,133,"Hi Arif, I will add comments soon, but the code still does not compile, please try to fix that in the mean time. Please make sure to test locally with both `veccore=ON` and `veccore=OFF` to avoid the long time it takes to run on all platforms here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:230,availability,error,errors,230,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:272,availability,error,error,272,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:199,modifiability,scal,scalar,199,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:230,performance,error,errors,230,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:272,performance,error,error,272,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:230,safety,error,errors,230,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:272,safety,error,error,272,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:182,security,sign,signature,182,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:65,testability,simpl,simply,65,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:65,usability,simpl,simply,65,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:230,usability,error,errors,230,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:272,usability,error,error,272,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:. ```. TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:69,performance,time,time,69,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:293,reliability,doe,does,293,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:272,safety,test,testVectorizedTMath,272,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:368,safety,test,test,368,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:409,safety,test,test,409,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:464,safety,test,testGradientFittingUnit,464,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:516,safety,Test,Test,516,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:546,safety,test,test-GradientFittingUnit,546,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:272,testability,test,testVectorizedTMath,272,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:368,testability,test,test,368,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:409,testability,test,test,409,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:464,testability,test,testGradientFittingUnit,464,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:516,testability,Test,Test,516,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:546,testability,test,test-GradientFittingUnit,546,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run. Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ? The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine. ```. 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:14,usability,feedback,feedback,14,"@xvallspl Any feedback on the implementation ? Also, how to tackle the issue mentioned in the last comment ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:6,availability,error,errors,6,"These errors should have definitely come up on my system, but it didn't. I think it will be best to flush my system of anything related to `Vc` or `VecCore` cause that it definitely causing confusion with `builtin_vc` or `builtin_veccore`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:6,performance,error,errors,6,"These errors should have definitely come up on my system, but it didn't. I think it will be best to flush my system of anything related to `Vc` or `VecCore` cause that it definitely causing confusion with `builtin_vc` or `builtin_veccore`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:6,safety,error,errors,6,"These errors should have definitely come up on my system, but it didn't. I think it will be best to flush my system of anything related to `Vc` or `VecCore` cause that it definitely causing confusion with `builtin_vc` or `builtin_veccore`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:6,usability,error,errors,6,"These errors should have definitely come up on my system, but it didn't. I think it will be best to flush my system of anything related to `Vc` or `VecCore` cause that it definitely causing confusion with `builtin_vc` or `builtin_veccore`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:20,deployability,build,build,20,@amadio The current build will fail. Would request to stop it. I would really need to get `Vc` issue resolved on my system first in order to sort out any other issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:31,deployability,fail,fail,31,@amadio The current build will fail. Would request to stop it. I would really need to get `Vc` issue resolved on my system first in order to sort out any other issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:12,energy efficiency,current,current,12,@amadio The current build will fail. Would request to stop it. I would really need to get `Vc` issue resolved on my system first in order to sort out any other issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:31,reliability,fail,fail,31,@amadio The current build will fail. Would request to stop it. I would really need to get `Vc` issue resolved on my system first in order to sort out any other issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:54,usability,stop,stop,54,@amadio The current build will fail. Would request to stop it. I would really need to get `Vc` issue resolved on my system first in order to sort out any other issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:108,reliability,doe,doesn,108,"@ArifAhmed1995 I think you need to focus on making your code compile as the very first thing, because if it doesn't compile we cannot merge it. As I mentioned above, please test both with VecCore+Vc enabled and disabled on your local system. Since you had pushed more changes, I wanted to check if the problems were sorted out, but I see that they are not. I was waiting for at least the compilation to work before adding extra comments, but I will add comments now in any case. Some comments may be repeated from what we have already discussed on mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:173,safety,test,test,173,"@ArifAhmed1995 I think you need to focus on making your code compile as the very first thing, because if it doesn't compile we cannot merge it. As I mentioned above, please test both with VecCore+Vc enabled and disabled on your local system. Since you had pushed more changes, I wanted to check if the problems were sorted out, but I see that they are not. I was waiting for at least the compilation to work before adding extra comments, but I will add comments now in any case. Some comments may be repeated from what we have already discussed on mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:173,testability,test,test,173,"@ArifAhmed1995 I think you need to focus on making your code compile as the very first thing, because if it doesn't compile we cannot merge it. As I mentioned above, please test both with VecCore+Vc enabled and disabled on your local system. Since you had pushed more changes, I wanted to check if the problems were sorted out, but I see that they are not. I was waiting for at least the compilation to work before adding extra comments, but I will add comments now in any case. Some comments may be repeated from what we have already discussed on mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:172,modifiability,portab,portability,172,"There's some issues with mattermost chatroom right now, so posting the query here. Didn't quite get what's meant by people wanting to compile code written with VecCore for portability(when `vc=OFF`). If `Vc` is absent the `ScalarBackend` is used, which means `Double_v` will be scalar and of similar type to `Double_t`. So, since both scalar function in `TMath.cxx` and the vectorized one would be same, why should the new ones be compiled at all ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:223,modifiability,Scal,ScalarBackend,223,"There's some issues with mattermost chatroom right now, so posting the query here. Didn't quite get what's meant by people wanting to compile code written with VecCore for portability(when `vc=OFF`). If `Vc` is absent the `ScalarBackend` is used, which means `Double_v` will be scalar and of similar type to `Double_t`. So, since both scalar function in `TMath.cxx` and the vectorized one would be same, why should the new ones be compiled at all ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:278,modifiability,scal,scalar,278,"There's some issues with mattermost chatroom right now, so posting the query here. Didn't quite get what's meant by people wanting to compile code written with VecCore for portability(when `vc=OFF`). If `Vc` is absent the `ScalarBackend` is used, which means `Double_v` will be scalar and of similar type to `Double_t`. So, since both scalar function in `TMath.cxx` and the vectorized one would be same, why should the new ones be compiled at all ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:335,modifiability,scal,scalar,335,"There's some issues with mattermost chatroom right now, so posting the query here. Didn't quite get what's meant by people wanting to compile code written with VecCore for portability(when `vc=OFF`). If `Vc` is absent the `ScalarBackend` is used, which means `Double_v` will be scalar and of similar type to `Double_t`. So, since both scalar function in `TMath.cxx` and the vectorized one would be same, why should the new ones be compiled at all ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:270,deployability,version,version,270,"Exactly, we shouldn't compile them. This happens for TMath, but in other cases there is usually no duplication of the scalar part, only the template exists. The problem is that we don't need/want the two copies, so the templates need to use SFINAE to disable the scalar version when it clashes with other parts of ROOT. In the current case where it's an overload instead of a template, they need to either be converted to templates or ifdef'd out. I think converting to templates will be a bit troublesome, so an ifdef is probably required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:327,energy efficiency,current,current,327,"Exactly, we shouldn't compile them. This happens for TMath, but in other cases there is usually no duplication of the scalar part, only the template exists. The problem is that we don't need/want the two copies, so the templates need to use SFINAE to disable the scalar version when it clashes with other parts of ROOT. In the current case where it's an overload instead of a template, they need to either be converted to templates or ifdef'd out. I think converting to templates will be a bit troublesome, so an ifdef is probably required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:270,integrability,version,version,270,"Exactly, we shouldn't compile them. This happens for TMath, but in other cases there is usually no duplication of the scalar part, only the template exists. The problem is that we don't need/want the two copies, so the templates need to use SFINAE to disable the scalar version when it clashes with other parts of ROOT. In the current case where it's an overload instead of a template, they need to either be converted to templates or ifdef'd out. I think converting to templates will be a bit troublesome, so an ifdef is probably required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:118,modifiability,scal,scalar,118,"Exactly, we shouldn't compile them. This happens for TMath, but in other cases there is usually no duplication of the scalar part, only the template exists. The problem is that we don't need/want the two copies, so the templates need to use SFINAE to disable the scalar version when it clashes with other parts of ROOT. In the current case where it's an overload instead of a template, they need to either be converted to templates or ifdef'd out. I think converting to templates will be a bit troublesome, so an ifdef is probably required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:263,modifiability,scal,scalar,263,"Exactly, we shouldn't compile them. This happens for TMath, but in other cases there is usually no duplication of the scalar part, only the template exists. The problem is that we don't need/want the two copies, so the templates need to use SFINAE to disable the scalar version when it clashes with other parts of ROOT. In the current case where it's an overload instead of a template, they need to either be converted to templates or ifdef'd out. I think converting to templates will be a bit troublesome, so an ifdef is probably required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:270,modifiability,version,version,270,"Exactly, we shouldn't compile them. This happens for TMath, but in other cases there is usually no duplication of the scalar part, only the template exists. The problem is that we don't need/want the two copies, so the templates need to use SFINAE to disable the scalar version when it clashes with other parts of ROOT. In the current case where it's an overload instead of a template, they need to either be converted to templates or ifdef'd out. I think converting to templates will be a bit troublesome, so an ifdef is probably required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:64,deployability,depend,depending,64,"@ArifAhmed1995 We should use a combination of these two macros, depending on the case. If you just use `R__HAS_VC`, then it will be broken when Vc is enabled and VecCore disabled (Vc is used in ROOT independently of VecCore in the GenVector library). I am working to convert that library to VecCore, but in the mean time, Vc and VecCore are independent options that may be ON or OFF in any combination.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:64,integrability,depend,depending,64,"@ArifAhmed1995 We should use a combination of these two macros, depending on the case. If you just use `R__HAS_VC`, then it will be broken when Vc is enabled and VecCore disabled (Vc is used in ROOT independently of VecCore in the GenVector library). I am working to convert that library to VecCore, but in the mean time, Vc and VecCore are independent options that may be ON or OFF in any combination.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:64,modifiability,depend,depending,64,"@ArifAhmed1995 We should use a combination of these two macros, depending on the case. If you just use `R__HAS_VC`, then it will be broken when Vc is enabled and VecCore disabled (Vc is used in ROOT independently of VecCore in the GenVector library). I am working to convert that library to VecCore, but in the mean time, Vc and VecCore are independent options that may be ON or OFF in any combination.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:316,performance,time,time,316,"@ArifAhmed1995 We should use a combination of these two macros, depending on the case. If you just use `R__HAS_VC`, then it will be broken when Vc is enabled and VecCore disabled (Vc is used in ROOT independently of VecCore in the GenVector library). I am working to convert that library to VecCore, but in the mean time, Vc and VecCore are independent options that may be ON or OFF in any combination.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:64,safety,depend,depending,64,"@ArifAhmed1995 We should use a combination of these two macros, depending on the case. If you just use `R__HAS_VC`, then it will be broken when Vc is enabled and VecCore disabled (Vc is used in ROOT independently of VecCore in the GenVector library). I am working to convert that library to VecCore, but in the mean time, Vc and VecCore are independent options that may be ON or OFF in any combination.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:64,testability,depend,depending,64,"@ArifAhmed1995 We should use a combination of these two macros, depending on the case. If you just use `R__HAS_VC`, then it will be broken when Vc is enabled and VecCore disabled (Vc is used in ROOT independently of VecCore in the GenVector library). I am working to convert that library to VecCore, but in the mean time, Vc and VecCore are independent options that may be ON or OFF in any combination.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:17,deployability,continu,continue,17,@amadio Should I continue to add more functions or write the benchmarks for the ones now ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:34,interoperability,conflict,conflicts,34,"Jenkins says that there are merge conflicts, so I'd start by resolving that and rebasing (please do not use a merge commit). Then we can benchmark what's there and ensure everything works by running the tests for supported architectures (at least using SSE4.2 and AVX2). Then we can move on with adding more functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:223,interoperability,architectur,architectures,223,"Jenkins says that there are merge conflicts, so I'd start by resolving that and rebasing (please do not use a merge commit). Then we can benchmark what's there and ensure everything works by running the tests for supported architectures (at least using SSE4.2 and AVX2). Then we can move on with adding more functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:203,safety,test,tests,203,"Jenkins says that there are merge conflicts, so I'd start by resolving that and rebasing (please do not use a merge commit). Then we can benchmark what's there and ensure everything works by running the tests for supported architectures (at least using SSE4.2 and AVX2). Then we can move on with adding more functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:203,testability,test,tests,203,"Jenkins says that there are merge conflicts, so I'd start by resolving that and rebasing (please do not use a merge commit). Then we can benchmark what's there and ensure everything works by running the tests for supported architectures (at least using SSE4.2 and AVX2). Then we can move on with adding more functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:213,usability,support,supported,213,"Jenkins says that there are merge conflicts, so I'd start by resolving that and rebasing (please do not use a merge commit). Then we can benchmark what's there and ensure everything works by running the tests for supported architectures (at least using SSE4.2 and AVX2). Then we can move on with adding more functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:46,interoperability,conflict,conflicts,46,"Hi @ArifAhmed1995 , how are you resolving the conflicts? Are you using `git rebase`? It doesn't look like the conflicts have been resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:110,interoperability,conflict,conflicts,110,"Hi @ArifAhmed1995 , how are you resolving the conflicts? Are you using `git rebase`? It doesn't look like the conflicts have been resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:88,reliability,doe,doesn,88,"Hi @ArifAhmed1995 , how are you resolving the conflicts? Are you using `git rebase`? It doesn't look like the conflicts have been resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:108,availability,error,error,108,@amadio Oh....ignore that commit for now. I forgot a step whilst rebasing. Currently there seems to another error while compiling with new changes from master. I'm trying to figure it out. Will ask on mattermost if any help is required.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:75,energy efficiency,Current,Currently,75,@amadio Oh....ignore that commit for now. I forgot a step whilst rebasing. Currently there seems to another error while compiling with new changes from master. I'm trying to figure it out. Will ask on mattermost if any help is required.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:108,performance,error,error,108,@amadio Oh....ignore that commit for now. I forgot a step whilst rebasing. Currently there seems to another error while compiling with new changes from master. I'm trying to figure it out. Will ask on mattermost if any help is required.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:108,safety,error,error,108,@amadio Oh....ignore that commit for now. I forgot a step whilst rebasing. Currently there seems to another error while compiling with new changes from master. I'm trying to figure it out. Will ask on mattermost if any help is required.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:108,usability,error,error,108,@amadio Oh....ignore that commit for now. I forgot a step whilst rebasing. Currently there seems to another error while compiling with new changes from master. I'm trying to figure it out. Will ask on mattermost if any help is required.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:219,usability,help,help,219,@amadio Oh....ignore that commit for now. I forgot a step whilst rebasing. Currently there seems to another error while compiling with new changes from master. I'm trying to figure it out. Will ask on mattermost if any help is required.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:231,modifiability,scal,scalar,231,"@amadio Okay, I think it's been resolved now. I'm going through [rootbench](https://github.com/root-project/rootbench) and beginning to write the code for the benchmarks. At first glance there doesn't seem to be benchmarks for the scalar `TMath` functions. I guess they should be added as well including the vectorized ones. Am I right in thinking this ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:193,reliability,doe,doesn,193,"@amadio Okay, I think it's been resolved now. I'm going through [rootbench](https://github.com/root-project/rootbench) and beginning to write the code for the benchmarks. At first glance there doesn't seem to be benchmarks for the scalar `TMath` functions. I guess they should be added as well including the vectorized ones. Am I right in thinking this ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:14,deployability,updat,update,14,I see. I will update the builtin VecCore in ROOT to version 0.5.0 then.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:52,deployability,version,version,52,I see. I will update the builtin VecCore in ROOT to version 0.5.0 then.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:52,integrability,version,version,52,I see. I will update the builtin VecCore in ROOT to version 0.5.0 then.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:52,modifiability,version,version,52,I see. I will update the builtin VecCore in ROOT to version 0.5.0 then.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:14,safety,updat,update,14,I see. I will update the builtin VecCore in ROOT to version 0.5.0 then.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:14,security,updat,update,14,I see. I will update the builtin VecCore in ROOT to version 0.5.0 then.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:13,deployability,updat,updated,13,@amadio I've updated this PR. Review when you find the time :).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:55,performance,time,time,55,@amadio I've updated this PR. Review when you find the time :).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:13,safety,updat,updated,13,@amadio I've updated this PR. Review when you find the time :).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:30,safety,Review,Review,30,@amadio I've updated this PR. Review when you find the time :).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:13,security,updat,updated,13,@amadio I've updated this PR. Review when you find the time :).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:30,testability,Review,Review,30,@amadio I've updated this PR. Review when you find the time :).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:19,availability,error,errors,19,"@ArifAhmed1995 The errors in Jenkins seem to be caused by your changes. Please take a look. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:19,performance,error,errors,19,"@ArifAhmed1995 The errors in Jenkins seem to be caused by your changes. Please take a look. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:19,safety,error,errors,19,"@ArifAhmed1995 The errors in Jenkins seem to be caused by your changes. Please take a look. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:19,usability,error,errors,19,"@ArifAhmed1995 The errors in Jenkins seem to be caused by your changes. Please take a look. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:281,availability,operat,operating,281,"I have clang-formatted the code now. For the other review comments : Those changes are for a previous commit. The latest one does not have those changes. Would it be better to squash everything into one commit ? About the failing tests, will try it out on a docker image for those operating systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:222,deployability,fail,failing,222,"I have clang-formatted the code now. For the other review comments : Those changes are for a previous commit. The latest one does not have those changes. Would it be better to squash everything into one commit ? About the failing tests, will try it out on a docker image for those operating systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:13,interoperability,format,formatted,13,"I have clang-formatted the code now. For the other review comments : Those changes are for a previous commit. The latest one does not have those changes. Would it be better to squash everything into one commit ? About the failing tests, will try it out on a docker image for those operating systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:125,reliability,doe,does,125,"I have clang-formatted the code now. For the other review comments : Those changes are for a previous commit. The latest one does not have those changes. Would it be better to squash everything into one commit ? About the failing tests, will try it out on a docker image for those operating systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:222,reliability,fail,failing,222,"I have clang-formatted the code now. For the other review comments : Those changes are for a previous commit. The latest one does not have those changes. Would it be better to squash everything into one commit ? About the failing tests, will try it out on a docker image for those operating systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:51,safety,review,review,51,"I have clang-formatted the code now. For the other review comments : Those changes are for a previous commit. The latest one does not have those changes. Would it be better to squash everything into one commit ? About the failing tests, will try it out on a docker image for those operating systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:230,safety,test,tests,230,"I have clang-formatted the code now. For the other review comments : Those changes are for a previous commit. The latest one does not have those changes. Would it be better to squash everything into one commit ? About the failing tests, will try it out on a docker image for those operating systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:51,testability,review,review,51,"I have clang-formatted the code now. For the other review comments : Those changes are for a previous commit. The latest one does not have those changes. Would it be better to squash everything into one commit ? About the failing tests, will try it out on a docker image for those operating systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:230,testability,test,tests,230,"I have clang-formatted the code now. For the other review comments : Those changes are for a previous commit. The latest one does not have those changes. Would it be better to squash everything into one commit ? About the failing tests, will try it out on a docker image for those operating systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:71,availability,operat,operating,71,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:. https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:12,deployability,fail,failing,12,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:. https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:160,deployability,build,build,160,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:. https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:255,deployability,build,build,255,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:. https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:369,deployability,build,buildname,369,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:. https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:334,integrability,filter,filtercount,334,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:. https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:12,reliability,fail,failing,12,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:. https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:20,safety,test,tests,20,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:. https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:20,testability,test,tests,20,"> About the failing tests, will try it out on a docker image for those operating systems. You probably don't need docker, but just to use the same flags as the build. You can find the output in cdash.cern.ch at the bottom of the page, looking for your PR build number. For example, here:. https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:266,availability,error,errors,266,@amadio Can you please run a Jenkins build again ? I linked the VectorizedTMath file to all required libraries in the most recent commit. > https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236. The errors in the link do not come up now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:37,deployability,build,build,37,@amadio Can you please run a Jenkins build again ? I linked the VectorizedTMath file to all required libraries in the most recent commit. > https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236. The errors in the link do not come up now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:220,deployability,build,buildname,220,@amadio Can you please run a Jenkins build again ? I linked the VectorizedTMath file to all required libraries in the most recent commit. > https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236. The errors in the link do not come up now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:185,integrability,filter,filtercount,185,@amadio Can you please run a Jenkins build again ? I linked the VectorizedTMath file to all required libraries in the most recent commit. > https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236. The errors in the link do not come up now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:266,performance,error,errors,266,@amadio Can you please run a Jenkins build again ? I linked the VectorizedTMath file to all required libraries in the most recent commit. > https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236. The errors in the link do not come up now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:266,safety,error,errors,266,@amadio Can you please run a Jenkins build again ? I linked the VectorizedTMath file to all required libraries in the most recent commit. > https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236. The errors in the link do not come up now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:266,usability,error,errors,266,@amadio Can you please run a Jenkins build again ? I linked the VectorizedTMath file to all required libraries in the most recent commit. > https://cdash.cern.ch/index.php?project=ROOT&filtercount=1&showfilters=1&field1=buildname/string&compare1=63&value1=2236. The errors in the link do not come up now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:50,deployability,updat,updated,50,@amadio Could you please take a look again ? I've updated it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:50,safety,updat,updated,50,@amadio Could you please take a look again ? I've updated it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:50,security,updat,updated,50,@amadio Could you please take a look again ? I've updated it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:170,availability,error,error,170,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:34,deployability,build,build,34,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:43,deployability,fail,failing,43,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:176,deployability,log,log,176,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:170,performance,error,error,170,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:43,reliability,fail,failing,43,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:170,safety,error,error,170,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:176,safety,log,log,176,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:84,security,access,access,84,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:176,security,log,log,176,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:176,testability,log,log,176,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:170,usability,error,error,170,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:197,deployability,updat,update,197,@ArifAhmed1995 I think it could be due to a problem rebasing on the master branch on that node. Would you mind rebasing on the current master with `git rebase -i origin/master` after a `git remote update`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:127,energy efficiency,current,current,127,@ArifAhmed1995 I think it could be due to a problem rebasing on the master branch on that node. Would you mind rebasing on the current master with `git rebase -i origin/master` after a `git remote update`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:197,safety,updat,update,197,@ArifAhmed1995 I think it could be due to a problem rebasing on the master branch on that node. Would you mind rebasing on the current master with `git rebase -i origin/master` after a `git remote update`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:197,security,updat,update,197,@ArifAhmed1995 I think it could be due to a problem rebasing on the master branch on that node. Would you mind rebasing on the current master with `git rebase -i origin/master` after a `git remote update`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:33,deployability,infrastructur,infrastructure,33,"@ArifAhmed1995 This is due to an infrastructure problem. If you fork also [roottest](https://github.com/root-project/roottest), the problem should go away.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:103,deployability,infrastructur,infrastructure,103,"@ArifAhmed1995 No, he just means you need to also click ""fork"" on GitHub on root-project/roottest. Our infrastructure will look for a matching branch in your fork to use with the PR...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:27,deployability,updat,updated,27,"@amadio Okay, done. Also I updated it with the changes you suggested. @bellenot Thank you for reviewing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:27,safety,updat,updated,27,"@amadio Okay, done. Also I updated it with the changes you suggested. @bellenot Thank you for reviewing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:94,safety,review,reviewing,94,"@amadio Okay, done. Also I updated it with the changes you suggested. @bellenot Thank you for reviewing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:27,security,updat,updated,27,"@amadio Okay, done. Also I updated it with the changes you suggested. @bellenot Thank you for reviewing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:94,testability,review,reviewing,94,"@amadio Okay, done. Also I updated it with the changes you suggested. @bellenot Thank you for reviewing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:112,deployability,build,builds,112,"@ArifAhmed1995 We have a problem with Jenkins (some changes to the firewall made it inacessible from GitHub, so builds won't start). Once that's resolved I will trigger another build and we can continue. Sorry for the annoyance. However, I think we are getting much closer to being able to merge your contribution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:177,deployability,build,build,177,"@ArifAhmed1995 We have a problem with Jenkins (some changes to the firewall made it inacessible from GitHub, so builds won't start). Once that's resolved I will trigger another build and we can continue. Sorry for the annoyance. However, I think we are getting much closer to being able to merge your contribution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:194,deployability,continu,continue,194,"@ArifAhmed1995 We have a problem with Jenkins (some changes to the firewall made it inacessible from GitHub, so builds won't start). Once that's resolved I will trigger another build and we can continue. Sorry for the annoyance. However, I think we are getting much closer to being able to merge your contribution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:67,security,firewal,firewall,67,"@ArifAhmed1995 We have a problem with Jenkins (some changes to the firewall made it inacessible from GitHub, so builds won't start). Once that's resolved I will trigger another build and we can continue. Sorry for the annoyance. However, I think we are getting much closer to being able to merge your contribution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:266,usability,close,closer,266,"@ArifAhmed1995 We have a problem with Jenkins (some changes to the firewall made it inacessible from GitHub, so builds won't start). Once that's resolved I will trigger another build and we can continue. Sorry for the annoyance. However, I think we are getting much closer to being able to merge your contribution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:61,deployability,build,build,61,We have problems on the `master` branch. I will relaunch the build once that's fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:50,deployability,build,build,50,"@ArifAhmed1995 Should be, yes. I launched another build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:108,safety,review,review,108,@oshadura I ran into some minor issues which unfortunately ended up tagging almost every ROOT developer for review... Is there any way to cancel those extra review requests ? I think the rebasing [worked though](https://github.com/ArifAhmed1995/root/commits/tmath_vectorize),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:157,safety,review,review,157,@oshadura I ran into some minor issues which unfortunately ended up tagging almost every ROOT developer for review... Is there any way to cancel those extra review requests ? I think the rebasing [worked though](https://github.com/ArifAhmed1995/root/commits/tmath_vectorize),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:108,testability,review,review,108,@oshadura I ran into some minor issues which unfortunately ended up tagging almost every ROOT developer for review... Is there any way to cancel those extra review requests ? I think the rebasing [worked though](https://github.com/ArifAhmed1995/root/commits/tmath_vectorize),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:157,testability,review,review,157,@oshadura I ran into some minor issues which unfortunately ended up tagging almost every ROOT developer for review... Is there any way to cancel those extra review requests ? I think the rebasing [worked though](https://github.com/ArifAhmed1995/root/commits/tmath_vectorize),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:138,usability,cancel,cancel,138,@oshadura I ran into some minor issues which unfortunately ended up tagging almost every ROOT developer for review... Is there any way to cancel those extra review requests ? I think the rebasing [worked though](https://github.com/ArifAhmed1995/root/commits/tmath_vectorize),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2236:18,security,modif,modification,18,@amadio Any other modification and/or improvements to be done ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2236
https://github.com/root-project/root/pull/2237:17,energy efficiency,measur,measuring,17,"@bluehood , I am measuring some scaling as well as @amadio : let's see if it has an effect and which one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:32,modifiability,scal,scaling,32,"@bluehood , I am measuring some scaling as well as @amadio : let's see if it has an effect and which one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:47,energy efficiency,profil,profiling,47,"`GetBaseOffset` did pop up in some performamce profiling I did but it was not drastic. If I'm not mistaken it's called by TTree::Fill, so it might help with the scaling of Snapshots from scratch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:161,modifiability,scal,scaling,161,"`GetBaseOffset` did pop up in some performamce profiling I did but it was not drastic. If I'm not mistaken it's called by TTree::Fill, so it might help with the scaling of Snapshots from scratch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:35,performance,perform,performamce,35,"`GetBaseOffset` did pop up in some performamce profiling I did but it was not drastic. If I'm not mistaken it's called by TTree::Fill, so it might help with the scaling of Snapshots from scratch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:47,performance,profil,profiling,47,"`GetBaseOffset` did pop up in some performamce profiling I did but it was not drastic. If I'm not mistaken it's called by TTree::Fill, so it might help with the scaling of Snapshots from scratch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:35,usability,perform,performamce,35,"`GetBaseOffset` did pop up in some performamce profiling I did but it was not drastic. If I'm not mistaken it's called by TTree::Fill, so it might help with the scaling of Snapshots from scratch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:147,usability,help,help,147,"`GetBaseOffset` did pop up in some performamce profiling I did but it was not drastic. If I'm not mistaken it's called by TTree::Fill, so it might help with the scaling of Snapshots from scratch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:491,deployability,patch,patch,491,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:418,energy efficiency,Core,Core,418,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:435,energy efficiency,CPU,CPU,435,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:460,energy efficiency,core,cores,460,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:17,integrability,coupl,couple,17,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:17,modifiability,coupl,couple,17,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:435,performance,CPU,CPU,435,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:517,performance,time,time,517,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:491,safety,patch,patch,491,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:491,security,patch,patch,491,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2237:17,testability,coupl,couple,17,"so, I tried up a couple of things, including this one. ```.cpp. #include <ROOT/RDataFrame.hxx>. int main(). {. ROOT::EnableImplicitMT();. ROOT::RDataFrame d(30000000);. d.Define(""a"", [](){static int i=0; return i++;}). .Define(""b"", [](){static int b=0; return b++;}). .Define(""c"", [](){static int c=0; return c++;}). .Snapshot<int,int,int>(""t"", ""f.root"", {""a"", ""b"", ""c""});. return 0;. }. ```. On my machine, `Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz`, SSD, 4x2 cores, what I see *before* the patch is *6.3+-.2 s* real time. *After* I see *5.5+-.2 s*.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2237
https://github.com/root-project/root/pull/2243:11,deployability,build,build,11,"@phsft-bot build just on mac1013/native, centos7/gcc7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2243
https://github.com/root-project/root/pull/2246:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2246:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2246:0,availability,Error,Errors,0,"Errors are not caused by this pull request, so running the build again just to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2246:59,deployability,build,build,59,"Errors are not caused by this pull request, so running the build again just to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2246:0,performance,Error,Errors,0,"Errors are not caused by this pull request, so running the build again just to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2246:0,safety,Error,Errors,0,"Errors are not caused by this pull request, so running the build again just to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2246:79,safety,test,test,79,"Errors are not caused by this pull request, so running the build again just to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2246:79,testability,test,test,79,"Errors are not caused by this pull request, so running the build again just to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2246:0,usability,Error,Errors,0,"Errors are not caused by this pull request, so running the build again just to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2246:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2246
https://github.com/root-project/root/pull/2247:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2247
https://github.com/root-project/root/pull/2248:98,energy efficiency,current,current,98,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:429,performance,lock,lock,429,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:497,performance,lock,lock,497,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:534,performance,lock,lock,534,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:627,performance,perform,performance,627,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:770,performance,lock,locking,770,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:429,security,lock,lock,429,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:497,security,lock,lock,497,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:534,security,lock,lock,534,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:770,security,lock,locking,770,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:234,usability,user,user-images,234,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2248:627,usability,perform,performance,627,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:. ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png). There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2248
https://github.com/root-project/root/pull/2252:19,usability,close,close,19,@dpiparo Should we close this one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:27,energy efficiency,measur,measured,27,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:70,performance,perform,performance,70,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:169,performance,lock,lock,169,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:213,performance,lock,lock,213,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:246,performance,lock,lock,246,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:310,performance,lock,locks,310,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:5,safety,reme,remember,5,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:169,security,lock,lock,169,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:213,security,lock,lock,213,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:246,security,lock,lock,246,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:310,security,lock,locks,310,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:70,usability,perform,performance,70,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:81,energy efficiency,current,current,81,"> within the scope where we take the write lock here,. Was the PR de-scoped? The current diff only should one change and the scope only calls 'At' in a collection (which should be safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:43,performance,lock,lock,43,"> within the scope where we take the write lock here,. Was the PR de-scoped? The current diff only should one change and the scope only calls 'At' in a collection (which should be safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:180,safety,safe,safe,180,"> within the scope where we take the write lock here,. Was the PR de-scoped? The current diff only should one change and the scope only calls 'At' in a collection (which should be safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:43,security,lock,lock,43,"> within the scope where we take the write lock here,. Was the PR de-scoped? The current diff only should one change and the scope only calls 'At' in a collection (which should be safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:124,energy efficiency,measur,measure,124,"@pcanal, ah, I see. I think I was looking at the wrong diff before commenting here. This is probably fine, actually. I will measure tomorrow and merge if that's the case. I think the PR with the problematic change was already closed then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:226,usability,close,closed,226,"@pcanal, ah, I see. I think I was looking at the wrong diff before commenting here. This is probably fine, actually. I will measure tomorrow and merge if that's the case. I think the PR with the problematic change was already closed then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:68,safety,test,tests,68,@dpiparo Please merge if you still think this should go in. Jenkins tests passed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2252:68,testability,test,tests,68,@dpiparo Please merge if you still think this should go in. Jenkins tests passed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2252
https://github.com/root-project/root/pull/2255:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2255
https://github.com/root-project/root/pull/2256:0,availability,Failur,Failures,0,Failures seem to be infrastructure / confused Jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2256
https://github.com/root-project/root/pull/2256:0,deployability,Fail,Failures,0,Failures seem to be infrastructure / confused Jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2256
https://github.com/root-project/root/pull/2256:20,deployability,infrastructur,infrastructure,20,Failures seem to be infrastructure / confused Jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2256
https://github.com/root-project/root/pull/2256:0,performance,Failur,Failures,0,Failures seem to be infrastructure / confused Jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2256
https://github.com/root-project/root/pull/2256:0,reliability,Fail,Failures,0,Failures seem to be infrastructure / confused Jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2256
https://github.com/root-project/root/pull/2259:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:25,deployability,build,build,25,Of all architectures the build fails only on 32bit and only inside jitted code. This might be related to [ROOT-9236](https://sft.its.cern.ch/jira/browse/ROOT-9236) -- to be investigated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:31,deployability,fail,fails,31,Of all architectures the build fails only on 32bit and only inside jitted code. This might be related to [ROOT-9236](https://sft.its.cern.ch/jira/browse/ROOT-9236) -- to be investigated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:7,interoperability,architectur,architectures,7,Of all architectures the build fails only on 32bit and only inside jitted code. This might be related to [ROOT-9236](https://sft.its.cern.ch/jira/browse/ROOT-9236) -- to be investigated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:31,reliability,fail,fails,31,Of all architectures the build fails only on 32bit and only inside jitted code. This might be related to [ROOT-9236](https://sft.its.cern.ch/jira/browse/ROOT-9236) -- to be investigated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:372,deployability,patch,patch,372,"The many unrelated formatting changes make it harder to review this PR. @dpiparo @imaxoi could we maybe commit a `clang-format` pass to master first, and then rebase this PR on it, so that all those formatting changes go away? This would make master and v6.14 diverge a bit though :/. EDIT: note that some of these formatting changes we probably do not want, such as . ```patch. - void Initialize() { /* noop */}. + void Initialize(). + { /* noop */. + }. . - void Finalize() { /* noop */}. + void Finalize(). + { /* noop */. + }. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:19,interoperability,format,formatting,19,"The many unrelated formatting changes make it harder to review this PR. @dpiparo @imaxoi could we maybe commit a `clang-format` pass to master first, and then rebase this PR on it, so that all those formatting changes go away? This would make master and v6.14 diverge a bit though :/. EDIT: note that some of these formatting changes we probably do not want, such as . ```patch. - void Initialize() { /* noop */}. + void Initialize(). + { /* noop */. + }. . - void Finalize() { /* noop */}. + void Finalize(). + { /* noop */. + }. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:120,interoperability,format,format,120,"The many unrelated formatting changes make it harder to review this PR. @dpiparo @imaxoi could we maybe commit a `clang-format` pass to master first, and then rebase this PR on it, so that all those formatting changes go away? This would make master and v6.14 diverge a bit though :/. EDIT: note that some of these formatting changes we probably do not want, such as . ```patch. - void Initialize() { /* noop */}. + void Initialize(). + { /* noop */. + }. . - void Finalize() { /* noop */}. + void Finalize(). + { /* noop */. + }. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:199,interoperability,format,formatting,199,"The many unrelated formatting changes make it harder to review this PR. @dpiparo @imaxoi could we maybe commit a `clang-format` pass to master first, and then rebase this PR on it, so that all those formatting changes go away? This would make master and v6.14 diverge a bit though :/. EDIT: note that some of these formatting changes we probably do not want, such as . ```patch. - void Initialize() { /* noop */}. + void Initialize(). + { /* noop */. + }. . - void Finalize() { /* noop */}. + void Finalize(). + { /* noop */. + }. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:315,interoperability,format,formatting,315,"The many unrelated formatting changes make it harder to review this PR. @dpiparo @imaxoi could we maybe commit a `clang-format` pass to master first, and then rebase this PR on it, so that all those formatting changes go away? This would make master and v6.14 diverge a bit though :/. EDIT: note that some of these formatting changes we probably do not want, such as . ```patch. - void Initialize() { /* noop */}. + void Initialize(). + { /* noop */. + }. . - void Finalize() { /* noop */}. + void Finalize(). + { /* noop */. + }. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:56,safety,review,review,56,"The many unrelated formatting changes make it harder to review this PR. @dpiparo @imaxoi could we maybe commit a `clang-format` pass to master first, and then rebase this PR on it, so that all those formatting changes go away? This would make master and v6.14 diverge a bit though :/. EDIT: note that some of these formatting changes we probably do not want, such as . ```patch. - void Initialize() { /* noop */}. + void Initialize(). + { /* noop */. + }. . - void Finalize() { /* noop */}. + void Finalize(). + { /* noop */. + }. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:372,safety,patch,patch,372,"The many unrelated formatting changes make it harder to review this PR. @dpiparo @imaxoi could we maybe commit a `clang-format` pass to master first, and then rebase this PR on it, so that all those formatting changes go away? This would make master and v6.14 diverge a bit though :/. EDIT: note that some of these formatting changes we probably do not want, such as . ```patch. - void Initialize() { /* noop */}. + void Initialize(). + { /* noop */. + }. . - void Finalize() { /* noop */}. + void Finalize(). + { /* noop */. + }. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:372,security,patch,patch,372,"The many unrelated formatting changes make it harder to review this PR. @dpiparo @imaxoi could we maybe commit a `clang-format` pass to master first, and then rebase this PR on it, so that all those formatting changes go away? This would make master and v6.14 diverge a bit though :/. EDIT: note that some of these formatting changes we probably do not want, such as . ```patch. - void Initialize() { /* noop */}. + void Initialize(). + { /* noop */. + }. . - void Finalize() { /* noop */}. + void Finalize(). + { /* noop */. + }. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:56,testability,review,review,56,"The many unrelated formatting changes make it harder to review this PR. @dpiparo @imaxoi could we maybe commit a `clang-format` pass to master first, and then rebase this PR on it, so that all those formatting changes go away? This would make master and v6.14 diverge a bit though :/. EDIT: note that some of these formatting changes we probably do not want, such as . ```patch. - void Initialize() { /* noop */}. + void Initialize(). + { /* noop */. + }. . - void Finalize() { /* noop */}. + void Finalize(). + { /* noop */. + }. };. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:2,energy efficiency,reduc,reduced,2,I reduced the noise. Now the PR is only on the files modified to implement the feature.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:53,security,modif,modified,53,I reduced the noise. Now the PR is only on the files modified to implement the feature.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:41,availability,error,errors,41,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:424,availability,error,error,424,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:16,deployability,fail,fails,16,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:76,deployability,log,logs,76,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:103,deployability,build,build,103,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:137,deployability,build,build,137,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:143,deployability,build,build,143,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:206,deployability,build,build,206,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:240,deployability,build,build,240,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:246,deployability,build,build,246,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:337,deployability,build,build,337,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:371,deployability,build,build,371,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:377,deployability,build,build,377,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:485,deployability,build,build,485,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:519,deployability,build,build,519,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:525,deployability,build,build,525,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:444,energy efficiency,alloc,allocate,444,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:41,performance,error,errors,41,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:424,performance,error,error,424,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:16,reliability,fail,fails,16,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:612,reliability,doe,does,612,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:41,safety,error,errors,41,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:76,safety,log,logs,76,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:267,safety,test,test,267,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:424,safety,error,error,424,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:546,safety,test,test,546,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:57,security,access,access,57,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:76,security,log,logs,76,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:76,testability,log,logs,76,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:267,testability,test,test,267,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:546,testability,test,test,546,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:41,usability,error,errors,41,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:424,usability,error,error,424,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):. ```. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->. 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->. 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]. ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:6,safety,test,tests,6,Added tests for this feature in commit bb3a1273054d14e46451c1f8592b9063d12372fc,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:6,testability,test,tests,6,Added tests for this feature in commit bb3a1273054d14e46451c1f8592b9063d12372fc,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:10,interoperability,Format,Formatting,10,@bluehood Formatting commits moved to their own commit. 179115ed1435940235ef92c34b8ec8847be4a9da. I think with this every comment has been addressed!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:121,availability,error,error,121,"I think what's left is just to squash all later fixes (except maybe 4c0fb33) into 8f6e55d. EDIT: and fix the compilation error due to `string_view`, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:121,performance,error,error,121,"I think what's left is just to squash all later fixes (except maybe 4c0fb33) into 8f6e55d. EDIT: and fix the compilation error due to `string_view`, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:55,safety,except,except,55,"I think what's left is just to squash all later fixes (except maybe 4c0fb33) into 8f6e55d. EDIT: and fix the compilation error due to `string_view`, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:121,safety,error,error,121,"I think what's left is just to squash all later fixes (except maybe 4c0fb33) into 8f6e55d. EDIT: and fix the compilation error due to `string_view`, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:121,usability,error,error,121,"I think what's left is just to squash all later fixes (except maybe 4c0fb33) into 8f6e55d. EDIT: and fix the compilation error due to `string_view`, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:60,interoperability,architectur,architecture,60,"@bluehood Looks like everything is fixed, except the 32 bit architecture.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:42,safety,except,except,42,"@bluehood Looks like everything is fixed, except the 32 bit architecture.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:317,availability,failur,failures,317,"@imaxoi the last three commits in the PR make many important changes to the initial implementation, and also improve readability and fix some bugs. So I think it does not make a lot of sense to have the initial implementation as a separate commit -- I would squash the last four commits together. Regarding the 32bit failures, at least for now you can ignore them and consider this PR complete, I'll take a look as soon as I can. Please resolve the warnings at RDFInterfaceUtils.hxx:301 though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:317,deployability,fail,failures,317,"@imaxoi the last three commits in the PR make many important changes to the initial implementation, and also improve readability and fix some bugs. So I think it does not make a lot of sense to have the initial implementation as a separate commit -- I would squash the last four commits together. Regarding the 32bit failures, at least for now you can ignore them and consider this PR complete, I'll take a look as soon as I can. Please resolve the warnings at RDFInterfaceUtils.hxx:301 though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:317,performance,failur,failures,317,"@imaxoi the last three commits in the PR make many important changes to the initial implementation, and also improve readability and fix some bugs. So I think it does not make a lot of sense to have the initial implementation as a separate commit -- I would squash the last four commits together. Regarding the 32bit failures, at least for now you can ignore them and consider this PR complete, I'll take a look as soon as I can. Please resolve the warnings at RDFInterfaceUtils.hxx:301 though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:162,reliability,doe,does,162,"@imaxoi the last three commits in the PR make many important changes to the initial implementation, and also improve readability and fix some bugs. So I think it does not make a lot of sense to have the initial implementation as a separate commit -- I would squash the last four commits together. Regarding the 32bit failures, at least for now you can ignore them and consider this PR complete, I'll take a look as soon as I can. Please resolve the warnings at RDFInterfaceUtils.hxx:301 though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:317,reliability,fail,failures,317,"@imaxoi the last three commits in the PR make many important changes to the initial implementation, and also improve readability and fix some bugs. So I think it does not make a lot of sense to have the initial implementation as a separate commit -- I would squash the last four commits together. Regarding the 32bit failures, at least for now you can ignore them and consider this PR complete, I'll take a look as soon as I can. Please resolve the warnings at RDFInterfaceUtils.hxx:301 though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:385,safety,compl,complete,385,"@imaxoi the last three commits in the PR make many important changes to the initial implementation, and also improve readability and fix some bugs. So I think it does not make a lot of sense to have the initial implementation as a separate commit -- I would squash the last four commits together. Regarding the 32bit failures, at least for now you can ignore them and consider this PR complete, I'll take a look as soon as I can. Please resolve the warnings at RDFInterfaceUtils.hxx:301 though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2259:385,security,compl,complete,385,"@imaxoi the last three commits in the PR make many important changes to the initial implementation, and also improve readability and fix some bugs. So I think it does not make a lot of sense to have the initial implementation as a separate commit -- I would squash the last four commits together. Regarding the 32bit failures, at least for now you can ignore them and consider this PR complete, I'll take a look as soon as I can. Please resolve the warnings at RDFInterfaceUtils.hxx:301 though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2259
https://github.com/root-project/root/pull/2260:4,availability,failur,failure,4,The failure in execStatusBitsCheck is expected (need reference file upgrade).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2260
https://github.com/root-project/root/pull/2260:4,deployability,fail,failure,4,The failure in execStatusBitsCheck is expected (need reference file upgrade).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2260
https://github.com/root-project/root/pull/2260:68,deployability,upgrad,upgrade,68,The failure in execStatusBitsCheck is expected (need reference file upgrade).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2260
https://github.com/root-project/root/pull/2260:68,modifiability,upgrad,upgrade,68,The failure in execStatusBitsCheck is expected (need reference file upgrade).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2260
https://github.com/root-project/root/pull/2260:4,performance,failur,failure,4,The failure in execStatusBitsCheck is expected (need reference file upgrade).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2260
https://github.com/root-project/root/pull/2260:4,reliability,fail,failure,4,The failure in execStatusBitsCheck is expected (need reference file upgrade).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2260
https://github.com/root-project/root/pull/2263:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2263
https://github.com/root-project/root/pull/2264:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2264
https://github.com/root-project/root/pull/2265:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2265
https://github.com/root-project/root/pull/2266:109,availability,state,statement,109,"I can confirm that `TObject` and `TNamed` does not enter any pythonizor function (checked by putting a print statement into a pythonization function, which are activated by the C++ class name).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:109,integrability,state,statement,109,"I can confirm that `TObject` and `TNamed` does not enter any pythonizor function (checked by putting a print statement into a pythonization function, which are activated by the C++ class name).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:42,reliability,doe,does,42,"I can confirm that `TObject` and `TNamed` does not enter any pythonizor function (checked by putting a print statement into a pythonization function, which are activated by the C++ class name).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:6,usability,confirm,confirm,6,"I can confirm that `TObject` and `TNamed` does not enter any pythonizor function (checked by putting a print statement into a pythonization function, which are activated by the C++ class name).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:8,reliability,pra,practical,8,"For all practical use-cases it should be fine. However, the missing `TObject`, `TNamed`, ... (?) pythonizations should be mention somewhere so that we do not forget about it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:71,deployability,pipelin,pipeline,71,"@wlav confirmed that those classes do not go through the pythonization pipeline because `TInterpreter` and its base classes are touched early, before the pythonizations are installed. @stwunsch is there anything else you would like to add/modify in this PR? Perhaps adding a comment about the aforementioned fact?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:173,deployability,instal,installed,173,"@wlav confirmed that those classes do not go through the pythonization pipeline because `TInterpreter` and its base classes are touched early, before the pythonizations are installed. @stwunsch is there anything else you would like to add/modify in this PR? Perhaps adding a comment about the aforementioned fact?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:71,integrability,pipelin,pipeline,71,"@wlav confirmed that those classes do not go through the pythonization pipeline because `TInterpreter` and its base classes are touched early, before the pythonizations are installed. @stwunsch is there anything else you would like to add/modify in this PR? Perhaps adding a comment about the aforementioned fact?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:239,security,modif,modify,239,"@wlav confirmed that those classes do not go through the pythonization pipeline because `TInterpreter` and its base classes are touched early, before the pythonizations are installed. @stwunsch is there anything else you would like to add/modify in this PR? Perhaps adding a comment about the aforementioned fact?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:6,usability,confirm,confirmed,6,"@wlav confirmed that those classes do not go through the pythonization pipeline because `TInterpreter` and its base classes are touched early, before the pythonizations are installed. @stwunsch is there anything else you would like to add/modify in this PR? Perhaps adding a comment about the aforementioned fact?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:101,deployability,build,build,101,@etejedor added comments about the pythonization of `TNamed` and `TObject` to the test. i'll do a PR build to check the code again and merge afterwards.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:82,safety,test,test,82,@etejedor added comments about the pythonization of `TNamed` and `TObject` to the test. i'll do a PR build to check the code again and merge afterwards.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:82,testability,test,test,82,@etejedor added comments about the pythonization of `TNamed` and `TObject` to the test. i'll do a PR build to check the code again and merge afterwards.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:296,availability,down,down,296,"In PyROOT-land, the EnableAutoloading also lives in cppyy.py. I'm pretty sure though that you can defer it to e.g. a call inside the constructor of TPyROOTApplication. You can test that and if it works okay, remove the call in experimental, see whether that solves the issue. I can move the call down to the backend as well (only reason not to do so is that current cppyy works with ancient PyPy and such a move would break that).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:358,energy efficiency,current,current,358,"In PyROOT-land, the EnableAutoloading also lives in cppyy.py. I'm pretty sure though that you can defer it to e.g. a call inside the constructor of TPyROOTApplication. You can test that and if it works okay, remove the call in experimental, see whether that solves the issue. I can move the call down to the backend as well (only reason not to do so is that current cppyy works with ancient PyPy and such a move would break that).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:176,safety,test,test,176,"In PyROOT-land, the EnableAutoloading also lives in cppyy.py. I'm pretty sure though that you can defer it to e.g. a call inside the constructor of TPyROOTApplication. You can test that and if it works okay, remove the call in experimental, see whether that solves the issue. I can move the call down to the backend as well (only reason not to do so is that current cppyy works with ancient PyPy and such a move would break that).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:176,testability,test,test,176,"In PyROOT-land, the EnableAutoloading also lives in cppyy.py. I'm pretty sure though that you can defer it to e.g. a call inside the constructor of TPyROOTApplication. You can test that and if it works okay, remove the call in experimental, see whether that solves the issue. I can move the call down to the backend as well (only reason not to do so is that current cppyy works with ancient PyPy and such a move would break that).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:246,energy efficiency,current,current,246,"Commenting out the call to `gbl.gInterpreter.EnableAutoLoading` in the cppyy of experimental does not seem to have any effect - e.g. `TNamed` and `TObject` are still not pythonized. Perhaps there is something else that touches them early? In the current PyROOT there a few pythonizations for `TObject`, we can have a closer look to this issue when we move them to experimental.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:93,reliability,doe,does,93,"Commenting out the call to `gbl.gInterpreter.EnableAutoLoading` in the cppyy of experimental does not seem to have any effect - e.g. `TNamed` and `TObject` are still not pythonized. Perhaps there is something else that touches them early? In the current PyROOT there a few pythonizations for `TObject`, we can have a closer look to this issue when we move them to experimental.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:317,usability,close,closer,317,"Commenting out the call to `gbl.gInterpreter.EnableAutoLoading` in the cppyy of experimental does not seem to have any effect - e.g. `TNamed` and `TObject` are still not pythonized. Perhaps there is something else that touches them early? In the current PyROOT there a few pythonizations for `TObject`, we can have a closer look to this issue when we move them to experimental.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:200,interoperability,Bind,Bind,200,"That's in ROOT, not cppyy. I had a quick look around and noticed for example:. ```. void PyROOT::Init(). {. // Initialize and acquire the GIL to allow for threading in ROOT. PyEval_InitThreads();. // Bind ROOT globals that will be needed in ROOT.py. AddToGlobalScope(""gROOT"", ""TROOT.h"", gROOT, Cppyy::GetScope(gROOT->IsA()->GetName()));. AddToGlobalScope(""gSystem"", ""TSystem.h"", gSystem, Cppyy::GetScope(gSystem->IsA()->GetName()));. AddToGlobalScope(""gInterpreter"", ""TInterpreter.h"", gInterpreter, Cppyy::GetScope(gInterpreter->IsA()->GetName()));. }. ```. (which, aside, should not be necessary at all anymore). Note that these base classes that will pop up everywhere do not need to be pythonized with a callback. You can just fix them up after their binding, but before returning from ""import ROOT"". The point of callbacks is purely to allow everything to remain as lazy as possible, which doesn't apply to TObject.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:754,interoperability,bind,binding,754,"That's in ROOT, not cppyy. I had a quick look around and noticed for example:. ```. void PyROOT::Init(). {. // Initialize and acquire the GIL to allow for threading in ROOT. PyEval_InitThreads();. // Bind ROOT globals that will be needed in ROOT.py. AddToGlobalScope(""gROOT"", ""TROOT.h"", gROOT, Cppyy::GetScope(gROOT->IsA()->GetName()));. AddToGlobalScope(""gSystem"", ""TSystem.h"", gSystem, Cppyy::GetScope(gSystem->IsA()->GetName()));. AddToGlobalScope(""gInterpreter"", ""TInterpreter.h"", gInterpreter, Cppyy::GetScope(gInterpreter->IsA()->GetName()));. }. ```. (which, aside, should not be necessary at all anymore). Note that these base classes that will pop up everywhere do not need to be pythonized with a callback. You can just fix them up after their binding, but before returning from ""import ROOT"". The point of callbacks is purely to allow everything to remain as lazy as possible, which doesn't apply to TObject.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:200,modifiability,Bind,Bind,200,"That's in ROOT, not cppyy. I had a quick look around and noticed for example:. ```. void PyROOT::Init(). {. // Initialize and acquire the GIL to allow for threading in ROOT. PyEval_InitThreads();. // Bind ROOT globals that will be needed in ROOT.py. AddToGlobalScope(""gROOT"", ""TROOT.h"", gROOT, Cppyy::GetScope(gROOT->IsA()->GetName()));. AddToGlobalScope(""gSystem"", ""TSystem.h"", gSystem, Cppyy::GetScope(gSystem->IsA()->GetName()));. AddToGlobalScope(""gInterpreter"", ""TInterpreter.h"", gInterpreter, Cppyy::GetScope(gInterpreter->IsA()->GetName()));. }. ```. (which, aside, should not be necessary at all anymore). Note that these base classes that will pop up everywhere do not need to be pythonized with a callback. You can just fix them up after their binding, but before returning from ""import ROOT"". The point of callbacks is purely to allow everything to remain as lazy as possible, which doesn't apply to TObject.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:754,modifiability,bind,binding,754,"That's in ROOT, not cppyy. I had a quick look around and noticed for example:. ```. void PyROOT::Init(). {. // Initialize and acquire the GIL to allow for threading in ROOT. PyEval_InitThreads();. // Bind ROOT globals that will be needed in ROOT.py. AddToGlobalScope(""gROOT"", ""TROOT.h"", gROOT, Cppyy::GetScope(gROOT->IsA()->GetName()));. AddToGlobalScope(""gSystem"", ""TSystem.h"", gSystem, Cppyy::GetScope(gSystem->IsA()->GetName()));. AddToGlobalScope(""gInterpreter"", ""TInterpreter.h"", gInterpreter, Cppyy::GetScope(gInterpreter->IsA()->GetName()));. }. ```. (which, aside, should not be necessary at all anymore). Note that these base classes that will pop up everywhere do not need to be pythonized with a callback. You can just fix them up after their binding, but before returning from ""import ROOT"". The point of callbacks is purely to allow everything to remain as lazy as possible, which doesn't apply to TObject.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:894,reliability,doe,doesn,894,"That's in ROOT, not cppyy. I had a quick look around and noticed for example:. ```. void PyROOT::Init(). {. // Initialize and acquire the GIL to allow for threading in ROOT. PyEval_InitThreads();. // Bind ROOT globals that will be needed in ROOT.py. AddToGlobalScope(""gROOT"", ""TROOT.h"", gROOT, Cppyy::GetScope(gROOT->IsA()->GetName()));. AddToGlobalScope(""gSystem"", ""TSystem.h"", gSystem, Cppyy::GetScope(gSystem->IsA()->GetName()));. AddToGlobalScope(""gInterpreter"", ""TInterpreter.h"", gInterpreter, Cppyy::GetScope(gInterpreter->IsA()->GetName()));. }. ```. (which, aside, should not be necessary at all anymore). Note that these base classes that will pop up everywhere do not need to be pythonized with a callback. You can just fix them up after their binding, but before returning from ""import ROOT"". The point of callbacks is purely to allow everything to remain as lazy as possible, which doesn't apply to TObject.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:86,energy efficiency,current,current,86,"As for the `AddToGlobalScope` calls, I kept them for now until I know how much of the current content of `ROOT.py` we need to keep (the globals are used from there a few times).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:94,performance,content,content,94,"As for the `AddToGlobalScope` calls, I kept them for now until I know how much of the current content of `ROOT.py` we need to keep (the globals are used from there a few times).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2266:170,performance,time,times,170,"As for the `AddToGlobalScope` calls, I kept them for now until I know how much of the current content of `ROOT.py` we need to keep (the globals are used from there a few times).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2266
https://github.com/root-project/root/pull/2269:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2269
https://github.com/root-project/root/pull/2269:43,safety,test,tests,43,@bluehood Renamed to StdDev and added more tests for corner cases,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2269
https://github.com/root-project/root/pull/2269:43,testability,test,tests,43,@bluehood Renamed to StdDev and added more tests for corner cases,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2269
https://github.com/root-project/root/pull/2269:24,usability,help,helper,24,"@imaxoi, can the action helper deal with columns holding collections, i.e. iterating over all elements? We do this for example for histogramming, it's just a matter of using a sfinae.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2269
https://github.com/root-project/root/pull/2269:15,safety,test,test,15,@dpiparo Added test in f8fccd52ffcfc059aa5a664404e04c77d15abc99,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2269
https://github.com/root-project/root/pull/2269:15,testability,test,test,15,@dpiparo Added test in f8fccd52ffcfc059aa5a664404e04c77d15abc99,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2269
https://github.com/root-project/root/pull/2269:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2269
https://github.com/root-project/root/pull/2272:53,deployability,patch,patch,53,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:71,deployability,patch,patches,71,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:141,deployability,patch,patch,141,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:154,deployability,fail,fails,154,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:154,reliability,fail,fails,154,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:53,safety,patch,patch,53,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:71,safety,patch,patches,71,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:141,safety,patch,patch,141,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:53,security,patch,patch,53,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:71,security,patch,patches,71,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2272:141,security,patch,patch,141,"Hi, @dpiparo . Would it be possible to backport this patch to v6-14-00-patches ? @dberzano is going to switch Alice O2 to v6/14 and w/o this patch our CI fails... Cheers,. Ruben",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2272
https://github.com/root-project/root/pull/2276:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2276
https://github.com/root-project/root/pull/2276:116,integrability,messag,message,116,"Hi @ellert , LGTM, could you add the description of the changes you did (copy-paste from the PR description) to the message of the commit so that we do not forget what this was about? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2276
https://github.com/root-project/root/pull/2276:116,interoperability,messag,message,116,"Hi @ellert , LGTM, could you add the description of the changes you did (copy-paste from the PR description) to the message of the commit so that we do not forget what this was about? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2276
https://github.com/root-project/root/pull/2276:7,integrability,messag,message,7,Commit message amended.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2276
https://github.com/root-project/root/pull/2276:7,interoperability,messag,message,7,Commit message amended.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2276
https://github.com/root-project/root/pull/2278:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2278
https://github.com/root-project/root/pull/2278:32,interoperability,conflict,conflict,32,"Hi Siddharta, . Can you fix the conflict, so we can merge this PR ? . Thank you . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2278
https://github.com/root-project/root/pull/2278:86,interoperability,conflict,conflicts,86,"@lmoneta sorry for the delay. I thought I resolved these already. Anyway, I fixed the conflicts. Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2278
https://github.com/root-project/root/pull/2278:22,deployability,updat,updated,22,@amadio I rebased and updated the PR. Sorry for the trouble,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2278
https://github.com/root-project/root/pull/2278:22,safety,updat,updated,22,@amadio I rebased and updated the PR. Sorry for the trouble,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2278
https://github.com/root-project/root/pull/2278:22,security,updat,updated,22,@amadio I rebased and updated the PR. Sorry for the trouble,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2278
https://github.com/root-project/root/pull/2278:40,interoperability,conflict,conflicts,40,"Hi Sidharta, . Can you please fix these conflicts, it should be easy. . In MethodDL.h you should use MatrixImpl_t instead of Matrix_t as I suggested in the previous comment. Once this is done I can merge it . Thank you . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2278
https://github.com/root-project/root/pull/2278:11,usability,close,close,11,"I will now close this PR, which has been replaced by #2901",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2278
https://github.com/root-project/root/pull/2280:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:71,safety,avoid,avoid,71,@Axel-Naumann . I adjust the code - now it is reference and I even can avoid use of dummy there. I still cannot run roottest standalone.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:111,integrability,configur,configure,111,@amadio could maybe look at the standalone roottest issue - is that known? We check out roottest into src/ and configure ROOT with `-Dtesting=On -Droottest=On` and it picks up roottest and enabled `ctest`. But Jenkins ran roottest for us and is happy :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:111,modifiability,configur,configure,111,@amadio could maybe look at the standalone roottest issue - is that known? We check out roottest into src/ and configure ROOT with `-Dtesting=On -Droottest=On` and it picks up roottest and enabled `ctest`. But Jenkins ran roottest for us and is happy :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:111,security,configur,configure,111,@amadio could maybe look at the standalone roottest issue - is that known? We check out roottest into src/ and configure ROOT with `-Dtesting=On -Droottest=On` and it picks up roottest and enabled `ctest`. But Jenkins ran roottest for us and is happy :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:62,availability,avail,available,62,@pcanal please consider for post-merge review whenever you're available.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:62,reliability,availab,available,62,@pcanal please consider for post-merge review whenever you're available.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:39,safety,review,review,39,@pcanal please consider for post-merge review whenever you're available.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:62,safety,avail,available,62,@pcanal please consider for post-merge review whenever you're available.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:62,security,availab,available,62,@pcanal please consider for post-merge review whenever you're available.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:39,testability,review,review,39,@pcanal please consider for post-merge review whenever you're available.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:21,deployability,patch,patch,21,"@Axel-Naumann . This patch should be applied to all relevant branches - 6-14, 6-12, maybe 6-10. It fixes real problem for all components, where TXMLEngine is used - like GDML import, TMVA gui and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:126,integrability,compon,components,126,"@Axel-Naumann . This patch should be applied to all relevant branches - 6-14, 6-12, maybe 6-10. It fixes real problem for all components, where TXMLEngine is used - like GDML import, TMVA gui and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:126,interoperability,compon,components,126,"@Axel-Naumann . This patch should be applied to all relevant branches - 6-14, 6-12, maybe 6-10. It fixes real problem for all components, where TXMLEngine is used - like GDML import, TMVA gui and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:126,modifiability,compon,components,126,"@Axel-Naumann . This patch should be applied to all relevant branches - 6-14, 6-12, maybe 6-10. It fixes real problem for all components, where TXMLEngine is used - like GDML import, TMVA gui and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:21,safety,patch,patch,21,"@Axel-Naumann . This patch should be applied to all relevant branches - 6-14, 6-12, maybe 6-10. It fixes real problem for all components, where TXMLEngine is used - like GDML import, TMVA gui and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:21,security,patch,patch,21,"@Axel-Naumann . This patch should be applied to all relevant branches - 6-14, 6-12, maybe 6-10. It fixes real problem for all components, where TXMLEngine is used - like GDML import, TMVA gui and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1027,availability,Error,Error,1027,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1255,availability,error,errors,1255,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:887,deployability,version,version,887,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:961,deployability,version,version,961,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1042,deployability,modul,modules,1042,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1146,deployability,Stack,Stack,1146,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1285,deployability,build,build,1285,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1323,deployability,log,log,1323,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:887,integrability,version,version,887,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:961,integrability,version,version,961,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:993,integrability,sub,subdirectories,993,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1231,integrability,Configur,Configuring,1231,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:824,interoperability,architectur,architecture,824,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:887,modifiability,version,version,887,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:961,modifiability,version,version,961,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1042,modifiability,modul,modules,1042,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1231,modifiability,Configur,Configuring,1231,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1027,performance,Error,Error,1027,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1255,performance,error,errors,1255,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:381,safety,Detect,Detecting,381,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:415,safety,Detect,Detecting,415,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:456,safety,Detect,Detecting,456,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:489,safety,Detect,Detecting,489,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:636,safety,Detect,Detecting,636,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:672,safety,Detect,Detecting,672,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:715,safety,Detect,Detecting,715,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:750,safety,Detect,Detecting,750,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1012,safety,test,tests,1012,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1027,safety,Error,Error,1027,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1042,safety,modul,modules,1042,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1255,safety,error,errors,1255,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1323,safety,log,log,1323,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:199,security,ident,identification,199,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:248,security,ident,identification,248,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:381,security,Detect,Detecting,381,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:415,security,Detect,Detecting,415,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:456,security,Detect,Detecting,456,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:489,security,Detect,Detecting,489,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:636,security,Detect,Detecting,636,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:672,security,Detect,Detecting,672,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:715,security,Detect,Detecting,715,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:750,security,Detect,Detecting,750,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1231,security,Configur,Configuring,1231,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1323,security,log,log,1323,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1012,testability,test,tests,1012,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1323,testability,log,log,1323,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1027,usability,Error,Error,1027,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1112,usability,command,command,1112,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2280:1255,usability,error,errors,1255,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. . Here is output of cmake. ````. [shell] cmake /d/roottest (05.07. 12:23:42) !396 . -- The C compiler identification is GNU 8.1.1. -- The CXX compiler identification is GNU 8.1.1. -- Check for working C compiler: /usr/bin/cc. -- Check for working C compiler: /usr/bin/cc -- works. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Detecting C compile features. -- Detecting C compile features - done. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Check for bitness: Found 64 bit architecture. -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") . -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") . -- Scanning subdirectories for tests... CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):. Unknown CMake command ""ROOT_SHOW_OPTIONS"". Call Stack (most recent call first):. root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred! See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2280
https://github.com/root-project/root/pull/2281:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2281:30,safety,test,tests,30,@pcanal could you restart the tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2281:30,testability,test,tests,30,@pcanal could you restart the tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2281:9,availability,failur,failure,9,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2281:9,deployability,fail,failure,9,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2281:20,deployability,infrastructur,infrastructure,20,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2281:9,performance,failur,failure,9,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2281:51,performance,time,timeout,51,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2281:9,reliability,fail,failure,9,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2281:51,safety,timeout,timeout,51,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2281
https://github.com/root-project/root/pull/2282:72,interoperability,conflict,conflicts,72,"To be merged after #2259 , so @imaxoi does not have to resolve any more conflicts",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2282
https://github.com/root-project/root/pull/2282:38,reliability,doe,does,38,"To be merged after #2259 , so @imaxoi does not have to resolve any more conflicts",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2282
https://github.com/root-project/root/pull/2290:12,availability,failur,failure,12,The windows failure is infrastructure related (failed git checkout).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2290
https://github.com/root-project/root/pull/2290:12,deployability,fail,failure,12,The windows failure is infrastructure related (failed git checkout).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2290
https://github.com/root-project/root/pull/2290:23,deployability,infrastructur,infrastructure,23,The windows failure is infrastructure related (failed git checkout).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2290
https://github.com/root-project/root/pull/2290:47,deployability,fail,failed,47,The windows failure is infrastructure related (failed git checkout).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2290
https://github.com/root-project/root/pull/2290:12,performance,failur,failure,12,The windows failure is infrastructure related (failed git checkout).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2290
https://github.com/root-project/root/pull/2290:12,reliability,fail,failure,12,The windows failure is infrastructure related (failed git checkout).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2290
https://github.com/root-project/root/pull/2290:47,reliability,fail,failed,47,The windows failure is infrastructure related (failed git checkout).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2290
https://github.com/root-project/root/pull/2291:65,deployability,build,build,65,"Hi @whit2333 , thank you for spotting _and_ fixing these! Let me build the docs locally to double-check the formatting is right this time :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:108,interoperability,format,formatting,108,"Hi @whit2333 , thank you for spotting _and_ fixing these! Let me build the docs locally to double-check the formatting is right this time :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:133,performance,time,time,133,"Hi @whit2333 , thank you for spotting _and_ fixing these! Let me build the docs locally to double-check the formatting is right this time :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:27,availability,Slo,Slot,27,"BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:27,reliability,Slo,Slot,27,"BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:64,usability,document,documentation,64,"BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:124,usability,user,user-images,124,"It certainly looks better than before. There is some inconsistency in the boldfacing of the numbers here:. ![image](https://user-images.githubusercontent.com/10999034/42341081-1eb22b3e-8092-11e8-9a7d-f631b0ad6ecc.png). Also we should either use the numbers to refer to the numbered list above or call the methods by name directly, probably not both. I don't have a strong preference though -- what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:372,usability,prefer,preference,372,"It certainly looks better than before. There is some inconsistency in the boldfacing of the numbers here:. ![image](https://user-images.githubusercontent.com/10999034/42341081-1eb22b3e-8092-11e8-9a7d-f631b0ad6ecc.png). Also we should either use the numbers to refer to the numbered list above or call the methods by name directly, probably not both. I don't have a strong preference though -- what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:29,availability,Slo,Slot,29,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:234,availability,slo,slot,234,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:508,availability,slo,slot,508,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:392,integrability,transform,transformations,392,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:392,interoperability,transform,transformations,392,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:495,modifiability,variab,variable,495,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:29,reliability,Slo,Slot,29,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:234,reliability,slo,slot,234,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:508,reliability,slo,slot,508,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:387,safety,safe,safe,387,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:542,safety,safe,safe,542,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:66,usability,document,documentation,66,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:364,usability,help,helper,364,"> BTW can you define what a ""Slot"" is somewhere in the RDataFrame documentation? Sorry if I just missed it. ctrl-f'ing it, it's said in a bunch of places but never ""officially"", we might want to fix that. the best description is that slot is an integer that will take a different value, 0 to nThreads - 1, for each thread of execution. It is meant to be used as a helper to write thread-safe transformations and actions (e.g. you could write a `Foreach` function that hammers a different output variable per slot, making it inherently thread-safe).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:47,availability,slo,slot,47,"Thanks. I guess my question is more about the ""slot concept"", rather than the explicit definition (i.e. 0 to nthreads-1). I need to study this a bit more. Regarding the changes, I went with referencing by name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:47,reliability,slo,slot,47,"Thanks. I guess my question is more about the ""slot concept"", rather than the explicit definition (i.e. 0 to nthreads-1). I need to study this a bit more. Regarding the changes, I went with referencing by name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:107,availability,slo,slots,107,"@whit2333 on the `RDataFrame` side, there is little more than that -- I guess you would like to understand slots on the `RDataSource` side of things then? Maybe we should continue this conversation on the ROOT forum, it might benefit many other people and might turn out useful to point people there in the future. Feel free to post there if you need clarifications. Regarding the PR: looks good to me (and thank you again). Could you please squash together all commits and force-push to your PR branch? The final result is what we want to merge :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:171,deployability,continu,continue,171,"@whit2333 on the `RDataFrame` side, there is little more than that -- I guess you would like to understand slots on the `RDataSource` side of things then? Maybe we should continue this conversation on the ROOT forum, it might benefit many other people and might turn out useful to point people there in the future. Feel free to post there if you need clarifications. Regarding the PR: looks good to me (and thank you again). Could you please squash together all commits and force-push to your PR branch? The final result is what we want to merge :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:185,interoperability,convers,conversation,185,"@whit2333 on the `RDataFrame` side, there is little more than that -- I guess you would like to understand slots on the `RDataSource` side of things then? Maybe we should continue this conversation on the ROOT forum, it might benefit many other people and might turn out useful to point people there in the future. Feel free to post there if you need clarifications. Regarding the PR: looks good to me (and thank you again). Could you please squash together all commits and force-push to your PR branch? The final result is what we want to merge :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:107,reliability,slo,slots,107,"@whit2333 on the `RDataFrame` side, there is little more than that -- I guess you would like to understand slots on the `RDataSource` side of things then? Maybe we should continue this conversation on the ROOT forum, it might benefit many other people and might turn out useful to point people there in the future. Feel free to post there if you need clarifications. Regarding the PR: looks good to me (and thank you again). Could you please squash together all commits and force-push to your PR branch? The final result is what we want to merge :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:96,testability,understand,understand,96,"@whit2333 on the `RDataFrame` side, there is little more than that -- I guess you would like to understand slots on the `RDataSource` side of things then? Maybe we should continue this conversation on the ROOT forum, it might benefit many other people and might turn out useful to point people there in the future. Feel free to post there if you need clarifications. Regarding the PR: looks good to me (and thank you again). Could you please squash together all commits and force-push to your PR branch? The final result is what we want to merge :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:142,availability,consist,consist,142,"@whit2333 sorry about the git confusion: it seems that you squashed all of your commits into Philippe's last commit. We would like this PR to consist of one single commit of yours with all the changes to the doxygen docs. Once that's done, I will merge :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:142,usability,consist,consist,142,"@whit2333 sorry about the git confusion: it seems that you squashed all of your commits into Philippe's last commit. We would like this PR to consist of one single commit of yours with all the changes to the doxygen docs. Once that's done, I will merge :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:97,performance,time,time,97,@bluehood Sorry about that. I should have been paying closer attention but I think I got it this time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2291:54,usability,close,closer,54,@bluehood Sorry about that. I should have been paying closer attention but I think I got it this time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2291
https://github.com/root-project/root/pull/2293:120,deployability,build,build,120,"uhm...ok my cmake-foo is not strong enough, with the latest changes the variable is always defined independently of the build options...I should probably do something like described [here](https://cmake.org/cmake/help/latest/manual/cmake-compile-features.7.html#manual:cmake-compile-features(7)), but I need to study a bit first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2293
https://github.com/root-project/root/pull/2293:72,modifiability,variab,variable,72,"uhm...ok my cmake-foo is not strong enough, with the latest changes the variable is always defined independently of the build options...I should probably do something like described [here](https://cmake.org/cmake/help/latest/manual/cmake-compile-features.7.html#manual:cmake-compile-features(7)), but I need to study a bit first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2293
https://github.com/root-project/root/pull/2293:213,usability,help,help,213,"uhm...ok my cmake-foo is not strong enough, with the latest changes the variable is always defined independently of the build options...I should probably do something like described [here](https://cmake.org/cmake/help/latest/manual/cmake-compile-features.7.html#manual:cmake-compile-features(7)), but I need to study a bit first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2293
https://github.com/root-project/root/pull/2293:111,modifiability,variab,variable,111,"Dropping this, thanks to @amadio I should have an alternative formulation of the feature that does not require variable templates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2293
https://github.com/root-project/root/pull/2293:94,reliability,doe,does,94,"Dropping this, thanks to @amadio I should have an alternative formulation of the feature that does not require variable templates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2293
https://github.com/root-project/root/pull/2294:75,reliability,doe,does,75,"Dropping this, thanks to @amadio I'll propose an alternative solution that does not require C++14 but only a backport of `std::index_sequence`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2294
https://github.com/root-project/root/pull/2295:11,safety,test,tests,11,"Added more tests as suggested by @dpiparo , tutorial will come in a different PR. Will merge if jenkins aggress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2295
https://github.com/root-project/root/pull/2295:11,testability,test,tests,11,"Added more tests as suggested by @dpiparo , tutorial will come in a different PR. Will merge if jenkins aggress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2295
https://github.com/root-project/root/pull/2298:185,security,team,team,185,"I don't think we should invest effort in retrofitting this to `RDataFrame`, but you're welcome to revisit parts as you see fit. Let's first agree on the style. I will present this in a team meeting to discuss it; e.g. the template arguments will be part of this discussion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2298
https://github.com/root-project/root/pull/2300:0,availability,Failur,Failure,0,Failure is ubu git clone.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2300
https://github.com/root-project/root/pull/2300:0,deployability,Fail,Failure,0,Failure is ubu git clone.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2300
https://github.com/root-project/root/pull/2300:0,performance,Failur,Failure,0,Failure is ubu git clone.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2300
https://github.com/root-project/root/pull/2300:0,reliability,Fail,Failure,0,Failure is ubu git clone.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2300
https://github.com/root-project/root/pull/2301:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2301
https://github.com/root-project/root/pull/2303:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2303
https://github.com/root-project/root/pull/2305:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:31,deployability,patch,patch,31,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:249,deployability,log,logging,249,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:335,deployability,patch,patches,335,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:89,modifiability,Variab,VariableMetricBuilder,89,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:211,modifiability,Variab,VariableMetricBuilder,211,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:31,safety,patch,patch,31,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:249,safety,log,logging,249,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:335,safety,patch,patches,335,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:31,security,patch,patch,31,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:249,security,log,logging,249,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:335,security,patch,patches,335,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:249,testability,log,logging,249,"There is a side-effect to this patch: the global print level remains different after the VariableMetricBuilder ran. The fact, that there is a global print level at all while there is also a local print level in VariableMetricBuilder, shows that the logging in MINUIT2 is only half-way done. Properly fixing that requires more involved patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:86,availability,state,state,86,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:529,availability,restor,restore,529,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:98,deployability,build,building,98,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:253,deployability,Build,Builder,253,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:86,integrability,state,state,86,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:271,modifiability,Variab,VariableMetricBuilder,271,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:107,performance,time,time,107,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:529,reliability,restor,restore,529,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:217,security,modif,modify,217,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:127,usability,Minim,MinimumBuilder,127,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:202,usability,user,user,202,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:418,usability,Minim,MinimumBuilder,418,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2305:567,usability,close,close,567,"After investigating I think one needs to reset the global print level to the previous state. . At building time by default the MinimumBuilder::PrintLevel() is set to the global MnPrint::Level(). If the user wishes to modify the print level just for the Builder (e.g. the VariableMetricBuilder (MIGRAD) ) he can do that. In this case it is good that we set the global level to be the same, so functions called from the MinimumBuilder (e.g. MnHesse or MnLineSearch) use the same level. . After finishing it will be however good to restore the level as before. . I will close this one and then make then a new PR doing this. . Thank you for looking into this and proposing these changes. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2305
https://github.com/root-project/root/pull/2306:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2306
https://github.com/root-project/root/pull/2307:10,deployability,patch,patch,10,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:84,deployability,updat,updated,84,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:92,deployability,version,version,92,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:112,deployability,patch,patch,112,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:92,integrability,version,version,92,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:92,modifiability,version,version,92,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:10,safety,patch,patch,10,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:84,safety,updat,updated,84,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:112,safety,patch,patch,112,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:10,security,patch,patch,10,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:84,security,updat,updated,84,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:112,security,patch,patch,112,"IIUC, the patch was reverted in LLVM because it broke swift. Should we wait for the updated version of the same patch before landing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:50,deployability,patch,patch,50,I think this is good to go as Bruno committed the patch again,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:50,safety,patch,patch,50,I think this is good to go as Bruno committed the patch again,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:50,security,patch,patch,50,I think this is good to go as Bruno committed the patch again,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2307:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2307
https://github.com/root-project/root/pull/2308:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2308
https://github.com/root-project/root/pull/2308:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2308
https://github.com/root-project/root/pull/2309:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:140,deployability,build,builds,140,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)? as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:313,integrability,messag,message,313,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)? as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:389,integrability,messag,message,389,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)? as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:313,interoperability,messag,message,313,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)? as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:389,interoperability,messag,message,389,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)? as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:126,safety,test,tests,126,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)? as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:190,security,access,access,190,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)? as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:126,testability,test,tests,126,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)? as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:410,usability,clear,clear,410,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)? as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:26,deployability,build,builds,26,you cannot trigger the PR builds ;) have you fixed the warnings due to the type comparisons?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:80,safety,review,review,80,@stwunsch @lmoneta I have made changes as said by @Axel-Naumann. Can you please review them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:80,testability,review,review,80,@stwunsch @lmoneta I have made changes as said by @Axel-Naumann. Can you please review them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:21,interoperability,format,format,21,@ravikiran0606 clang-format does not seem to be happy with the formatting of the file headers. can you check?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:63,interoperability,format,formatting,63,@ravikiran0606 clang-format does not seem to be happy with the formatting of the file headers. can you check?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:28,reliability,doe,does,28,@ravikiran0606 clang-format does not seem to be happy with the formatting of the file headers. can you check?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:18,availability,error,errors,18,"PR builds without errors or warnings, nice!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:3,deployability,build,builds,3,"PR builds without errors or warnings, nice!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:18,performance,error,errors,18,"PR builds without errors or warnings, nice!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:18,safety,error,errors,18,"PR builds without errors or warnings, nice!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:18,usability,error,errors,18,"PR builds without errors or warnings, nice!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:262,interoperability,Architectur,Architecture,262,"@stwunsch @lmoneta As we discussed, the three template arguments are needed because I use them inside the class definition of the VOptimizer class. I actually thought of doing so by getting ideas from the DeepNet class, which has two template arguments, one for Architecture and another for Layer. So I did use a similar approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:291,modifiability,Layer,Layer,291,"@stwunsch @lmoneta As we discussed, the three template arguments are needed because I use them inside the class definition of the VOptimizer class. I actually thought of doing so by getting ideas from the DeepNet class, which has two template arguments, one for Architecture and another for Layer. So I did use a similar approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:22,deployability,updat,updated,22,@stwunsch I have also updated the PR with the clang formatting. Now the Travis ci build succeds with clang format option too. I guess now we are good to merge! :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:82,deployability,build,build,82,@stwunsch I have also updated the PR with the clang formatting. Now the Travis ci build succeds with clang format option too. I guess now we are good to merge! :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:52,interoperability,format,formatting,52,@stwunsch I have also updated the PR with the clang formatting. Now the Travis ci build succeds with clang format option too. I guess now we are good to merge! :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:107,interoperability,format,format,107,@stwunsch I have also updated the PR with the clang formatting. Now the Travis ci build succeds with clang format option too. I guess now we are good to merge! :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:22,safety,updat,updated,22,@stwunsch I have also updated the PR with the clang formatting. Now the Travis ci build succeds with clang format option too. I guess now we are good to merge! :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2309:22,security,updat,updated,22,@stwunsch I have also updated the PR with the clang formatting. Now the Travis ci build succeds with clang format option too. I guess now we are good to merge! :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2309
https://github.com/root-project/root/pull/2312:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2312
https://github.com/root-project/root/pull/2313:65,availability,failur,failure,65,@imaxoi rebase on master to get rid of the `dataframe_misc` test failure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:65,deployability,fail,failure,65,@imaxoi rebase on master to get rid of the `dataframe_misc` test failure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:65,performance,failur,failure,65,@imaxoi rebase on master to get rid of the `dataframe_misc` test failure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:65,reliability,fail,failure,65,@imaxoi rebase on master to get rid of the `dataframe_misc` test failure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:60,safety,test,test,60,@imaxoi rebase on master to get rid of the `dataframe_misc` test failure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:60,testability,test,test,60,@imaxoi rebase on master to get rid of the `dataframe_misc` test failure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:11,deployability,build,build,11,"@phsft-bot build, and for the first time don't fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:47,deployability,fail,fail,47,"@phsft-bot build, and for the first time don't fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:36,performance,time,time,36,"@phsft-bot build, and for the first time don't fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2313:47,reliability,fail,fail,47,"@phsft-bot build, and for the first time don't fail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2313
https://github.com/root-project/root/pull/2314:29,availability,failur,failure,29,"~~Oops, didn't see the build failure. Will fix asap.~~ Actually there must have been some build system confusion. It should already be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2314
https://github.com/root-project/root/pull/2314:23,deployability,build,build,23,"~~Oops, didn't see the build failure. Will fix asap.~~ Actually there must have been some build system confusion. It should already be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2314
https://github.com/root-project/root/pull/2314:29,deployability,fail,failure,29,"~~Oops, didn't see the build failure. Will fix asap.~~ Actually there must have been some build system confusion. It should already be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2314
https://github.com/root-project/root/pull/2314:90,deployability,build,build,90,"~~Oops, didn't see the build failure. Will fix asap.~~ Actually there must have been some build system confusion. It should already be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2314
https://github.com/root-project/root/pull/2314:29,performance,failur,failure,29,"~~Oops, didn't see the build failure. Will fix asap.~~ Actually there must have been some build system confusion. It should already be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2314
https://github.com/root-project/root/pull/2314:29,reliability,fail,failure,29,"~~Oops, didn't see the build failure. Will fix asap.~~ Actually there must have been some build system confusion. It should already be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2314
https://github.com/root-project/root/pull/2314:27,availability,ping,ping,27,@phsft-bot build! @lmoneta ping!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2314
https://github.com/root-project/root/pull/2314:11,deployability,build,build,11,@phsft-bot build! @lmoneta ping!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2314
https://github.com/root-project/root/pull/2315:72,deployability,updat,update,72,@Axel-Naumann Yeah I was trying to do that! I'll rebase into master and update this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:72,safety,updat,update,72,@Axel-Naumann Yeah I was trying to do that! I'll rebase into master and update this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:72,security,updat,update,72,@Axel-Naumann Yeah I was trying to do that! I'll rebase into master and update this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:31,deployability,updat,updated,31,I have rebased into master and updated the PR. @lmoneta @stwunsch Can you please review this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:31,safety,updat,updated,31,I have rebased into master and updated the PR. @lmoneta @stwunsch Can you please review this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:81,safety,review,review,81,I have rebased into master and updated the PR. @lmoneta @stwunsch Can you please review this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:31,security,updat,updated,31,I have rebased into master and updated the PR. @lmoneta @stwunsch Can you please review this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:81,testability,review,review,81,I have rebased into master and updated the PR. @lmoneta @stwunsch Can you please review this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:37,deployability,build,build,37,@stwunsch Can you please trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:60,energy efficiency,GPU,GPU,60,"Looking carefully at the code, I see that we need to have a GPU implementations for these functions. As a first attempt we could try by doing in term of TMatrixT using the conversions TCudaMatrix -> Matrix functions and then we check if it is really needed to have something specific for GPU's.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:288,energy efficiency,GPU,GPU,288,"Looking carefully at the code, I see that we need to have a GPU implementations for these functions. As a first attempt we could try by doing in term of TMatrixT using the conversions TCudaMatrix -> Matrix functions and then we check if it is really needed to have something specific for GPU's.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:172,interoperability,convers,conversions,172,"Looking carefully at the code, I see that we need to have a GPU implementations for these functions. As a first attempt we could try by doing in term of TMatrixT using the conversions TCudaMatrix -> Matrix functions and then we check if it is really needed to have something specific for GPU's.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:275,interoperability,specif,specific,275,"Looking carefully at the code, I see that we need to have a GPU implementations for these functions. As a first attempt we could try by doing in term of TMatrixT using the conversions TCudaMatrix -> Matrix functions and then we check if it is really needed to have something specific for GPU's.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:60,performance,GPU,GPU,60,"Looking carefully at the code, I see that we need to have a GPU implementations for these functions. As a first attempt we could try by doing in term of TMatrixT using the conversions TCudaMatrix -> Matrix functions and then we check if it is really needed to have something specific for GPU's.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:288,performance,GPU,GPU,288,"Looking carefully at the code, I see that we need to have a GPU implementations for these functions. As a first attempt we could try by doing in term of TMatrixT using the conversions TCudaMatrix -> Matrix functions and then we check if it is really needed to have something specific for GPU's.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:61,availability,Operat,Operations,61,@lmoneta @stwunsch I ll add the GPU implementation for those Operations soon and update this PR. We can merge then !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:81,deployability,updat,update,81,@lmoneta @stwunsch I ll add the GPU implementation for those Operations soon and update this PR. We can merge then !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:32,energy efficiency,GPU,GPU,32,@lmoneta @stwunsch I ll add the GPU implementation for those Operations soon and update this PR. We can merge then !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:32,performance,GPU,GPU,32,@lmoneta @stwunsch I ll add the GPU implementation for those Operations soon and update this PR. We can merge then !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:81,safety,updat,update,81,@lmoneta @stwunsch I ll add the GPU implementation for those Operations soon and update this PR. We can merge then !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:81,security,updat,update,81,@lmoneta @stwunsch I ll add the GPU implementation for those Operations soon and update this PR. We can merge then !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:60,availability,operat,operations,60,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:164,availability,operat,operations,164,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:207,availability,operat,operations,207,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:331,availability,operat,operations,331,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:146,deployability,build,build,146,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:157,deployability,updat,update,157,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:200,deployability,updat,update,200,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:324,deployability,updat,update,324,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:31,energy efficiency,GPU,GPU,31,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:84,energy efficiency,CPU,CPU,84,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:92,energy efficiency,GPU,GPU,92,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:31,performance,GPU,GPU,31,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:84,performance,CPU,CPU,84,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:92,performance,GPU,GPU,92,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:96,safety,test,tests,96,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:123,safety,review,review,123,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:157,safety,updat,update,157,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:175,safety,test,tests,175,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:200,safety,updat,update,200,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:324,safety,updat,update,324,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:342,safety,test,tests,342,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:157,security,updat,update,157,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:200,security,updat,update,200,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:324,security,updat,update,324,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:96,testability,test,tests,96,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:123,testability,review,review,123,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:175,testability,test,tests,175,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:342,testability,test,tests,342,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:227,usability,user,user-images,227,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:357,usability,user,user-images,357,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build? The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2315:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2315
https://github.com/root-project/root/pull/2318:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2318
https://github.com/root-project/root/pull/2318:24,safety,review,review,24,"@dpiparo thanks for the review, I solved the comments",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2318
https://github.com/root-project/root/pull/2318:24,testability,review,review,24,"@dpiparo thanks for the review, I solved the comments",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2318
https://github.com/root-project/root/pull/2318:11,deployability,build,build,11,@phsft-bot build again,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2318
https://github.com/root-project/root/pull/2319:27,usability,statu,status,27,"thinking about it, perhaps status bits could be used instead of an additional data member...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:57,energy efficiency,measur,measurements,57,"Once tests pass, I think this should be merged. Here are measurements in VTune of how things change:. ![screenshot](https://user-images.githubusercontent.com/249404/42828119-4b1244b6-89e8-11e8-80e5-f1b4a0138045.png). ![screenshot2](https://user-images.githubusercontent.com/249404/42828144-599592d6-89e8-11e8-9534-715dbc7ac85b.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:5,safety,test,tests,5,"Once tests pass, I think this should be merged. Here are measurements in VTune of how things change:. ![screenshot](https://user-images.githubusercontent.com/249404/42828119-4b1244b6-89e8-11e8-80e5-f1b4a0138045.png). ![screenshot2](https://user-images.githubusercontent.com/249404/42828144-599592d6-89e8-11e8-9534-715dbc7ac85b.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:5,testability,test,tests,5,"Once tests pass, I think this should be merged. Here are measurements in VTune of how things change:. ![screenshot](https://user-images.githubusercontent.com/249404/42828119-4b1244b6-89e8-11e8-80e5-f1b4a0138045.png). ![screenshot2](https://user-images.githubusercontent.com/249404/42828144-599592d6-89e8-11e8-9534-715dbc7ac85b.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:124,usability,user,user-images,124,"Once tests pass, I think this should be merged. Here are measurements in VTune of how things change:. ![screenshot](https://user-images.githubusercontent.com/249404/42828119-4b1244b6-89e8-11e8-80e5-f1b4a0138045.png). ![screenshot2](https://user-images.githubusercontent.com/249404/42828144-599592d6-89e8-11e8-9534-715dbc7ac85b.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:240,usability,user,user-images,240,"Once tests pass, I think this should be merged. Here are measurements in VTune of how things change:. ![screenshot](https://user-images.githubusercontent.com/249404/42828119-4b1244b6-89e8-11e8-80e5-f1b4a0138045.png). ![screenshot2](https://user-images.githubusercontent.com/249404/42828144-599592d6-89e8-11e8-9534-715dbc7ac85b.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:65,energy efficiency,green,green,65,"Another view of the changes: the x-ray of running threads (light green = waiting, brown = doing useful stuff). Before this PR:. ![screenshot](https://user-images.githubusercontent.com/249404/42830098-ee0a4090-89ea-11e8-9458-f04570fd00c2.png). After this PR:. ![screenshot](https://user-images.githubusercontent.com/249404/42830037-d825d5d2-89ea-11e8-942e-6830e594af54.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:150,usability,user,user-images,150,"Another view of the changes: the x-ray of running threads (light green = waiting, brown = doing useful stuff). Before this PR:. ![screenshot](https://user-images.githubusercontent.com/249404/42830098-ee0a4090-89ea-11e8-9458-f04570fd00c2.png). After this PR:. ![screenshot](https://user-images.githubusercontent.com/249404/42830037-d825d5d2-89ea-11e8-942e-6830e594af54.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:281,usability,user,user-images,281,"Another view of the changes: the x-ray of running threads (light green = waiting, brown = doing useful stuff). Before this PR:. ![screenshot](https://user-images.githubusercontent.com/249404/42830098-ee0a4090-89ea-11e8-9458-f04570fd00c2.png). After this PR:. ![screenshot](https://user-images.githubusercontent.com/249404/42830037-d825d5d2-89ea-11e8-942e-6830e594af54.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:766,availability,consist,consistency,766,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:2,deployability,observ,observations,2,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:490,energy efficiency,Current,Currently,490,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:585,energy efficiency,Core,Core,585,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:232,modifiability,concern,concern,232,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:939,modifiability,inherit,inheritance,939,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:313,performance,I/O,I/O,313,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:158,reliability,doe,does,158,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:574,safety,except,except,574,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:2,testability,observ,observations,2,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:232,testability,concern,concern,232,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:301,usability,support,support,301,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:766,usability,consist,consistency,766,"2 observations. If I understood correctly, fASTProperty is only set via the TClass construction in a dictionary file. One consequence is that the improvement does not apply to purely interpreted class (at the moment this is a minor concern but might the issue might not be re-noticed when we increase support for I/O of interpreted classes). fASTProperty is very similar to fProperty and even more to fClassProperty (where the fASTProperty might actually belong *if* there is space there). Currently fProperty and fClassProperty are set via the TProtoClass (for all classes except the Core/IO classes). So a few question to answer before merging. a) Should fASTProperty be inside fClassProperty, (and if not why)? b) Should fASTProperty be set via TProtoClass? (for consistency). or. c) Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? d) Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:98,availability,consist,consistency,98,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:549,availability,state,state,549,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:443,deployability,manag,manage,443,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:901,deployability,continu,continue,901,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:183,energy efficiency,Core,Core,183,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:443,energy efficiency,manag,manage,443,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:549,integrability,state,state,549,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:594,modifiability,inherit,inheritance,594,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:746,modifiability,exten,extendable,746,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:802,modifiability,inherit,inherits,802,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:443,safety,manag,manage,443,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:341,testability,understand,understand,341,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:708,testability,understand,understand,708,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:98,usability,consist,consistency,98,"Hi @pcanal ,. good questions, I reorder them:. > Should fASTProperty be set via TProtoClass? (for consistency). This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? I do not understand this question :(. > Should fASTProperty be inside fClassProperty, (and if not why)? How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? I think I do not fully understand. I think we need something extendable, e.g. to take into account also if the class inherits from TObject and all kind of checks we'll need once we move to pcms. Said that, I want to continue discussing the best implementation since this PR is a demonstrator and nothing is carved in stone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:182,availability,state,state,182,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:212,availability,state,state,212,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:387,availability,consist,consistency,387,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:76,deployability,manag,manage,76,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:76,energy efficiency,manag,manage,76,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:474,energy efficiency,Core,Core,474,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:182,integrability,state,state,182,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:212,integrability,state,state,212,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:638,modifiability,inherit,inheritance,638,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:76,safety,manag,manage,76,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:789,safety,compl,completely,789,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:789,security,compl,completely,789,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:754,testability,understand,understand,754,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:1225,testability,understand,understand,1225,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:387,usability,consist,consistency,387,">> Should fASTProperty be inside fClassProperty, (and if not why)? > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? >> Should fASTProperty be set via TProtoClass? (for consistency). > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > I think I do not fully understand. . This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > I do not understand this question :(. Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). Cheers,. Philippe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:186,availability,state,state,186,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:222,availability,state,state,222,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:536,availability,consist,consistency,536,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:80,deployability,manag,manage,80,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:2028,deployability,upgrad,upgrade,2028,"to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties are stored, accommodating the upgrade in the existing system: is this accurate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:80,energy efficiency,manag,manage,80,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:625,energy efficiency,Core,Core,625,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:186,integrability,state,state,186,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:222,integrability,state,state,222,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:876,modifiability,inherit,inheritance,876,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:2028,modifiability,upgrad,upgrade,2028,"to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties are stored, accommodating the upgrade in the existing system: is this accurate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:80,safety,manag,manage,80,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:800,safety,avoid,avoid,800,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:1035,safety,compl,completely,1035,"sProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties are stored, accommodating the upgrade in t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:1963,safety,avoid,avoid,1963,"to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties are stored, accommodating the upgrade in the existing system: is this accurate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:1035,security,compl,completely,1035,"sProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties are stored, accommodating the upgrade in t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:994,testability,understand,understand,994,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:1338,testability,understand,understand,1338,"to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties are stored, accommodating the upgrade in the existing system: is this accurate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:1539,testability,understand,understand,1539,"to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties are stored, accommodating the upgrade in the existing system: is this accurate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:536,usability,consist,consistency,536,"> >> Should fASTProperty be inside fClassProperty, (and if not why)? > > How to manage the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions. > . > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty? The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup. . > >> Should fASTProperty be set via TProtoClass? (for consistency). > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread. > . > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)? > > I think I do not fully understand. . > . > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now. . > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up? > > I do not understand this question :(. > . > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:175,performance,I/O,I/O,175,"@dpiparo From your last comment, I __think__ we agree but I am not sure (due to me not properly parsing the last few sentences). Let's discuss this at Friday's ROOT developer I/O meeting. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:77,usability,close,closed,77,"Hi, making a sweep of old PRs -- no activity for the last ~year, can this be closed (or merged)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2319:13,safety,permiss,permission,13,Closing with permission by @dpiparo .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2319
https://github.com/root-project/root/pull/2321:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2321
https://github.com/root-project/root/pull/2321:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2321
https://github.com/root-project/root/pull/2321:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2321
https://github.com/root-project/root/pull/2322:316,availability,avail,availability,316,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:198,deployability,integr,integration,198,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:294,deployability,depend,depends,294,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:198,integrability,integration test,integration test,198,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:294,integrability,depend,depends,294,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:198,interoperability,integr,integration,198,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:198,modifiability,integr,integration,198,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:294,modifiability,depend,depends,294,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:198,reliability,integr,integration,198,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:316,reliability,availab,availability,316,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:50,safety,review,review,50,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:210,safety,test,test,210,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:294,safety,depend,depends,294,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:316,safety,avail,availability,316,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:198,security,integr,integration,198,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:316,security,availab,availability,316,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:50,testability,review,review,50,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:198,testability,integr,integration,198,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:210,testability,test,test,210,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:294,testability,depend,depends,294,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:151,reliability,doe,does,151,"hi, alright i'm back at cern on monday, i'll review asap (and let you know about the roottest, but in first approximation you can follow what rarrowds does).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:45,safety,review,review,45,"hi, alright i'm back at cern on monday, i'll review asap (and let you know about the roottest, but in first approximation you can follow what rarrowds does).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:45,testability,review,review,45,"hi, alright i'm back at cern on monday, i'll review asap (and let you know about the roottest, but in first approximation you can follow what rarrowds does).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:59,deployability,build,build,59,"hi, cleaned up obsolete jenkins messages, will start a new build and start reviewing today",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:32,integrability,messag,messages,32,"hi, cleaned up obsolete jenkins messages, will start a new build and start reviewing today",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:32,interoperability,messag,messages,32,"hi, cleaned up obsolete jenkins messages, will start a new build and start reviewing today",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:75,safety,review,reviewing,75,"hi, cleaned up obsolete jenkins messages, will start a new build and start reviewing today",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:75,testability,review,reviewing,75,"hi, cleaned up obsolete jenkins messages, will start a new build and start reviewing today",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:30,availability,failur,failures,30,@bellenot can we ignore these failures on windows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:30,deployability,fail,failures,30,@bellenot can we ignore these failures on windows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:30,performance,failur,failures,30,@bellenot can we ignore these failures on windows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:30,reliability,fail,failures,30,@bellenot can we ignore these failures on windows?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:146,energy efficiency,current,current,146,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:24,modifiability,concern,concerned,24,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:88,performance,perform,performance,88,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:204,performance,lock,locks,204,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:236,performance,perform,performance,236,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:204,security,lock,locks,204,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:24,testability,concern,concerned,24,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:88,usability,perform,performance,88,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:236,usability,perform,performance,236,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:257,usability,user,users,257,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:281,usability,minim,minimal,281,@jblomer as far as I am concerned the PR could enter the CI as is. We know already that performance in MT mode will not be breath taking with the current implementation but also that SQLite deals with FS locks too which would inder the performance and that users will not be after minimal runtime with this DS. I would be in favour of merging the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:140,energy efficiency,optim,optimized,140,"hi @dpiparo @jblomer could we maybe print a warning if users try to use this ds with implicit mt enabled? users might trust root to do ""the optimized thing"" but in this case they might be getting longer runtimes without noticing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:140,performance,optimiz,optimized,140,"hi @dpiparo @jblomer could we maybe print a warning if users try to use this ds with implicit mt enabled? users might trust root to do ""the optimized thing"" but in this case they might be getting longer runtimes without noticing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:118,security,trust,trust,118,"hi @dpiparo @jblomer could we maybe print a warning if users try to use this ds with implicit mt enabled? users might trust root to do ""the optimized thing"" but in this case they might be getting longer runtimes without noticing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:55,usability,user,users,55,"hi @dpiparo @jblomer could we maybe print a warning if users try to use this ds with implicit mt enabled? users might trust root to do ""the optimized thing"" but in this case they might be getting longer runtimes without noticing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:106,usability,user,users,106,"hi @dpiparo @jblomer could we maybe print a warning if users try to use this ds with implicit mt enabled? users might trust root to do ""the optimized thing"" but in this case they might be getting longer runtimes without noticing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:216,availability,failur,failures,216,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:354,availability,failur,failures,354,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:364,availability,ping,pinging,364,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:47,deployability,build,builds,47,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:115,deployability,build,building,115,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:216,deployability,fail,failures,216,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:354,deployability,fail,failures,354,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:216,performance,failur,failures,216,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:354,performance,failur,failures,354,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:63,reliability,doe,does,63,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:216,reliability,fail,failures,216,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:354,reliability,fail,failures,354,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:23,security,modif,modifications,23,"@jblomer due to recent modifications to the PR builds, jenkins does not rebase your branch over ROOT master before building anymore. As a result your branch is out of sync with roottest, and that's why you get these failures in `projectroot.roottest.root.dataframe.roottest_root_dataframe_misc`. Rebasing your PR branch on master should get rid of these failures. pinging @vgvassilev and @amadio just so they know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:37,interoperability,standard,standard,37,It should be rebased now. Is there a standard ROOT method for printing warnings?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:29,availability,failur,failures,29,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine. @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:215,availability,avail,available,215,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine. @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:23,deployability,build,build,23,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine. @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:29,deployability,fail,failures,29,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine. @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:29,performance,failur,failures,29,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine. @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:29,reliability,fail,failures,29,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine. @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:215,reliability,availab,available,215,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine. @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:215,safety,avail,available,215,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine. @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:215,security,availab,available,215,"@jblomer @dpiparo both build failures are due to sqlite not being present on the machine. @amadio suggests that the datasource be made optional in tree/dataframe/CMakeLists.txt, so it's not built when sqlite is not available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:208,availability,avail,available,208,@bluehood @amadio @dpiparo The CMakeLists.txt file should already [turn off](https://github.com/root-project/root/pull/2322/files#diff-0e2476491161fbc84e4e5df06555d009R25) this data source when sqlite is not available. Am I missing something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:208,reliability,availab,available,208,@bluehood @amadio @dpiparo The CMakeLists.txt file should already [turn off](https://github.com/root-project/root/pull/2322/files#diff-0e2476491161fbc84e4e5df06555d009R25) this data source when sqlite is not available. Am I missing something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:208,safety,avail,available,208,@bluehood @amadio @dpiparo The CMakeLists.txt file should already [turn off](https://github.com/root-project/root/pull/2322/files#diff-0e2476491161fbc84e4e5df06555d009R25) this data source when sqlite is not available. Am I missing something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:208,security,availab,available,208,@bluehood @amadio @dpiparo The CMakeLists.txt file should already [turn off](https://github.com/root-project/root/pull/2322/files#diff-0e2476491161fbc84e4e5df06555d009R25) this data source when sqlite is not available. Am I missing something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2322:32,usability,responsiv,responsive,32,thank you @jblomer for being so responsive to comments!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2322
https://github.com/root-project/root/pull/2324:79,availability,failur,failures,79,"Thanks a *lot*, Sergey! Before merging I'd like to understand why we don't see failures of these tutorials in the nightlies!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:79,deployability,fail,failures,79,"Thanks a *lot*, Sergey! Before merging I'd like to understand why we don't see failures of these tutorials in the nightlies!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:79,performance,failur,failures,79,"Thanks a *lot*, Sergey! Before merging I'd like to understand why we don't see failures of these tutorials in the nightlies!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:79,reliability,fail,failures,79,"Thanks a *lot*, Sergey! Before merging I'd like to understand why we don't see failures of these tutorials in the nightlies!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:51,testability,understand,understand,51,"Thanks a *lot*, Sergey! Before merging I'd like to understand why we don't see failures of these tutorials in the nightlies!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:19,availability,failur,failures,19,"> why we don't see failures of these tutorials in the nightlies! Does all these tutorials executed? . Cannot be, while there were many wrong class names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:19,deployability,fail,failures,19,"> why we don't see failures of these tutorials in the nightlies! Does all these tutorials executed? . Cannot be, while there were many wrong class names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:19,performance,failur,failures,19,"> why we don't see failures of these tutorials in the nightlies! Does all these tutorials executed? . Cannot be, while there were many wrong class names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:19,reliability,fail,failures,19,"> why we don't see failures of these tutorials in the nightlies! Does all these tutorials executed? . Cannot be, while there were many wrong class names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:65,reliability,Doe,Does,65,"> why we don't see failures of these tutorials in the nightlies! Does all these tutorials executed? . Cannot be, while there were many wrong class names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:78,deployability,fail,fail,78,"My point exactly. I want to see why they are not executed. Fix that, see them fail, then merge your PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2324:78,reliability,fail,fail,78,"My point exactly. I want to see why they are not executed. Fix that, see them fail, then merge your PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2324
https://github.com/root-project/root/pull/2325:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2325
https://github.com/root-project/root/pull/2326:0,deployability,Fail,Failed,0,"Failed to clone and stuck waiting for a 32bit machine. Since all other builds passed, I'm merging this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2326
https://github.com/root-project/root/pull/2326:71,deployability,build,builds,71,"Failed to clone and stuck waiting for a 32bit machine. Since all other builds passed, I'm merging this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2326
https://github.com/root-project/root/pull/2326:0,reliability,Fail,Failed,0,"Failed to clone and stuck waiting for a 32bit machine. Since all other builds passed, I'm merging this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2326
https://github.com/root-project/root/pull/2327:1,reliability,rca,rcaspart,1,@rcaspart Does this fit your problem with object selection from vectors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2327
https://github.com/root-project/root/pull/2327:10,reliability,Doe,Does,10,@rcaspart Does this fit your problem with object selection from vectors?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2327
https://github.com/root-project/root/pull/2327:57,usability,help,helpers,57,"Hi Stefan,. thanks a lot for the work on providing these helpers directly in ROOT. Indeed these fit the use-cases I have in mind very nicely.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2327
https://github.com/root-project/root/pull/2327:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2327
https://github.com/root-project/root/pull/2328:24,safety,review,review,24,"@dpiparo Thanks for the review, fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2328
https://github.com/root-project/root/pull/2328:24,testability,review,review,24,"@dpiparo Thanks for the review, fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2328
https://github.com/root-project/root/pull/2328:27,deployability,build,builds,27,@imaxoi let's wait for the builds to be green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2328
https://github.com/root-project/root/pull/2328:40,energy efficiency,green,green,40,@imaxoi let's wait for the builds to be green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2328
https://github.com/root-project/root/pull/2328:11,deployability,build,build,11,"@phsft-bot build, and don't timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2328
https://github.com/root-project/root/pull/2328:28,performance,time,timeout,28,"@phsft-bot build, and don't timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2328
https://github.com/root-project/root/pull/2328:28,safety,timeout,timeout,28,"@phsft-bot build, and don't timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2328
https://github.com/root-project/root/pull/2329:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:105,usability,clear,clear,105,"@dpiparo I don't think so! However, I'll write more proper doxygen markup so that the arguments get more clear. Then it should be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:121,usability,help,helpers,121,I'll do a new PR afterwards with the doxygen changes together with a tutorial targeting sorting and selecting with these helpers (and how you can use the STL).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:181,availability,operat,operations,181,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:243,availability,operat,operation,243,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:478,availability,operat,operations,478,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:537,integrability,translat,translates,537,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:639,integrability,Filter,Filter,639,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:122,interoperability,standard,standard,122,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:537,interoperability,translat,translates,537,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:106,reliability,doe,does,106,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:700,safety,risk,risk,700,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:394,security,sign,signature,394,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:700,security,risk,risk,700,"hi, i don't have a strong opinion about the naming, just some comments:. - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort. - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate. - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload. - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:199,availability,state,states,199,"@bluehood . - the standard sort is done by `std::sort` because `RVec` implements a STL iterator. we could add a `RVec::Sort(begin, end){std::sort(begin, end);};`? however, i've done a tutorial which states explicitely that `RVec` can be sorted with the STL. - +1 for `Take`! - The overload is a good idea! Only problem is that for some quantities you need the highest ones and for some the lowest ones. So `TakeLargest` and `TakeSmallest`? Or introduce a flag in the signature (I think this is ugly ;) ). Thanks for your ideas!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:199,integrability,state,states,199,"@bluehood . - the standard sort is done by `std::sort` because `RVec` implements a STL iterator. we could add a `RVec::Sort(begin, end){std::sort(begin, end);};`? however, i've done a tutorial which states explicitely that `RVec` can be sorted with the STL. - +1 for `Take`! - The overload is a good idea! Only problem is that for some quantities you need the highest ones and for some the lowest ones. So `TakeLargest` and `TakeSmallest`? Or introduce a flag in the signature (I think this is ugly ;) ). Thanks for your ideas!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:18,interoperability,standard,standard,18,"@bluehood . - the standard sort is done by `std::sort` because `RVec` implements a STL iterator. we could add a `RVec::Sort(begin, end){std::sort(begin, end);};`? however, i've done a tutorial which states explicitely that `RVec` can be sorted with the STL. - +1 for `Take`! - The overload is a good idea! Only problem is that for some quantities you need the highest ones and for some the lowest ones. So `TakeLargest` and `TakeSmallest`? Or introduce a flag in the signature (I think this is ugly ;) ). Thanks for your ideas!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:467,security,sign,signature,467,"@bluehood . - the standard sort is done by `std::sort` because `RVec` implements a STL iterator. we could add a `RVec::Sort(begin, end){std::sort(begin, end);};`? however, i've done a tutorial which states explicitely that `RVec` can be sorted with the STL. - +1 for `Take`! - The overload is a good idea! Only problem is that for some quantities you need the highest ones and for some the lowest ones. So `TakeLargest` and `TakeSmallest`? Or introduce a flag in the signature (I think this is ugly ;) ). Thanks for your ideas!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:60,availability,operat,operations,60,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:71,availability,avail,available,71,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:469,deployability,depend,depending,469,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:304,integrability,transform,transform,304,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:321,integrability,Filter,Filter,321,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:469,integrability,depend,depending,469,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:243,interoperability,syntact,syntactic,243,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:304,interoperability,transform,transform,304,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:469,modifiability,depend,depending,469,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:229,performance,time,time,229,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:71,reliability,availab,available,71,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:71,safety,avail,available,71,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:469,safety,depend,depending,469,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:71,security,availab,available,71,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:469,testability,depend,depending,469,"let me argue just once in favour of RVec::Sort. many (all?) operations available with RVec can be done with STL, and Take can be done with RVec v2({v1[0], v1[2]}), but we can be nicer than that, nicer than begin/end. most of the time, RVec is syntactic sugar -- why do we offer RVec::Map instead of std::transform, RVec::Filter instead of std::remove_if, but not Sort, which we already know will be used virtually in every RDF analysis? regarding TakeLargest/Smallest: depending on how you sort (typically ascending), one could think of Take(v, -2) and Take(v, 2) respectively. just proposing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2329:5,usability,close,close,5,I'll close this PR in favor of a more refined proposal.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2329
https://github.com/root-project/root/pull/2331:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2331
https://github.com/root-project/root/pull/2332:9,integrability,translat,translate,9,Should I translate this as well to python?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:9,interoperability,translat,translate,9,Should I translate this as well to python?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:48,usability,support,supported,48,"~~@stwunsch it would be great but `Take` is not supported (yet) from Python.~~. Wait that was for `RDataFrame`'s `Take`, this one is worth a try...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:30,deployability,version,version,30,@etejedor I've added a python version. What do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:30,integrability,version,version,30,@etejedor I've added a python version. What do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:30,modifiability,version,version,30,@etejedor I've added a python version. What do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:143,reliability,doe,does,143,"LGTM! My only doubt here is if we will ever want `RVec`s to be used from Python, or we will just expose them as NumPy arrays, but it certainly does not hurt to have this tutorial.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:97,security,expos,expose,97,"LGTM! My only doubt here is if we will ever want `RVec`s to be used from Python, or we will just expose them as NumPy arrays, but it certainly does not hurt to have this tutorial.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:5,energy efficiency,adapt,adapt,5,I'll adapt the docs based on #2351.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:5,integrability,adapt,adapt,5,I'll adapt the docs based on #2351.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:5,interoperability,adapt,adapt,5,I'll adapt the docs based on #2351.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2332:5,modifiability,adapt,adapt,5,I'll adapt the docs based on #2351.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2332
https://github.com/root-project/root/pull/2335:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2335
https://github.com/root-project/root/pull/2336:46,deployability,patch,patches,46,"@agheata, can this be back ported to v6-12-00-patches and v6-14-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2336
https://github.com/root-project/root/pull/2336:67,deployability,patch,patches,67,"@agheata, can this be back ported to v6-12-00-patches and v6-14-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2336
https://github.com/root-project/root/pull/2336:46,safety,patch,patches,46,"@agheata, can this be back ported to v6-12-00-patches and v6-14-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2336
https://github.com/root-project/root/pull/2336:67,safety,patch,patches,67,"@agheata, can this be back ported to v6-12-00-patches and v6-14-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2336
https://github.com/root-project/root/pull/2336:46,security,patch,patches,46,"@agheata, can this be back ported to v6-12-00-patches and v6-14-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2336
https://github.com/root-project/root/pull/2336:67,security,patch,patches,67,"@agheata, can this be back ported to v6-12-00-patches and v6-14-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2336
https://github.com/root-project/root/pull/2336:59,deployability,patch,patches,59,@smuzaffar I cherry-picked this commit into v6-10/12/14-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2336
https://github.com/root-project/root/pull/2336:59,safety,patch,patches,59,@smuzaffar I cherry-picked this commit into v6-10/12/14-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2336
https://github.com/root-project/root/pull/2336:59,security,patch,patches,59,@smuzaffar I cherry-picked this commit into v6-10/12/14-00-patches,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2336
https://github.com/root-project/root/pull/2337:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2337
https://github.com/root-project/root/pull/2337:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2337
https://github.com/root-project/root/pull/2340:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2340
https://github.com/root-project/root/pull/2340:78,usability,close,closed,78,"Hi, making a sweep of old PRs -- no activity for almost one year, can this be closed (or merged)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2340
https://github.com/root-project/root/pull/2340:0,reliability,Doe,Doesn,0,Doesn't have an easy solution. Closing it for the moment.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2340
https://github.com/root-project/root/pull/2344:105,integrability,Filter,Filter,105,"Yes, the alias should not be necessary and you should be able to use the `myFriend.MyCol` syntax in the `Filter`, thanks to [this](https://github.com/root-project/root/blob/master/tree/dataframe/src/RDFInterfaceUtils.cxx#L143).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2344
https://github.com/root-project/root/pull/2344:50,energy efficiency,current,current,50,@bluehood @etejedor I've fixed the docs. Does the current section hold true? What about the caveat with the toplevel branches of the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2344
https://github.com/root-project/root/pull/2344:41,reliability,Doe,Does,41,@bluehood @etejedor I've fixed the docs. Does the current section hold true? What about the caveat with the toplevel branches of the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2344
https://github.com/root-project/root/pull/2344:34,usability,responsiv,responsive,34,"@stwunsch sorry for not being too responsive. the PR looks good to me and it should solve a recent jira ticket, [ROOT-9546](https://sft.its.cern.ch/jira/browse/ROOT-9546).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2344
https://github.com/root-project/root/pull/2346:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:0,deployability,Depend,Depends,0,Depends on #2375 and #2356,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:0,integrability,Depend,Depends,0,Depends on #2375 and #2356,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:0,modifiability,Depend,Depends,0,Depends on #2375 and #2356,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:0,safety,Depend,Depends,0,Depends on #2375 and #2356,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:0,testability,Depend,Depends,0,Depends on #2375 and #2356,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:26,deployability,integr,integrate,26,Cherry picked in #2716 to integrate with root-project/roottest#220,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:26,integrability,integr,integrate,26,Cherry picked in #2716 to integrate with root-project/roottest#220,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:26,interoperability,integr,integrate,26,Cherry picked in #2716 to integrate with root-project/roottest#220,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:26,modifiability,integr,integrate,26,Cherry picked in #2716 to integrate with root-project/roottest#220,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:26,reliability,integr,integrate,26,Cherry picked in #2716 to integrate with root-project/roottest#220,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:26,security,integr,integrate,26,Cherry picked in #2716 to integrate with root-project/roottest#220,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2346:26,testability,integr,integrate,26,Cherry picked in #2716 to integrate with root-project/roottest#220,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2346
https://github.com/root-project/root/pull/2348:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2348
https://github.com/root-project/root/pull/2348:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2348
https://github.com/root-project/root/pull/2348:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2348
https://github.com/root-project/root/pull/2351:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:57,integrability,interfac,interface,57,"@dpiparo @bluehood To summarize: We need to agree on the interface of `Take[Indices,First,Last]` vs `Take` with overloads and figuring out the asserts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:57,interoperability,interfac,interface,57,"@dpiparo @bluehood To summarize: We need to agree on the interface of `Take[Indices,First,Last]` vs `Take` with overloads and figuring out the asserts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:57,modifiability,interfac,interface,57,"@dpiparo @bluehood To summarize: We need to agree on the interface of `Take[Indices,First,Last]` vs `Take` with overloads and figuring out the asserts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:143,testability,assert,asserts,143,"@dpiparo @bluehood To summarize: We need to agree on the interface of `Take[Indices,First,Last]` vs `Take` with overloads and figuring out the asserts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:50,modifiability,design decis,design decisions,50,re-assigning from me to danilo as there are a few design decisions that I can't take:. * which safety checks to put in place and for what debug levels. * overloads of Take vs several functions with different names,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:95,safety,safe,safety,95,re-assigning from me to danilo as there are a few design decisions that I can't take:. * which safety checks to put in place and for what debug levels. * overloads of Take vs several functions with different names,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:86,security,sign,signed,86,@stwunsch can you fix. ```. include/ROOT/RVec.hxx:712:50: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]. include/ROOT/RVec.hxx:716:50: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]. ```. then we merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2351:202,security,sign,signed,202,@stwunsch can you fix. ```. include/ROOT/RVec.hxx:712:50: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]. include/ROOT/RVec.hxx:716:50: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]. ```. then we merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2351
https://github.com/root-project/root/pull/2352:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2352
https://github.com/root-project/root/pull/2352:11,deployability,build,build,11,@phsft-bot build only on fedora28/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2352
https://github.com/root-project/root/pull/2352:11,deployability,build,build,11,@phsft-bot build just on mac1013/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2352
https://github.com/root-project/root/pull/2353:1338,availability,error,error,1338,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:205,deployability,updat,updated,205,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:313,deployability,version,version,313,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:354,deployability,updat,updated,354,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:365,deployability,version,version,365,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:580,deployability,API,API,580,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:604,deployability,version,versions,604,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:805,deployability,API,API,805,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1023,deployability,API,API,1023,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1051,deployability,updat,updated,1051,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1545,deployability,updat,updated,1545,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:267,energy efficiency,load,load,267,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:305,energy efficiency,current,current,305,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1002,energy efficiency,adapt,adapt,1002,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:313,integrability,version,version,313,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:365,integrability,version,version,365,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:580,integrability,API,API,580,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:604,integrability,version,versions,604,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:805,integrability,API,API,805,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1002,integrability,adapt,adapt,1002,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1023,integrability,API,API,1023,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1344,integrability,messag,messages,1344,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:580,interoperability,API,API,580,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:805,interoperability,API,API,805,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:840,interoperability,compatib,compatible,840,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1002,interoperability,adapt,adapt,1002,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1023,interoperability,API,API,1023,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1344,interoperability,messag,messages,1344,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:313,modifiability,version,version,313,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:365,modifiability,version,version,365,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:604,modifiability,version,versions,604,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1002,modifiability,adapt,adapt,1002,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:267,performance,load,load,267,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1338,performance,error,error,1338,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1507,performance,time,time,1507,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:649,reliability,doe,does,649,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:795,reliability,doe,does,795,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:205,safety,updat,updated,205,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:354,safety,updat,updated,354,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1051,safety,updat,updated,1051,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1338,safety,error,error,1338,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1545,safety,updat,updated,1545,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:205,security,updat,updated,205,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:354,security,updat,updated,354,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1051,security,updat,updated,1051,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1545,security,updat,updated,1545,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:1338,usability,error,error,1338,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:109,deployability,updat,update,109,Thanks for your comments @ellert. I'm going through the how d3.v3 -> d3.v4 affects jsMVA rights now and will update your PR with the results. This one I will close.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:109,safety,updat,update,109,Thanks for your comments @ellert. I'm going through the how d3.v3 -> d3.v4 affects jsMVA rights now and will update your PR with the results. This one I will close.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:109,security,updat,update,109,Thanks for your comments @ellert. I'm going through the how d3.v3 -> d3.v4 affects jsMVA rights now and will update your PR with the results. This one I will close.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2353:158,usability,close,close,158,Thanks for your comments @ellert. I'm going through the how d3.v3 -> d3.v4 affects jsMVA rights now and will update your PR with the results. This one I will close.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2353
https://github.com/root-project/root/pull/2356:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2356
https://github.com/root-project/root/pull/2356:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2356
https://github.com/root-project/root/pull/2358:34,availability,failur,failure,34,"@phsft-bot build again - is that ""failure"" real?!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2358:11,deployability,build,build,11,"@phsft-bot build again - is that ""failure"" real?!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2358:34,deployability,fail,failure,34,"@phsft-bot build again - is that ""failure"" real?!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2358:34,performance,failur,failure,34,"@phsft-bot build again - is that ""failure"" real?!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2358:34,reliability,fail,failure,34,"@phsft-bot build again - is that ""failure"" real?!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2358:33,availability,failur,failure,33,win git clone issue; the earlier failure was an infrastructure issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2358:33,deployability,fail,failure,33,win git clone issue; the earlier failure was an infrastructure issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2358:48,deployability,infrastructur,infrastructure,48,win git clone issue; the earlier failure was an infrastructure issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2358:33,performance,failur,failure,33,win git clone issue; the earlier failure was an infrastructure issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2358:33,reliability,fail,failure,33,win git clone issue; the earlier failure was an infrastructure issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2358
https://github.com/root-project/root/pull/2360:11,deployability,build,build,11,@phsft-bot build with -Dctest_test_exclude_none=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:11,deployability,build,build,11,@phsft-bot build with flags -Dctest_test_exclude_none=On -Dimt=ON -Dccache=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:263,availability,Operat,Operation,263,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:538,availability,Operat,Operation,538,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:141,energy efficiency,Optim,OptimizationLevel,141,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:709,energy efficiency,optim,optimizer,709,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:1102,energy efficiency,optim,optimize,1102,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:141,performance,Optimiz,OptimizationLevel,141,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:175,performance,time,time,175,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:236,performance,time,time,236,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:457,performance,execution time,execution time,457,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:709,performance,optimiz,optimizer,709,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:1102,performance,optimiz,optimize,1102,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:1089,reliability,pra,pragma,1089,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:1226,reliability,pra,pragma,1226,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:507,security,ident,identical,507,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 2 | 5 | 5. exe | 27 | 26 | 24. *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang). O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics. Operation | O0 | O1 | O2. ----|---|---|-------. jit | 1 | 2 | 5. exe | 29 | 66 | 25. *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2. ----|---|---|-------. dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s. dataframe/df007_snapshot.C | 9s | 21s | 14s. geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:7,usability,interact,interactive,7,In the interactive mode (for the na49.C) type of macro do we have a mean to check and print on a regular basis (every minutes) that the compilation is 'making progress'?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:159,usability,progress,progress,159,In the interactive mode (for the na49.C) type of macro do we have a mean to check and print on a regular basis (every minutes) that the compilation is 'making progress'?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:14,usability,progress,progress,14,You mean as a progress bar? 'Cause I am *sure* that clang is making progress - I doubt that have a `if (opt == O2) sleep(120)` ;-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:68,usability,progress,progress,68,You mean as a progress bar? 'Cause I am *sure* that clang is making progress - I doubt that have a `if (opt == O2) sleep(120)` ;-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:28,deployability,version,version,28,"I am also sure that in some version of clang (and gcc) there will be a bug leading to an infinite loop on very specific code ... But yes, the point is to reassure the user that something is happening, as opposed to hanging on opening the source file for example, or being stuck looping in their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:28,integrability,version,version,28,"I am also sure that in some version of clang (and gcc) there will be a bug leading to an infinite loop on very specific code ... But yes, the point is to reassure the user that something is happening, as opposed to hanging on opening the source file for example, or being stuck looping in their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:111,interoperability,specif,specific,111,"I am also sure that in some version of clang (and gcc) there will be a bug leading to an infinite loop on very specific code ... But yes, the point is to reassure the user that something is happening, as opposed to hanging on opening the source file for example, or being stuck looping in their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:28,modifiability,version,version,28,"I am also sure that in some version of clang (and gcc) there will be a bug leading to an infinite loop on very specific code ... But yes, the point is to reassure the user that something is happening, as opposed to hanging on opening the source file for example, or being stuck looping in their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2360:167,usability,user,user,167,"I am also sure that in some version of clang (and gcc) there will be a bug leading to an infinite loop on very specific code ... But yes, the point is to reassure the user that something is happening, as opposed to hanging on opening the source file for example, or being stuck looping in their code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2360
https://github.com/root-project/root/pull/2361:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:73,deployability,depend,dependencies,73,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:215,deployability,depend,dependent,215,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:260,deployability,integr,integrate,260,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:73,integrability,depend,dependencies,73,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:215,integrability,depend,dependent,215,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:260,integrability,integr,integrate,260,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:260,interoperability,integr,integrate,260,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:73,modifiability,depend,dependencies,73,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:215,modifiability,depend,dependent,215,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:260,modifiability,integr,integrate,260,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:260,reliability,integr,integrate,260,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:73,safety,depend,dependencies,73,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:215,safety,depend,dependent,215,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:260,security,integr,integrate,260,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:73,testability,depend,dependencies,73,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:215,testability,depend,dependent,215,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:260,testability,integr,integrate,260,"@pcanal After three hours looking into the depth of `TFile.cxx` and it's dependencies: I would refrain from changing there too much. The method calls directly the very low-level IO functions (`frombuf` and friends) dependent on C-style mechanics, which do not integrate nicely with smart pointers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:105,availability,down,down,105,"In this context, the smart-ptr could stay just within the scope of this routine and pass the raw pointer down to the callees ... which is completely semantically correct since those routine do not take ownership of the buffers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:72,integrability,rout,routine,72,"In this context, the smart-ptr could stay just within the scope of this routine and pass the raw pointer down to the callees ... which is completely semantically correct since those routine do not take ownership of the buffers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:182,integrability,rout,routine,182,"In this context, the smart-ptr could stay just within the scope of this routine and pass the raw pointer down to the callees ... which is completely semantically correct since those routine do not take ownership of the buffers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:219,integrability,buffer,buffers,219,"In this context, the smart-ptr could stay just within the scope of this routine and pass the raw pointer down to the callees ... which is completely semantically correct since those routine do not take ownership of the buffers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:149,interoperability,semant,semantically,149,"In this context, the smart-ptr could stay just within the scope of this routine and pass the raw pointer down to the callees ... which is completely semantically correct since those routine do not take ownership of the buffers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:138,safety,compl,completely,138,"In this context, the smart-ptr could stay just within the scope of this routine and pass the raw pointer down to the callees ... which is completely semantically correct since those routine do not take ownership of the buffers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:138,security,compl,completely,138,"In this context, the smart-ptr could stay just within the scope of this routine and pass the raw pointer down to the callees ... which is completely semantically correct since those routine do not take ownership of the buffers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:8,testability,context,context,8,"In this context, the smart-ptr could stay just within the scope of this routine and pass the raw pointer down to the callees ... which is completely semantically correct since those routine do not take ownership of the buffers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:41,deployability,version,version,41,"@pcanal I've pushed in a second commit a version with smart pointers. Actually, for me it does not seem to improve the code quality. However, if you prefer this, I'll squash the commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:41,integrability,version,version,41,"@pcanal I've pushed in a second commit a version with smart pointers. Actually, for me it does not seem to improve the code quality. However, if you prefer this, I'll squash the commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:41,modifiability,version,version,41,"@pcanal I've pushed in a second commit a version with smart pointers. Actually, for me it does not seem to improve the code quality. However, if you prefer this, I'll squash the commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:90,reliability,doe,does,90,"@pcanal I've pushed in a second commit a version with smart pointers. Actually, for me it does not seem to improve the code quality. However, if you prefer this, I'll squash the commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:149,usability,prefer,prefer,149,"@pcanal I've pushed in a second commit a version with smart pointers. Actually, for me it does not seem to improve the code quality. However, if you prefer this, I'll squash the commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:151,availability,state,statements,151,"> ctually, for me it does not seem to improve the code quality. The advantage is that the next time we refactor the code we will not forget the delete statements (this is what happened here) and make it clearer that the ownership is not delegated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:151,integrability,state,statements,151,"> ctually, for me it does not seem to improve the code quality. The advantage is that the next time we refactor the code we will not forget the delete statements (this is what happened here) and make it clearer that the ownership is not delegated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:103,modifiability,refact,refactor,103,"> ctually, for me it does not seem to improve the code quality. The advantage is that the next time we refactor the code we will not forget the delete statements (this is what happened here) and make it clearer that the ownership is not delegated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:95,performance,time,time,95,"> ctually, for me it does not seem to improve the code quality. The advantage is that the next time we refactor the code we will not forget the delete statements (this is what happened here) and make it clearer that the ownership is not delegated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:103,performance,refactor,refactor,103,"> ctually, for me it does not seem to improve the code quality. The advantage is that the next time we refactor the code we will not forget the delete statements (this is what happened here) and make it clearer that the ownership is not delegated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:21,reliability,doe,does,21,"> ctually, for me it does not seem to improve the code quality. The advantage is that the next time we refactor the code we will not forget the delete statements (this is what happened here) and make it clearer that the ownership is not delegated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:203,usability,clear,clearer,203,"> ctually, for me it does not seem to improve the code quality. The advantage is that the next time we refactor the code we will not forget the delete statements (this is what happened here) and make it clearer that the ownership is not delegated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:22,deployability,infrastructur,infrastructure,22,@stwunsch I think the infrastructure failed here (was using stale rootspi from http://root.cern). This commit broke C++11 builds because the backport of `std::make_unique` in ROOT doesn't work in the case you used. I've reverted the commit for now. We can add it back once we fix `RMakeUnique.hxx`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:37,deployability,fail,failed,37,@stwunsch I think the infrastructure failed here (was using stale rootspi from http://root.cern). This commit broke C++11 builds because the backport of `std::make_unique` in ROOT doesn't work in the case you used. I've reverted the commit for now. We can add it back once we fix `RMakeUnique.hxx`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:122,deployability,build,builds,122,@stwunsch I think the infrastructure failed here (was using stale rootspi from http://root.cern). This commit broke C++11 builds because the backport of `std::make_unique` in ROOT doesn't work in the case you used. I've reverted the commit for now. We can add it back once we fix `RMakeUnique.hxx`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:37,reliability,fail,failed,37,@stwunsch I think the infrastructure failed here (was using stale rootspi from http://root.cern). This commit broke C++11 builds because the backport of `std::make_unique` in ROOT doesn't work in the case you used. I've reverted the commit for now. We can add it back once we fix `RMakeUnique.hxx`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2361:180,reliability,doe,doesn,180,@stwunsch I think the infrastructure failed here (was using stale rootspi from http://root.cern). This commit broke C++11 builds because the backport of `std::make_unique` in ROOT doesn't work in the case you used. I've reverted the commit for now. We can add it back once we fix `RMakeUnique.hxx`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2361
https://github.com/root-project/root/pull/2362:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:101,deployability,log,logic,101,@Axel-Naumann @pcanal Can we be sure that this does not break something? Can someone follow the full logic behind this member?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:47,reliability,doe,does,47,@Axel-Naumann @pcanal Can we be sure that this does not break something? Can someone follow the full logic behind this member?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:101,safety,log,logic,101,@Axel-Naumann @pcanal Can we be sure that this does not break something? Can someone follow the full logic behind this member?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:101,security,log,logic,101,@Axel-Naumann @pcanal Can we be sure that this does not break something? Can someone follow the full logic behind this member?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:101,testability,log,logic,101,@Axel-Naumann @pcanal Can we be sure that this does not break something? Can someone follow the full logic behind this member?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:64,availability,error,errors,64,"@Axel-Naumann Is it ported as expected? Please check for stupid errors ;). valgrind output with `unique_ptr`:. ```. ==2452== LEAK SUMMARY:. ==2452== definitely lost: 24 bytes in 2 blocks. ==2452== indirectly lost: 56 bytes in 1 blocks. ==2452== possibly lost: 61,086 bytes in 608 blocks. ==2452== still reachable: 75,293,328 bytes in 101,066 blocks. ==2452== of which reachable via heuristic:. ==2452== newarray : 25,424 bytes in 49 blocks. ==2452== multipleinheritance: 2,128 bytes in 3 blocks. ==2452== suppressed: 6,405,623 bytes in 65,951 blocks. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:64,performance,error,errors,64,"@Axel-Naumann Is it ported as expected? Please check for stupid errors ;). valgrind output with `unique_ptr`:. ```. ==2452== LEAK SUMMARY:. ==2452== definitely lost: 24 bytes in 2 blocks. ==2452== indirectly lost: 56 bytes in 1 blocks. ==2452== possibly lost: 61,086 bytes in 608 blocks. ==2452== still reachable: 75,293,328 bytes in 101,066 blocks. ==2452== of which reachable via heuristic:. ==2452== newarray : 25,424 bytes in 49 blocks. ==2452== multipleinheritance: 2,128 bytes in 3 blocks. ==2452== suppressed: 6,405,623 bytes in 65,951 blocks. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:64,safety,error,errors,64,"@Axel-Naumann Is it ported as expected? Please check for stupid errors ;). valgrind output with `unique_ptr`:. ```. ==2452== LEAK SUMMARY:. ==2452== definitely lost: 24 bytes in 2 blocks. ==2452== indirectly lost: 56 bytes in 1 blocks. ==2452== possibly lost: 61,086 bytes in 608 blocks. ==2452== still reachable: 75,293,328 bytes in 101,066 blocks. ==2452== of which reachable via heuristic:. ==2452== newarray : 25,424 bytes in 49 blocks. ==2452== multipleinheritance: 2,128 bytes in 3 blocks. ==2452== suppressed: 6,405,623 bytes in 65,951 blocks. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:64,usability,error,errors,64,"@Axel-Naumann Is it ported as expected? Please check for stupid errors ;). valgrind output with `unique_ptr`:. ```. ==2452== LEAK SUMMARY:. ==2452== definitely lost: 24 bytes in 2 blocks. ==2452== indirectly lost: 56 bytes in 1 blocks. ==2452== possibly lost: 61,086 bytes in 608 blocks. ==2452== still reachable: 75,293,328 bytes in 101,066 blocks. ==2452== of which reachable via heuristic:. ==2452== newarray : 25,424 bytes in 49 blocks. ==2452== multipleinheritance: 2,128 bytes in 3 blocks. ==2452== suppressed: 6,405,623 bytes in 65,951 blocks. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:27,deployability,build,build,27,"Squashed dev commits, I'll build it a last time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:43,performance,time,time,43,"Squashed dev commits, I'll build it a last time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2362:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2362
https://github.com/root-project/root/pull/2367:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2367
https://github.com/root-project/root/pull/2367:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2367
https://github.com/root-project/root/pull/2371:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2371
https://github.com/root-project/root/pull/2375:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:45,deployability,fail,fails,45,Maybe we should do this only when LoadModule fails with default include path?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:34,energy efficiency,Load,LoadModule,34,Maybe we should do this only when LoadModule fails with default include path?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:34,performance,Load,LoadModule,34,Maybe we should do this only when LoadModule fails with default include path?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:45,reliability,fail,fails,45,Maybe we should do this only when LoadModule fails with default include path?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:15,deployability,fail,failing,15,"Trees are also failing in nightlies, https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/lastBuild/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/. so these I think is unrelated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:123,deployability,BUILD,BUILDTYPE,123,"Trees are also failing in nightlies, https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/lastBuild/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/. so these I think is unrelated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:15,reliability,fail,failing,15,"Trees are also failing in nightlies, https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/lastBuild/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/. so these I think is unrelated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:165,safety,test,testReport,165,"Trees are also failing in nightlies, https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/lastBuild/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/. so these I think is unrelated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:165,testability,test,testReport,165,"Trees are also failing in nightlies, https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/lastBuild/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/. so these I think is unrelated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2375:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2375
https://github.com/root-project/root/pull/2376:27,safety,review,review,27,@lmoneta @stwunsch Can you review this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2376
https://github.com/root-project/root/pull/2376:27,testability,review,review,27,@lmoneta @stwunsch Can you review this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2376
https://github.com/root-project/root/pull/2376:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2376
https://github.com/root-project/root/pull/2378:0,deployability,Depend,Depends,0,Depends on PR #2371.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:0,integrability,Depend,Depends,0,Depends on PR #2371.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:0,modifiability,Depend,Depends,0,Depends on PR #2371.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:0,safety,Depend,Depends,0,Depends on PR #2371.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:0,testability,Depend,Depends,0,Depends on PR #2371.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:14,availability,failur,failures,14,"Sorry, latest failures are probably me trying to make Jenkins rebase rather than checkout the merge head from GitHub. Please re-run if needed. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:14,deployability,fail,failures,14,"Sorry, latest failures are probably me trying to make Jenkins rebase rather than checkout the merge head from GitHub. Please re-run if needed. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:14,performance,failur,failures,14,"Sorry, latest failures are probably me trying to make Jenkins rebase rather than checkout the merge head from GitHub. Please re-run if needed. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:14,reliability,fail,failures,14,"Sorry, latest failures are probably me trying to make Jenkins rebase rather than checkout the merge head from GitHub. Please re-run if needed. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:58,deployability,build,build,58,"Thanks, @vgvassilev. It looks much better now. Let's just build with `clad=OFF` just in case and then it can go in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2378:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2378
https://github.com/root-project/root/pull/2379:34,safety,review,review,34,@stwunsch @lmoneta Can you please review this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:34,testability,review,review,34,@stwunsch @lmoneta Can you please review this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:55,availability,down,downloaded,55,I made one mistake. I tested the methodDL with locally downloaded tmva_class_example.root file. I forgot to change that to use the one on http://root.cern.ch/files/tmva_class_example.root. I guess that might be the cause of the test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:233,availability,failur,failure,233,I made one mistake. I tested the methodDL with locally downloaded tmva_class_example.root file. I forgot to change that to use the one on http://root.cern.ch/files/tmva_class_example.root. I guess that might be the cause of the test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:233,deployability,fail,failure,233,I made one mistake. I tested the methodDL with locally downloaded tmva_class_example.root file. I forgot to change that to use the one on http://root.cern.ch/files/tmva_class_example.root. I guess that might be the cause of the test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:233,performance,failur,failure,233,I made one mistake. I tested the methodDL with locally downloaded tmva_class_example.root file. I forgot to change that to use the one on http://root.cern.ch/files/tmva_class_example.root. I guess that might be the cause of the test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:233,reliability,fail,failure,233,I made one mistake. I tested the methodDL with locally downloaded tmva_class_example.root file. I forgot to change that to use the one on http://root.cern.ch/files/tmva_class_example.root. I guess that might be the cause of the test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:22,safety,test,tested,22,I made one mistake. I tested the methodDL with locally downloaded tmva_class_example.root file. I forgot to change that to use the one on http://root.cern.ch/files/tmva_class_example.root. I guess that might be the cause of the test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:228,safety,test,test,228,I made one mistake. I tested the methodDL with locally downloaded tmva_class_example.root file. I forgot to change that to use the one on http://root.cern.ch/files/tmva_class_example.root. I guess that might be the cause of the test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:22,testability,test,tested,22,I made one mistake. I tested the methodDL with locally downloaded tmva_class_example.root file. I forgot to change that to use the one on http://root.cern.ch/files/tmva_class_example.root. I guess that might be the cause of the test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:228,testability,test,test,228,I made one mistake. I tested the methodDL with locally downloaded tmva_class_example.root file. I forgot to change that to use the one on http://root.cern.ch/files/tmva_class_example.root. I guess that might be the cause of the test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:12,deployability,updat,updated,12,@stwunsch I updated the PR with the correction. Can you trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:68,deployability,build,build,68,@stwunsch I updated the PR with the correction. Can you trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:12,safety,updat,updated,12,@stwunsch I updated the PR with the correction. Can you trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:12,security,updat,updated,12,@stwunsch I updated the PR with the correction. Can you trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2379:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2379
https://github.com/root-project/root/pull/2380:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2380
https://github.com/root-project/root/pull/2380:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2380
https://github.com/root-project/root/pull/2380:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2380
https://github.com/root-project/root/pull/2380:23,deployability,version,version,23,@yamaguchi1024 I think version of this already landed. I am closing this now but feel free to reopen if needed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2380
https://github.com/root-project/root/pull/2380:23,integrability,version,version,23,@yamaguchi1024 I think version of this already landed. I am closing this now but feel free to reopen if needed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2380
https://github.com/root-project/root/pull/2380:23,modifiability,version,version,23,@yamaguchi1024 I think version of this already landed. I am closing this now but feel free to reopen if needed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2380
https://github.com/root-project/root/pull/2381:199,deployability,patch,patch,199,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:611,deployability,patch,patch,611,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1076,deployability,version,version,1076,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1156,deployability,releas,released,1156,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1172,deployability,version,version,1172,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1190,deployability,patch,patches,1190,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1146,energy efficiency,current,currently,1146,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1076,integrability,version,version,1076,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1172,integrability,version,version,1172,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1076,modifiability,version,version,1076,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1172,modifiability,version,version,1172,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:199,safety,patch,patch,199,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:221,safety,test,test,221,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:284,safety,test,test,284,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:347,safety,test,test,347,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:409,safety,test,test,409,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:472,safety,test,test,472,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:537,safety,test,test,537,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:611,safety,patch,patch,611,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:633,safety,test,test,633,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:696,safety,test,test,696,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:759,safety,test,test,759,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:822,safety,test,test,822,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:884,safety,test,test,884,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1190,safety,patch,patches,1190,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:92,security,access,accessing-tref-data-from-multiple-threads,92,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:199,security,patch,patch,199,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:611,security,patch,patch,611,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1190,security,patch,patches,1190,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:221,testability,test,test,221,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:284,testability,test,test,284,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:347,testability,test,test,347,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:409,testability,test,test,409,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:472,testability,test,test,472,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:537,testability,test,test,537,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:633,testability,test,test,633,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:696,testability,test,test,696,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:759,testability,test,test,759,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:822,testability,test,test,822,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:884,testability,test,test,884,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:962,usability,confirm,confirm,962,Thanks @pcanal for addressing the issue from https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417/10. This indeed greatly improves the situation:. With your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 5.17034ms. $ ./root-test 2. Using 2 thread(s). Run finished in 5.21786ms. $ ./root-test 4. Using 4 thread(s). Run finished in 9.2026ms. $ ./root-test 8. Using 8 thread(s). Run finished in 21.4157ms. $ ./root-test 16. Using 16 thread(s). Run finished in 36.0558ms. $ ./root-test 32. Using 32 thread(s). Run finished in 73.1081ms. ```. Without your patch:. ```. $ ./root-test 1. Using 1 thread(s). Run finished in 11.3427ms. $ ./root-test 2. Using 2 thread(s). Run finished in 89.8777ms. $ ./root-test 4. Using 4 thread(s). Run finished in 419.919ms. $ ./root-test 8. Using 8 thread(s). Run finished in 2541.3ms. $ ./root-test 16. Using 16 thread(s). Run finished in 7807.43ms. ```. @Tmplt Could you confirm that this also resolves the issue in our framework? @pcanal Assuming this would be merged - in which ROOT version would this fix land? Would it be possible to backport it to a currently released stable version via its `-patches` branch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1104,integrability,messag,message,1104,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:. ```. #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so. #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1104,interoperability,messag,message,1104,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:. ```. #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so. #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:30,performance,perform,performance,30,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:. ```. #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so. #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:150,performance,lock,lock,150,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:. ```. #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so. #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1166,safety,test,test,1166,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:. ```. #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so. #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:150,security,lock,lock,150,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:. ```. #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so. #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:1166,testability,test,test,1166,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:. ```. #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so. #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:30,usability,perform,performance,30,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:. ```. #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0. #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so. #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so. ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:118,energy efficiency,reduc,reduce,118,"The lock in ~TObject is necessary but can be side-stepped in two 'complementary' ways. One is to try to significantly reduce the number of objects created and destructed by re-using them when possible (for example by using a TClonesArray or other means). Second is to disable for specific object the RecursiveRemove mechanism. This mechanism is used to implement shared ownership of objects (this was implemented 20 years ago when shared_ptr, let alone class template were only mere wishes). For example this is used for the histogram deleted explicitly by users to contact the TFile that co-own them so that the TFile can be deleted. If you know that are you now relying on this mechanism (for example you object have no implicit ownership sharing or they are histograms but they are always detached from their TFile), then you can execute:. ```. myobj->ResetBit(kMustCleanup);. ```. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:280,interoperability,specif,specific,280,"The lock in ~TObject is necessary but can be side-stepped in two 'complementary' ways. One is to try to significantly reduce the number of objects created and destructed by re-using them when possible (for example by using a TClonesArray or other means). Second is to disable for specific object the RecursiveRemove mechanism. This mechanism is used to implement shared ownership of objects (this was implemented 20 years ago when shared_ptr, let alone class template were only mere wishes). For example this is used for the histogram deleted explicitly by users to contact the TFile that co-own them so that the TFile can be deleted. If you know that are you now relying on this mechanism (for example you object have no implicit ownership sharing or they are histograms but they are always detached from their TFile), then you can execute:. ```. myobj->ResetBit(kMustCleanup);. ```. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:363,interoperability,share,shared,363,"The lock in ~TObject is necessary but can be side-stepped in two 'complementary' ways. One is to try to significantly reduce the number of objects created and destructed by re-using them when possible (for example by using a TClonesArray or other means). Second is to disable for specific object the RecursiveRemove mechanism. This mechanism is used to implement shared ownership of objects (this was implemented 20 years ago when shared_ptr, let alone class template were only mere wishes). For example this is used for the histogram deleted explicitly by users to contact the TFile that co-own them so that the TFile can be deleted. If you know that are you now relying on this mechanism (for example you object have no implicit ownership sharing or they are histograms but they are always detached from their TFile), then you can execute:. ```. myobj->ResetBit(kMustCleanup);. ```. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:4,performance,lock,lock,4,"The lock in ~TObject is necessary but can be side-stepped in two 'complementary' ways. One is to try to significantly reduce the number of objects created and destructed by re-using them when possible (for example by using a TClonesArray or other means). Second is to disable for specific object the RecursiveRemove mechanism. This mechanism is used to implement shared ownership of objects (this was implemented 20 years ago when shared_ptr, let alone class template were only mere wishes). For example this is used for the histogram deleted explicitly by users to contact the TFile that co-own them so that the TFile can be deleted. If you know that are you now relying on this mechanism (for example you object have no implicit ownership sharing or they are histograms but they are always detached from their TFile), then you can execute:. ```. myobj->ResetBit(kMustCleanup);. ```. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:66,safety,compl,complementary,66,"The lock in ~TObject is necessary but can be side-stepped in two 'complementary' ways. One is to try to significantly reduce the number of objects created and destructed by re-using them when possible (for example by using a TClonesArray or other means). Second is to disable for specific object the RecursiveRemove mechanism. This mechanism is used to implement shared ownership of objects (this was implemented 20 years ago when shared_ptr, let alone class template were only mere wishes). For example this is used for the histogram deleted explicitly by users to contact the TFile that co-own them so that the TFile can be deleted. If you know that are you now relying on this mechanism (for example you object have no implicit ownership sharing or they are histograms but they are always detached from their TFile), then you can execute:. ```. myobj->ResetBit(kMustCleanup);. ```. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:4,security,lock,lock,4,"The lock in ~TObject is necessary but can be side-stepped in two 'complementary' ways. One is to try to significantly reduce the number of objects created and destructed by re-using them when possible (for example by using a TClonesArray or other means). Second is to disable for specific object the RecursiveRemove mechanism. This mechanism is used to implement shared ownership of objects (this was implemented 20 years ago when shared_ptr, let alone class template were only mere wishes). For example this is used for the histogram deleted explicitly by users to contact the TFile that co-own them so that the TFile can be deleted. If you know that are you now relying on this mechanism (for example you object have no implicit ownership sharing or they are histograms but they are always detached from their TFile), then you can execute:. ```. myobj->ResetBit(kMustCleanup);. ```. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:66,security,compl,complementary,66,"The lock in ~TObject is necessary but can be side-stepped in two 'complementary' ways. One is to try to significantly reduce the number of objects created and destructed by re-using them when possible (for example by using a TClonesArray or other means). Second is to disable for specific object the RecursiveRemove mechanism. This mechanism is used to implement shared ownership of objects (this was implemented 20 years ago when shared_ptr, let alone class template were only mere wishes). For example this is used for the histogram deleted explicitly by users to contact the TFile that co-own them so that the TFile can be deleted. If you know that are you now relying on this mechanism (for example you object have no implicit ownership sharing or they are histograms but they are always detached from their TFile), then you can execute:. ```. myobj->ResetBit(kMustCleanup);. ```. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:104,security,sign,significantly,104,"The lock in ~TObject is necessary but can be side-stepped in two 'complementary' ways. One is to try to significantly reduce the number of objects created and destructed by re-using them when possible (for example by using a TClonesArray or other means). Second is to disable for specific object the RecursiveRemove mechanism. This mechanism is used to implement shared ownership of objects (this was implemented 20 years ago when shared_ptr, let alone class template were only mere wishes). For example this is used for the histogram deleted explicitly by users to contact the TFile that co-own them so that the TFile can be deleted. If you know that are you now relying on this mechanism (for example you object have no implicit ownership sharing or they are histograms but they are always detached from their TFile), then you can execute:. ```. myobj->ResetBit(kMustCleanup);. ```. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:557,usability,user,users,557,"The lock in ~TObject is necessary but can be side-stepped in two 'complementary' ways. One is to try to significantly reduce the number of objects created and destructed by re-using them when possible (for example by using a TClonesArray or other means). Second is to disable for specific object the RecursiveRemove mechanism. This mechanism is used to implement shared ownership of objects (this was implemented 20 years ago when shared_ptr, let alone class template were only mere wishes). For example this is used for the histogram deleted explicitly by users to contact the TFile that co-own them so that the TFile can be deleted. If you know that are you now relying on this mechanism (for example you object have no implicit ownership sharing or they are histograms but they are always detached from their TFile), then you can execute:. ```. myobj->ResetBit(kMustCleanup);. ```. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:53,deployability,releas,released,53,"> Would it be possible to backport it to a currently released stable version via its -patches branch? Yes, it will be added to 6.14. [So it will in v6.14/04 and 6.16/00.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:69,deployability,version,version,69,"> Would it be possible to backport it to a currently released stable version via its -patches branch? Yes, it will be added to 6.14. [So it will in v6.14/04 and 6.16/00.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:86,deployability,patch,patches,86,"> Would it be possible to backport it to a currently released stable version via its -patches branch? Yes, it will be added to 6.14. [So it will in v6.14/04 and 6.16/00.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:43,energy efficiency,current,currently,43,"> Would it be possible to backport it to a currently released stable version via its -patches branch? Yes, it will be added to 6.14. [So it will in v6.14/04 and 6.16/00.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:69,integrability,version,version,69,"> Would it be possible to backport it to a currently released stable version via its -patches branch? Yes, it will be added to 6.14. [So it will in v6.14/04 and 6.16/00.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:69,modifiability,version,version,69,"> Would it be possible to backport it to a currently released stable version via its -patches branch? Yes, it will be added to 6.14. [So it will in v6.14/04 and 6.16/00.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:86,safety,patch,patches,86,"> Would it be possible to backport it to a currently released stable version via its -patches branch? Yes, it will be added to 6.14. [So it will in v6.14/04 and 6.16/00.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:86,security,patch,patches,86,"> Would it be possible to backport it to a currently released stable version via its -patches branch? Yes, it will be added to 6.14. [So it will in v6.14/04 and 6.16/00.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2381:44,usability,help,help,44,"@pcanal great, thank you very much for your help - we'll try out the `kMustCleanup` for further improvements and are looking forward to ROOT 6.14/04.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2381
https://github.com/root-project/root/pull/2382:60,performance,time,time,60,Looks like we are cloning from CERN and there wasn't enough time for changes to propagate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2382
https://github.com/root-project/root/pull/2382:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2382
https://github.com/root-project/root/pull/2382:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2382
https://github.com/root-project/root/pull/2386:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2386
https://github.com/root-project/root/pull/2386:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2386
https://github.com/root-project/root/pull/2386:90,safety,test,testing,90,We should probably add a [rootbench](https://github.com/root-project/rootbench) benchmark testing the improvement.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2386
https://github.com/root-project/root/pull/2386:90,testability,test,testing,90,We should probably add a [rootbench](https://github.com/root-project/rootbench) benchmark testing the improvement.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2386
https://github.com/root-project/root/pull/2387:11,deployability,build,build,11,@phsft-bot build only on centos7/gcc7,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2387
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build with flags -Dminimal=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_INSTALL_PREFIX=/test-root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:52,safety,test,test-root,52,@phsft-bot build with flags -DCMAKE_INSTALL_PREFIX=/test-root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:52,testability,test,test-root,52,@phsft-bot build with flags -DCMAKE_INSTALL_PREFIX=/test-root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF -DCMAKE_INSTALL_PREFIX=/root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2388:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF -DCMAKE_INSTALL_PREFIX=/root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2388
https://github.com/root-project/root/pull/2389:11,deployability,build,build,11,@phsft-bot build with -Dimt=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:11,deployability,build,build,11,@phsft-bot build with flags -Dimt=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:11,deployability,build,build,11,"@phsft-bot build again, please, now that I fixed a couple of things in jenkins/ctest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:51,integrability,coupl,couple,51,"@phsft-bot build again, please, now that I fixed a couple of things in jenkins/ctest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:51,modifiability,coupl,couple,51,"@phsft-bot build again, please, now that I fixed a couple of things in jenkins/ctest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:51,testability,coupl,couple,51,"@phsft-bot build again, please, now that I fixed a couple of things in jenkins/ctest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:36,availability,failur,failure,36,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:93,availability,down,down,93,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:12,deployability,fail,fail,12,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:36,deployability,fail,failure,36,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:36,performance,failur,failure,36,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:51,performance,parallel,parallel,51,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:12,reliability,fail,fail,12,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:36,reliability,fail,failure,36,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:107,safety,test,test,107,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2389:107,testability,test,test,107,Expected to fail due to a sneaky MT failure in the parallel gradient evaluation (tracking it down) and the test in PR https://github.com/root-project/roottest/pull/211,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2389
https://github.com/root-project/root/pull/2391:22,availability,failur,failure,22,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1396,availability,error,error,1396,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1566,availability,error,error,1566,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:22,deployability,fail,failure,22,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:76,deployability,Build,Building,76,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:100,deployability,build,build,100,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:134,deployability,build,build,134,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:221,deployability,build,build,221,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:255,deployability,build,build,255,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:261,deployability,build,build,261,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1442,deployability,version,version,1442,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1482,deployability,build,build,1482,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1516,deployability,build,build,1516,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1522,deployability,build,build,1522,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1601,deployability,version,version,1601,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1668,deployability,fail,failed,1668,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1770,deployability,build,build,1770,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1804,deployability,build,build,1804,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:145,energy efficiency,core,core,145,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:267,energy efficiency,core,core,267,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1528,energy efficiency,core,core,1528,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1442,integrability,version,version,1442,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1601,integrability,version,version,1601,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1442,modifiability,version,version,1442,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1601,modifiability,version,version,1601,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:22,performance,failur,failure,22,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
