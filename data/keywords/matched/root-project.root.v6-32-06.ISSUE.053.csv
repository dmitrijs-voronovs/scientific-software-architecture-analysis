id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/9106:510,availability,error,error,510,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:841,availability,error,errors,841,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:961,availability,error,errors,961,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1788,availability,Operat,Operating,1788,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1905,availability,error,errors,1905,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1973,availability,error,error,1973,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1982,availability,Error,Error,1982,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:2132,availability,avail,available,2132,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1768,deployability,version,version,1768,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1534,energy efficiency,Draw,Draw,1534,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:329,integrability,event,event,329,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1385,integrability,Filter,Filter,1385,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1768,integrability,version,version,1768,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1768,modifiability,version,version,1768,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:0,performance,Error,Error,0,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:243,performance,error,error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy,243,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:442,performance,error,errors,442,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:459,performance,Error,Error,459,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:510,performance,error,error,510,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:841,performance,error,errors,841,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:961,performance,error,errors,961,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1905,performance,error,errors,1905,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1973,performance,error,error,1973,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1982,performance,Error,Error,1982,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:2044,reliability,doe,does,2044,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:2132,reliability,availab,available,2132,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:0,safety,Error,Error,0,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:243,safety,error,error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy,243,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:442,safety,error,errors,442,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:459,safety,Error,Error,459,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:510,safety,error,error,510,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:841,safety,error,errors,841,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:961,safety,error,errors,961,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1542,safety,input,input,1542,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1662,safety,Test,Tested,1662,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1905,safety,error,errors,1905,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1973,safety,error,error,1973,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1982,safety,Error,Error,1982,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:2132,safety,avail,available,2132,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:2132,security,availab,available,2132,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1662,testability,Test,Tested,1662,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1846,testability,context,context,1846,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:0,usability,Error,Error,0,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:243,usability,error,error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy,243,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:442,usability,error,errors,442,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:459,usability,Error,Error,459,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:510,usability,error,error,510,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:561,usability,behavi,behavior,561,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:841,usability,error,errors,841,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:925,usability,behavi,behavior,925,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:948,usability,behavi,behavior,948,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:961,usability,error,errors,961,"Error in <TCollectionLessSTLReader::GetCP()> in the multithreaded loop over Friend column with RDataFrame; - [] Checked for duplicates. ### Describe the bug. Origin of the issue is from the forum discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1542,usability,input,input,1542,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1861,usability,stop,stopping,1861,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1905,usability,error,errors,1905,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1973,usability,error,error,1973,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/issues/9106:1982,usability,Error,Error,1982,"m discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:. `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior? ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```. import ROOT. # Commenting MT line makes this example work. ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""). ch.Add(""test_default.root""). ch.AddFriend(""emv=lumical"", ""test_emv.root""). # Adding test_emv.root as the only one but not as a friend, also works... # ch = ROOT.TChain(""lumical""). # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\. .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ). h_emv.Draw(). input(""wait""). ```. The links for the root files:. https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup. Tested with:. `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00. 2. Operating system Centos7. 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:. `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9106
https://github.com/root-project/root/pull/9108:22,integrability,interfac,interface,22,[skip-ci] new \legacy interface; # This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter. - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9108
https://github.com/root-project/root/pull/9108:82,integrability,interfac,interface,82,[skip-ci] new \legacy interface; # This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter. - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9108
https://github.com/root-project/root/pull/9108:22,interoperability,interfac,interface,22,[skip-ci] new \legacy interface; # This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter. - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9108
https://github.com/root-project/root/pull/9108:82,interoperability,interfac,interface,82,[skip-ci] new \legacy interface; # This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter. - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9108
https://github.com/root-project/root/pull/9108:22,modifiability,interfac,interface,22,[skip-ci] new \legacy interface; # This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter. - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9108
https://github.com/root-project/root/pull/9108:82,modifiability,interfac,interface,82,[skip-ci] new \legacy interface; # This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter. - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9108
https://github.com/root-project/root/pull/9108:113,modifiability,paramet,parameter,113,[skip-ci] new \legacy interface; # This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter. - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9108
https://github.com/root-project/root/pull/9108:57,testability,Simpl,Simplifies,57,[skip-ci] new \legacy interface; # This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter. - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9108
https://github.com/root-project/root/pull/9108:57,usability,Simpl,Simplifies,57,[skip-ci] new \legacy interface; # This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter. - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9108
https://github.com/root-project/root/pull/9109:436,availability,error,error,436,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:449,availability,Error,Error,449,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:742,deployability,build,build,742,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:748,deployability,releas,release,748,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:901,deployability,build,build,901,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:907,deployability,releas,release,907,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1061,deployability,build,build,1061,"ort pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1067,deployability,releas,release,1067,"`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1242,deployability,build,build,1242,"gated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self)._",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1248,deployability,releas,release,1248," - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1373,deployability,build,build,1373,"d manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1379,deployability,releas,release,1379,"lly delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1540,deployability,build,build,1540,"s.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-package",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1546,deployability,releas,release,1546,"reDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPyth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1715,deployability,build,build,1715,"st recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 126",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1721,deployability,releas,release,1721,"nt call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:100,energy efficiency,current,currently,100,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:279,energy efficiency,current,currently,279,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:993,energy efficiency,Draw,DrawGeometry,993,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1017,energy efficiency,Draw,DrawCanvases,1017," (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1037,energy efficiency,Draw,DrawRCanvases,1037,"- Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1108,energy efficiency,Draw,DrawCanvases,1108,"working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1128,energy efficiency,draw,drawers,1128,"). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1166,energy efficiency,draw,drawer,1166,"will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.reti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1176,energy efficiency,draw,drawers,1176,"rint in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1194,energy efficiency,draw,drawer,1194,"nd prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.uncon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1201,energy efficiency,Draw,Draw,1201,"mpt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1222,energy efficiency,Draw,DrawRCanvases,1222,"k (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 supe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1289,energy efficiency,Draw,Draw,1289,"t working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1314,energy efficiency,Draw,Draw,1314,"Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1831,energy efficiency,draw,drawableObject,1831,"elf):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:2039,energy efficiency,core,core,2039,"RCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:2365,energy efficiency,core,core,2365,"02. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still ope",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:2553,energy efficiency,core,core,2553,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:2783,energy efficiency,core,core,2783,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1923,interoperability,format,format,1923,"T\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.fil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:2094,interoperability,format,format,2094,"tils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Loc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:3384,interoperability,platform,platforms,3384,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:2022,modifiability,pac,packages,2022,"ses(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. Permission",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:2348,modifiability,pac,packages,2348,"601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary fi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:2536,modifiability,pac,packages,2536,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:2766,modifiability,pac,packages,2766,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:436,performance,error,error,436,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:449,performance,Error,Error,449,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:3318,performance,time,time,3318,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:267,safety,compl,completion,267,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:414,safety,prevent,prevent,414,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:436,safety,error,error,436,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:449,safety,Error,Error,449,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:689,safety,Permiss,PermissionError,689,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:3016,safety,Permiss,PermissionError,3016,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:3044,safety,Permiss,Permission,3044,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:267,security,compl,completion,267,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:414,security,preven,prevent,414,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:705,testability,Trace,Traceback,705,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:192,usability,command,command,192,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:436,usability,error,error,436,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:449,usability,Error,Error,449,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:531,usability,help,helpers,531,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:769,usability,help,helpers,769,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:928,usability,help,helpers,928,"Fix jupyroot on Windows (supersedes #9107); - Remove unused `import pty`. - Disable stream capture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1088,usability,help,helpers,1088,"apture (currently not working on Windows). The output coming from C++ (ROOT) will only print in the command prompt and not in the notebook (to be investigated). - Disable tab completion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1269,usability,help,helpers,1269,"tion (currently not working on Windows). - Add the `delete=False` argument in `NamedTemporaryFile()` and manually delete the created file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1400,usability,help,helpers,1400,"d file to prevent the following error:. ```. Error in callback <bound method CaptureDrawnPrimitives._post_execute of <JupyROOT.helpers.utils.CaptureDrawnPrimitives object at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1567,usability,help,helpers,1567,"ect at 0x0C321C58>> (for post_execute):. ---------------------------------------------------------------------------. PermissionError Traceback (most recent call last). ~\build\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1742,usability,help,helpers,1742,"d\release\bin\JupyROOT\helpers\utils.py in _post_execute(self). 461. 462 def _post_execute(self):. --> 463 NotebookDraw(). 464. 465 def register(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in NotebookDraw(). 450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:1961,usability,close,close,1961,"450 def NotebookDraw():. 451 DrawGeometry(). --> 452 DrawCanvases(). 453 DrawRCanvases(). 454. ~\build\release\bin\JupyROOT\helpers\utils.py in DrawCanvases(). 441 drawers = GetCanvasDrawers(). 442 for drawer in drawers:. --> 443 drawer.Draw(). 444. 445 def DrawRCanvases():. ~\build\release\bin\JupyROOT\helpers\utils.py in Draw(self). 598. 599 def Draw(self):. --> 600 self._display(). 601 return 0. 602. ~\build\release\bin\JupyROOT\helpers\utils.py in _display(self). 583 self._jsDisplay(). 584 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 se",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:3068,usability,User,Users,3068,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9109:3155,usability,document,documentation,3155,"4 else:. --> 585 self._pngDisplay(). 586. 587 def GetDrawableObjects(self):. ~\build\release\bin\JupyROOT\helpers\utils.py in _pngDisplay(self). 572. 573 def _pngDisplay(self):. --> 574 img = self._getPngImage(). 575 IPython.display.display(img). 576. ~\build\release\bin\JupyROOT\helpers\utils.py in _getPngImage(self). 566 with _setIgnoreLevel(ROOT.kError):. 567 self.drawableObject.SaveAs(ofile.name). --> 568 img = IPython.display.Image(filename=ofile.name, format='png', embed=True). 569 #ofile.close(). 570 #os.unlink(ofile.name). c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata). 1229 self.retina = retina. 1230 self.unconfined = unconfined. -> 1231 super(Image, self).__init__(data=data, url=url, filename=filename,. 1232 metadata=metadata). 1233. c:\python38-32\lib\site-packages\IPython\core\display.py in __init__(self, data, url, filename, metadata). 635 self.metadata = {}. 636. --> 637 self.reload(). 638 self._check_data(). 639. c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 1261 """"""Reload the raw data from file or URL."""""". 1262 if self.embed:. -> 1263 super(Image,self).reload(). 1264 if self.retina:. 1265 self._retina_shape(). c:\python38-32\lib\site-packages\IPython\core\display.py in reload(self). 660 """"""Reload the raw data from file or URL."""""". 661 if self.filename is not None:. --> 662 with open(self.filename, self._read_flags) as f:. 663 self.data = f.read(). 664 elif self.url is not None:. PermissionError: [Errno 13] Permission denied: 'C:\\Users\\sftnight\\AppData\\Local\\Temp\\tmpk49jx00w.png'. ```. For the details, see the documentation of `NamedTemporaryFile` in [tempfile](https://docs.python.org/3/library/tempfile.html):. ```. Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9109
https://github.com/root-project/root/pull/9110:167,availability,error,error-in-pyroot-tutorial-twoscales-py,167,[skip-ci] this tutorial produced a wrong output; This tutorial didn't produce the same results as the C++ equivalent. As mentioned here:. https://root-forum.cern.ch/t/error-in-pyroot-tutorial-twoscales-py/47215/2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9110
https://github.com/root-project/root/pull/9110:167,performance,error,error-in-pyroot-tutorial-twoscales-py,167,[skip-ci] this tutorial produced a wrong output; This tutorial didn't produce the same results as the C++ equivalent. As mentioned here:. https://root-forum.cern.ch/t/error-in-pyroot-tutorial-twoscales-py/47215/2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9110
https://github.com/root-project/root/pull/9110:167,safety,error,error-in-pyroot-tutorial-twoscales-py,167,[skip-ci] this tutorial produced a wrong output; This tutorial didn't produce the same results as the C++ equivalent. As mentioned here:. https://root-forum.cern.ch/t/error-in-pyroot-tutorial-twoscales-py/47215/2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9110
https://github.com/root-project/root/pull/9110:167,usability,error,error-in-pyroot-tutorial-twoscales-py,167,[skip-ci] this tutorial produced a wrong output; This tutorial didn't produce the same results as the C++ equivalent. As mentioned here:. https://root-forum.cern.ch/t/error-in-pyroot-tutorial-twoscales-py/47215/2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9110
https://github.com/root-project/root/pull/9111:10,deployability,updat,update,10,[skip-ci] update to doxygen 1.9.3; Update Doxyfile to doxygen 1.9.3 (doxygen -u).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9111
https://github.com/root-project/root/pull/9111:35,deployability,Updat,Update,35,[skip-ci] update to doxygen 1.9.3; Update Doxyfile to doxygen 1.9.3 (doxygen -u).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9111
https://github.com/root-project/root/pull/9111:10,safety,updat,update,10,[skip-ci] update to doxygen 1.9.3; Update Doxyfile to doxygen 1.9.3 (doxygen -u).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9111
https://github.com/root-project/root/pull/9111:35,safety,Updat,Update,35,[skip-ci] update to doxygen 1.9.3; Update Doxyfile to doxygen 1.9.3 (doxygen -u).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9111
https://github.com/root-project/root/pull/9111:10,security,updat,update,10,[skip-ci] update to doxygen 1.9.3; Update Doxyfile to doxygen 1.9.3 (doxygen -u).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9111
https://github.com/root-project/root/pull/9111:35,security,Updat,Update,35,[skip-ci] update to doxygen 1.9.3; Update Doxyfile to doxygen 1.9.3 (doxygen -u).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9111
https://github.com/root-project/root/issues/9112:224,availability,slo,slowdown,224,"Only add cling nullptr checks in TRint ; As per discussion with Axel: have the ROOT interpreter warn about nullptr dereferences, but avoid injecting the checks in code that is not used interactively, as they bring a notable slowdown even to bug-free code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9112
https://github.com/root-project/root/issues/9112:139,integrability,inject,injecting,139,"Only add cling nullptr checks in TRint ; As per discussion with Axel: have the ROOT interpreter warn about nullptr dereferences, but avoid injecting the checks in code that is not used interactively, as they bring a notable slowdown even to bug-free code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9112
https://github.com/root-project/root/issues/9112:224,reliability,slo,slowdown,224,"Only add cling nullptr checks in TRint ; As per discussion with Axel: have the ROOT interpreter warn about nullptr dereferences, but avoid injecting the checks in code that is not used interactively, as they bring a notable slowdown even to bug-free code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9112
https://github.com/root-project/root/issues/9112:133,safety,avoid,avoid,133,"Only add cling nullptr checks in TRint ; As per discussion with Axel: have the ROOT interpreter warn about nullptr dereferences, but avoid injecting the checks in code that is not used interactively, as they bring a notable slowdown even to bug-free code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9112
https://github.com/root-project/root/issues/9112:139,security,inject,injecting,139,"Only add cling nullptr checks in TRint ; As per discussion with Axel: have the ROOT interpreter warn about nullptr dereferences, but avoid injecting the checks in code that is not used interactively, as they bring a notable slowdown even to bug-free code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9112
https://github.com/root-project/root/issues/9112:185,usability,interact,interactively,185,"Only add cling nullptr checks in TRint ; As per discussion with Axel: have the ROOT interpreter warn about nullptr dereferences, but avoid injecting the checks in code that is not used interactively, as they bring a notable slowdown even to bug-free code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9112
https://github.com/root-project/root/pull/9113:132,usability,document,documentation-page,132,[skip-ci] the geometry and graphpainter anchors clashed; reported here: . https://root-forum.cern.ch/t/wrong-links-in-tgraphpainter-documentation-page/47231/2.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9113
https://github.com/root-project/root/issues/9114:129,deployability,configurat,configuration,129,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:282,deployability,Updat,Updated,282,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:298,deployability,build,build,298,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:129,integrability,configur,configuration,129,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:129,modifiability,configur,configuration,129,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:22,safety,except,exceptions,22,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:81,safety,except,exceptions,81,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:282,safety,Updat,Updated,282,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:337,safety,except,exceptions,337,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:129,security,configur,configuration,129,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9114:282,security,Updat,Updated,282,"Deprecate then remove exceptions config flag; ROOT is expecting to be built with exceptions since years. The corresponding CMake configuration flag needs to be removed (after deprecation). Already deprecated in 6.28, to be removed in 6.30:. - jemalloc. - tcmalloc. - pyroot_legacy. Updated list of build options to deprecate in 6.30:. - exceptions. - pythia6_nolink. - pythia6. - pyroot-python2. - oracle.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9114
https://github.com/root-project/root/issues/9115:3179,availability,Operat,Operating,3179," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3254,availability,down,download,3254," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:834,deployability,observ,observation,834,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1330,deployability,build,build,1330,"he data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1387,deployability,contain,contains,1387,"igns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3167,deployability,version,version,3167," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3236,deployability,instal,install,3236," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3330,deployability,instal,installed,3330," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:374,integrability,event,eventID,374,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:452,integrability,event,eventID,452,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:626,integrability,event,eventID,626,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:946,integrability,event,eventID,946,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1055,integrability,event,eventID,1055,"ted behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1509,integrability,event,eventID,1509,". ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1601,integrability,event,eventID,1601," -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1660,integrability,event,eventID,1660,"and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.94",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1720,integrability,event,event,1720,"es as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1740,integrability,event,eventID,1740,"e is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1798,integrability,event,eventID,1798,"eating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1836,integrability,event,eventID,1836,"ation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1901,integrability,event,eventID,1901,"ead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1937,integrability,event,eventID,1937,"int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be diffe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:2080,integrability,event,events,2080,"e float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:2110,integrability,event,eventID,2110,". Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:2129,integrability,event,eventID,2129,"e the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFol",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:2908,integrability,event,eventID,2908," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3013,integrability,event,eventID,3013," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3167,integrability,version,version,3167," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:350,modifiability,variab,variables,350,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:716,modifiability,variab,variables,716,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3167,modifiability,version,version,3167," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:888,performance,time,time,888,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3369,reliability,doe,does,3369," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1284,safety,input,input,1284,"rial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.6263",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3297,safety,test,test,3297," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1398,security,modif,modified,1398,"ld deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:834,testability,observ,observation,834,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1029,testability,simpl,simple,1029,"ationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossV",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:3297,testability,test,test,3297," . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.626303	 | -0.796553	 | -0.626303	 | -0.626303	 | . 3	 | -0.612484	 | -0.612484	 | -0.335053	 | -0.612484	 | -0.612484	 | . 4	 | 0.981251	 | 0.981251	 | 0.939638	 | 0.981251	 | 0.981251	 | . 5	 | 0.964202	 | 0.964202	 | 0.696889	 | 0.964202	 | 0.964202	 | . 6	 | 0.992213	 | 0.992213	 | 0.989813	 | 0.992213	 | 0.992213	 | . 7	 | 0.948738	 | 0.948738	 | 0.971397	 | 0.948738	 | 0.948738	 | . 8	 | 0.927619	 | 0.927619	 | 0.932366	 | 0.927619	 | 0.927619	 | . 9	 | 0.478264	 | 0.478264	 | 0.778263	 | 0.478264	 | 0.478264	 | . 10	 | 0.994266	 | 0.994266	 | 0.996632	 | 0.994266	 | 0.994266	 | . ```. The BDT output when fixing eventID to 1 or 2 should be different, which is the case when they are floats (column 4 and 6); . But if eventID has integer type, whatever the value it has the BDT output is the same as if they were 0 (or the same the numFolds = 2). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. The test above is run with ROOT 6.22 installed in macOS Catalina, though it does seem to matter much. [demo.zip](https://github.com/root-project/root/files/7342885/demo.zip).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:63,usability,behavi,behavior,63,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:81,usability,clear,clear,81,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:545,usability,clear,clear,545,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:593,usability,behavi,behavior,593,"Spectator type in TMVACrossValidationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1029,usability,simpl,simple,1029,"ationApplication; ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossV",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1139,usability,behavi,behavior,1139,"-->. `$ROOTSYS/tutorial/tmva/TMVACrossValidationApplication.C` provides a nice example of applying weights trained using the code `$ROOTSYS/tutorial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9115:1284,usability,input,input,1284,"rial/tmva/TMVACrossValidation.C`. It assumes the data file has variables `x`, `y` and `eventID`, and assigns the fold deterministically using split expression `int([eventID])%int([numFolds])`, where in this case `numFolds = 2`. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The spectator `eventID` has integer type in training and in application, however TMVA seems to treat all variables as float, and there is problem in converting integer type into float when treating the split expression. My observation is the split expression returns 0 all the time, namely instead of assigning weights from fold `int([eventID])%int([numFolds])` it actually always assigning to fold 0 or `numFolds`. A simple fix is to require `eventID` in the data has type float. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Attached files contains a modified `TMVACrossValidationApplication.C` demonstrating the issues. . It generates a tree with `x`, `y` and `eventID`, and using weights saved in `dataset/weights/` to evaluate BDTG output. . For each eventID it decides which fold using split expression `int([eventID])%int([numFolds])` for all the cases below:. - each event with a unique eventID as integer (as in official ROOT tutorial);. - all eventID fixed to 1 as integer;. - all eventID fixed to 2 as integer (equivalent as fixed to 0);. - all eventID fixed to 1 as float;. - all eventID fixed to 2 as float (equivalent as fixed to 0);. It can be run with `root -l TMVACrossValidationApplication.C`, and the output for ten events are listed here:. ```. eventID	 | BDT int(eventID) | BDT int(1) | BDT float(1) | BDT int(2) | BDT float(2) . 1	 | 0.478264	 | 0.478264	 | 0.81558	 | 0.478264	 | 0.478264	 | . 2	 | -0.626303	 | -0.6263",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9115
https://github.com/root-project/root/issues/9116:31,energy efficiency,Current,Current,31,"[DF] Beauty fixes to Display ; Current output:. ```. root [5] ROOT::RDataFrame(10).Define(""x"", ""rdfentry_"").Define(""y"", ""rdfentry_*2"").Display()->Print(). x | y |. 0 | 0 |. 1 | 2 |. 2 | 4 |. 3 | 6 |. 4 | 8 |. ```. Desired output is more like (suggestions welcome):. ```. entry | x | y |. ---------------. 0 | 0 | 0 |. ---------------. 1 | 1 | 2 |. ---------------. 2 | 2 | 4 |. ---------------. 3 | 3 | 6 |. ---------------. 4 | 4 | 8 |. ---------------. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9116
https://github.com/root-project/root/issues/9118:142,availability,error,errors,142,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1198,energy efficiency,Draw,Draw,1198,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:44,integrability,batch,batch,44,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:75,integrability,batch,batch,75,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:88,integrability,Batch,Batch,88,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:306,integrability,batch,batchmode,306,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:387,integrability,batch,batchmode,387,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:419,integrability,batch,batchmode,419,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1041,integrability,Batch,BatchMode,1041,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1051,integrability,batch,batchmode,1051,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1429,integrability,batch,batchmode,1429,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:949,modifiability,Exten,Extended,949,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:44,performance,batch,batch,44,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:75,performance,batch,batch,75,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:88,performance,Batch,Batch,88,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:142,performance,error,errors,142,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:191,performance,time,time,191,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:306,performance,batch,batchmode,306,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:387,performance,batch,batchmode,387,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:419,performance,batch,batchmode,419,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1041,performance,Batch,BatchMode,1041,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1051,performance,batch,batchmode,1051,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1429,performance,batch,batchmode,1429,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:142,safety,error,errors,142,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1294,safety,compl,completely,1294,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1294,security,compl,completely,1294,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:142,usability,error,errors,142,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:341,usability,minim,minimizer,341,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1073,usability,Minim,Minimizer,1073,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/issues/9118:1083,usability,minim,minimizer,1083,"[RF] Problem running weighted binned fit in batch mode; Running a weighted batch fit in Batch mode on an unweighted data set results in wrong errors du to a wrong Hessian computed the second time. . Here is the code reproducing the problem:. ```. import ROOT as r. c1 = r.TCanvas(). def fit(sumw2 = False, batchmode = False, binned = False, minimizer = ""Minuit2"", printLevel = 0 ):. if (batchmode) :. print(""running in batchmode""). if (sumw2) :. print(""using weight correction""). r.RooRandom.randomGenerator().SetSeed(4357). ws = r.RooWorkspace(""workspace""). x = ws.factory(""x[-10, 10]""). sig = ws.factory(""Gaussian::sig(x, mu[-1, 1], s[0.1, 5])""). bkg = ws.factory(""Chebychev::bkg(x, {c1[0.1, -1, 1]})""). shp = ws.factory(""SUM::shp(Nsig[0, 20000] * sig, Nbkg[0, 20000] * bkg)""). if (binned) :. data = shp.generateBinned(r.RooArgSet(x)). else :. data = shp.generate(r.RooArgSet(x)). data.Print(). ws.Import(data). res1 = shp.fitTo(. data,. r.RooFit.Extended(),. r.RooFit.Save(),. r.RooFit.SumW2Error(sumw2),. r.RooFit.Strategy(1),. r.RooFit.BatchMode(batchmode),. r.RooFit.Minimizer(minimizer),. r.RooFit.PrintLevel(printLevel). ). res1.Print(). pl = x.frame(). data.plotOn(pl). shp.plotOn(pl). pl.Draw(). c1.SaveAs(""fit.png""). . fit(1,1,1,""Minuit"",2) # you can see second covariance matrix is completely wrong . ```. This was reported in https://root-forum.cern.ch/t/sumw2error-gives-unexpected-results-with-unweighted-datasets-batchmode/47206",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9118
https://github.com/root-project/root/pull/9119:121,energy efficiency,model,models,121,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:31,modifiability,layer,layer,31,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:101,modifiability,layer,layers,101,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:199,modifiability,Layer,Layers,199,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:222,safety,Test,Tests,222,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:121,security,model,models,121,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:222,testability,Test,Tests,222,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:14,usability,Support,Support,14,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:69,usability,support,support,69,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:151,usability,Progress,Progress,151,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9119:167,usability,Support,Support,167,[TMVA][SOFIE] Support for Conv layer in PyTorch Parser; This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress. - [x] Support for PyTorch Convolution Layers (Conv2D). - [x] Tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9119
https://github.com/root-project/root/pull/9120:9,performance,memor,memory,9,"[RF] Fix memory leaks in RooFactoryWSTool; In the special RooFit workspace functions implemented in. RooFactoryWSTool, the tool creates a given RooFit object that is then. imported in the workspace. For example, a RooAddPdf is created when you. use `SUM` in `RooWorkspace::factory()`. When these objects are. imported, they are copied, so the original object is still owned by the. RooFactoryWSTool. In some cases, the original object is not deleted,. causing a memory leak and even worse duplicate client nodes in the. computation graph. This commit fixes that. Simple reproducer for the problem with the duplicate client nodes that. this commit solves:. ```C++. RooWorkspace w;. w.factory(""Gaussian::g1(x[0,20],mx1[10,0,20],sx1[3,0,10])"");. w.factory(""Gaussian::g2(x,mx2[10,0,20],sx2[1,0,10])"");. w.factory(""Gaussian::g3(y[0,20],my[10,0,20],sy[2,0,10])"");. w.factory(""Polynomial::pol(y,a[-0.01,-0.05,0.1])"");. w.factory(""SUM::pdfx(fx[0.2,0,1]*g1,g2)"");. w.factory(""SUM::pdfy(fy[0.4,0.,1.]*g3,pol)"");. w.pdf(""g1"")->Print(""V"");. w.pdf(""g3"")->Print(""V"");. ```. You will see that `pdfx` appears twice as a client of `g1`, and `pdfy`. appears twice as a client of `g3`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9120
https://github.com/root-project/root/pull/9120:462,performance,memor,memory,462,"[RF] Fix memory leaks in RooFactoryWSTool; In the special RooFit workspace functions implemented in. RooFactoryWSTool, the tool creates a given RooFit object that is then. imported in the workspace. For example, a RooAddPdf is created when you. use `SUM` in `RooWorkspace::factory()`. When these objects are. imported, they are copied, so the original object is still owned by the. RooFactoryWSTool. In some cases, the original object is not deleted,. causing a memory leak and even worse duplicate client nodes in the. computation graph. This commit fixes that. Simple reproducer for the problem with the duplicate client nodes that. this commit solves:. ```C++. RooWorkspace w;. w.factory(""Gaussian::g1(x[0,20],mx1[10,0,20],sx1[3,0,10])"");. w.factory(""Gaussian::g2(x,mx2[10,0,20],sx2[1,0,10])"");. w.factory(""Gaussian::g3(y[0,20],my[10,0,20],sy[2,0,10])"");. w.factory(""Polynomial::pol(y,a[-0.01,-0.05,0.1])"");. w.factory(""SUM::pdfx(fx[0.2,0,1]*g1,g2)"");. w.factory(""SUM::pdfy(fy[0.4,0.,1.]*g3,pol)"");. w.pdf(""g1"")->Print(""V"");. w.pdf(""g3"")->Print(""V"");. ```. You will see that `pdfx` appears twice as a client of `g1`, and `pdfy`. appears twice as a client of `g3`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9120
https://github.com/root-project/root/pull/9120:563,testability,Simpl,Simple,563,"[RF] Fix memory leaks in RooFactoryWSTool; In the special RooFit workspace functions implemented in. RooFactoryWSTool, the tool creates a given RooFit object that is then. imported in the workspace. For example, a RooAddPdf is created when you. use `SUM` in `RooWorkspace::factory()`. When these objects are. imported, they are copied, so the original object is still owned by the. RooFactoryWSTool. In some cases, the original object is not deleted,. causing a memory leak and even worse duplicate client nodes in the. computation graph. This commit fixes that. Simple reproducer for the problem with the duplicate client nodes that. this commit solves:. ```C++. RooWorkspace w;. w.factory(""Gaussian::g1(x[0,20],mx1[10,0,20],sx1[3,0,10])"");. w.factory(""Gaussian::g2(x,mx2[10,0,20],sx2[1,0,10])"");. w.factory(""Gaussian::g3(y[0,20],my[10,0,20],sy[2,0,10])"");. w.factory(""Polynomial::pol(y,a[-0.01,-0.05,0.1])"");. w.factory(""SUM::pdfx(fx[0.2,0,1]*g1,g2)"");. w.factory(""SUM::pdfy(fy[0.4,0.,1.]*g3,pol)"");. w.pdf(""g1"")->Print(""V"");. w.pdf(""g3"")->Print(""V"");. ```. You will see that `pdfx` appears twice as a client of `g1`, and `pdfy`. appears twice as a client of `g3`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9120
https://github.com/root-project/root/pull/9120:9,usability,memor,memory,9,"[RF] Fix memory leaks in RooFactoryWSTool; In the special RooFit workspace functions implemented in. RooFactoryWSTool, the tool creates a given RooFit object that is then. imported in the workspace. For example, a RooAddPdf is created when you. use `SUM` in `RooWorkspace::factory()`. When these objects are. imported, they are copied, so the original object is still owned by the. RooFactoryWSTool. In some cases, the original object is not deleted,. causing a memory leak and even worse duplicate client nodes in the. computation graph. This commit fixes that. Simple reproducer for the problem with the duplicate client nodes that. this commit solves:. ```C++. RooWorkspace w;. w.factory(""Gaussian::g1(x[0,20],mx1[10,0,20],sx1[3,0,10])"");. w.factory(""Gaussian::g2(x,mx2[10,0,20],sx2[1,0,10])"");. w.factory(""Gaussian::g3(y[0,20],my[10,0,20],sy[2,0,10])"");. w.factory(""Polynomial::pol(y,a[-0.01,-0.05,0.1])"");. w.factory(""SUM::pdfx(fx[0.2,0,1]*g1,g2)"");. w.factory(""SUM::pdfy(fy[0.4,0.,1.]*g3,pol)"");. w.pdf(""g1"")->Print(""V"");. w.pdf(""g3"")->Print(""V"");. ```. You will see that `pdfx` appears twice as a client of `g1`, and `pdfy`. appears twice as a client of `g3`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9120
https://github.com/root-project/root/pull/9120:123,usability,tool,tool,123,"[RF] Fix memory leaks in RooFactoryWSTool; In the special RooFit workspace functions implemented in. RooFactoryWSTool, the tool creates a given RooFit object that is then. imported in the workspace. For example, a RooAddPdf is created when you. use `SUM` in `RooWorkspace::factory()`. When these objects are. imported, they are copied, so the original object is still owned by the. RooFactoryWSTool. In some cases, the original object is not deleted,. causing a memory leak and even worse duplicate client nodes in the. computation graph. This commit fixes that. Simple reproducer for the problem with the duplicate client nodes that. this commit solves:. ```C++. RooWorkspace w;. w.factory(""Gaussian::g1(x[0,20],mx1[10,0,20],sx1[3,0,10])"");. w.factory(""Gaussian::g2(x,mx2[10,0,20],sx2[1,0,10])"");. w.factory(""Gaussian::g3(y[0,20],my[10,0,20],sy[2,0,10])"");. w.factory(""Polynomial::pol(y,a[-0.01,-0.05,0.1])"");. w.factory(""SUM::pdfx(fx[0.2,0,1]*g1,g2)"");. w.factory(""SUM::pdfy(fy[0.4,0.,1.]*g3,pol)"");. w.pdf(""g1"")->Print(""V"");. w.pdf(""g3"")->Print(""V"");. ```. You will see that `pdfx` appears twice as a client of `g1`, and `pdfy`. appears twice as a client of `g3`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9120
https://github.com/root-project/root/pull/9120:462,usability,memor,memory,462,"[RF] Fix memory leaks in RooFactoryWSTool; In the special RooFit workspace functions implemented in. RooFactoryWSTool, the tool creates a given RooFit object that is then. imported in the workspace. For example, a RooAddPdf is created when you. use `SUM` in `RooWorkspace::factory()`. When these objects are. imported, they are copied, so the original object is still owned by the. RooFactoryWSTool. In some cases, the original object is not deleted,. causing a memory leak and even worse duplicate client nodes in the. computation graph. This commit fixes that. Simple reproducer for the problem with the duplicate client nodes that. this commit solves:. ```C++. RooWorkspace w;. w.factory(""Gaussian::g1(x[0,20],mx1[10,0,20],sx1[3,0,10])"");. w.factory(""Gaussian::g2(x,mx2[10,0,20],sx2[1,0,10])"");. w.factory(""Gaussian::g3(y[0,20],my[10,0,20],sy[2,0,10])"");. w.factory(""Polynomial::pol(y,a[-0.01,-0.05,0.1])"");. w.factory(""SUM::pdfx(fx[0.2,0,1]*g1,g2)"");. w.factory(""SUM::pdfy(fy[0.4,0.,1.]*g3,pol)"");. w.pdf(""g1"")->Print(""V"");. w.pdf(""g3"")->Print(""V"");. ```. You will see that `pdfx` appears twice as a client of `g1`, and `pdfy`. appears twice as a client of `g3`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9120
https://github.com/root-project/root/pull/9120:563,usability,Simpl,Simple,563,"[RF] Fix memory leaks in RooFactoryWSTool; In the special RooFit workspace functions implemented in. RooFactoryWSTool, the tool creates a given RooFit object that is then. imported in the workspace. For example, a RooAddPdf is created when you. use `SUM` in `RooWorkspace::factory()`. When these objects are. imported, they are copied, so the original object is still owned by the. RooFactoryWSTool. In some cases, the original object is not deleted,. causing a memory leak and even worse duplicate client nodes in the. computation graph. This commit fixes that. Simple reproducer for the problem with the duplicate client nodes that. this commit solves:. ```C++. RooWorkspace w;. w.factory(""Gaussian::g1(x[0,20],mx1[10,0,20],sx1[3,0,10])"");. w.factory(""Gaussian::g2(x,mx2[10,0,20],sx2[1,0,10])"");. w.factory(""Gaussian::g3(y[0,20],my[10,0,20],sy[2,0,10])"");. w.factory(""Polynomial::pol(y,a[-0.01,-0.05,0.1])"");. w.factory(""SUM::pdfx(fx[0.2,0,1]*g1,g2)"");. w.factory(""SUM::pdfy(fy[0.4,0.,1.]*g3,pol)"");. w.pdf(""g1"")->Print(""V"");. w.pdf(""g3"")->Print(""V"");. ```. You will see that `pdfx` appears twice as a client of `g1`, and `pdfy`. appears twice as a client of `g3`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9120
https://github.com/root-project/root/pull/9121:9,availability,error,error,9,"[io] Add error message before assert (#8387).; (cherry picked from commit 5af1fa4d3d5cfd9f1675c565b5bb47685b8ca99d). ""forward-port"" of https://github.com/root-project/root/pull/8461",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9121
https://github.com/root-project/root/pull/9121:15,integrability,messag,message,15,"[io] Add error message before assert (#8387).; (cherry picked from commit 5af1fa4d3d5cfd9f1675c565b5bb47685b8ca99d). ""forward-port"" of https://github.com/root-project/root/pull/8461",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9121
https://github.com/root-project/root/pull/9121:15,interoperability,messag,message,15,"[io] Add error message before assert (#8387).; (cherry picked from commit 5af1fa4d3d5cfd9f1675c565b5bb47685b8ca99d). ""forward-port"" of https://github.com/root-project/root/pull/8461",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9121
https://github.com/root-project/root/pull/9121:9,performance,error,error,9,"[io] Add error message before assert (#8387).; (cherry picked from commit 5af1fa4d3d5cfd9f1675c565b5bb47685b8ca99d). ""forward-port"" of https://github.com/root-project/root/pull/8461",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9121
https://github.com/root-project/root/pull/9121:9,safety,error,error,9,"[io] Add error message before assert (#8387).; (cherry picked from commit 5af1fa4d3d5cfd9f1675c565b5bb47685b8ca99d). ""forward-port"" of https://github.com/root-project/root/pull/8461",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9121
https://github.com/root-project/root/pull/9121:30,testability,assert,assert,30,"[io] Add error message before assert (#8387).; (cherry picked from commit 5af1fa4d3d5cfd9f1675c565b5bb47685b8ca99d). ""forward-port"" of https://github.com/root-project/root/pull/8461",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9121
https://github.com/root-project/root/pull/9121:9,usability,error,error,9,"[io] Add error message before assert (#8387).; (cherry picked from commit 5af1fa4d3d5cfd9f1675c565b5bb47685b8ca99d). ""forward-port"" of https://github.com/root-project/root/pull/8461",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9121
https://github.com/root-project/root/pull/9122:139,deployability,releas,release,139,"[DF] Establish a single place for triggering the computation graph; In preparation for the Dask backend, we need to be sure that we always release the GIL while running distributed RDataFrame applications. In this context, it is better to have a single coherent place where all the computation graph nodes are triggered. This PR introduces changes in the `ComputationGraphGenerator` class so that the `ROOT.RDF.RunGraphs` function can be called (with the GIL released beforehand) in order to trigger the computations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9122
https://github.com/root-project/root/pull/9122:459,deployability,releas,released,459,"[DF] Establish a single place for triggering the computation graph; In preparation for the Dask backend, we need to be sure that we always release the GIL while running distributed RDataFrame applications. In this context, it is better to have a single coherent place where all the computation graph nodes are triggered. This PR introduces changes in the `ComputationGraphGenerator` class so that the `ROOT.RDF.RunGraphs` function can be called (with the GIL released beforehand) in order to trigger the computations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9122
https://github.com/root-project/root/pull/9122:169,interoperability,distribut,distributed,169,"[DF] Establish a single place for triggering the computation graph; In preparation for the Dask backend, we need to be sure that we always release the GIL while running distributed RDataFrame applications. In this context, it is better to have a single coherent place where all the computation graph nodes are triggered. This PR introduces changes in the `ComputationGraphGenerator` class so that the `ROOT.RDF.RunGraphs` function can be called (with the GIL released beforehand) in order to trigger the computations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9122
https://github.com/root-project/root/pull/9122:214,testability,context,context,214,"[DF] Establish a single place for triggering the computation graph; In preparation for the Dask backend, we need to be sure that we always release the GIL while running distributed RDataFrame applications. In this context, it is better to have a single coherent place where all the computation graph nodes are triggered. This PR introduces changes in the `ComputationGraphGenerator` class so that the `ROOT.RDF.RunGraphs` function can be called (with the GIL released beforehand) in order to trigger the computations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9122
https://github.com/root-project/root/issues/9123:68,availability,avail,available,68,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:215,availability,avail,available,215,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:291,availability,avail,available,291,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:373,availability,avail,available,373,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:453,availability,avail,available,453,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1383,availability,Operat,Operating,1383,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1458,availability,down,download,1458,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1304,deployability,build,build,1304,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1371,deployability,version,version,1371,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1440,deployability,instal,install,1440,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1371,integrability,version,version,1371,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1371,modifiability,version,version,1371,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:68,reliability,availab,available,68,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:215,reliability,availab,available,215,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:291,reliability,availab,available,291,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:373,reliability,availab,available,373,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:453,reliability,availab,available,453,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:68,safety,avail,available,68,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:215,safety,avail,available,215,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:291,safety,avail,available,291,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:373,safety,avail,available,373,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:453,safety,avail,available,453,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1258,safety,input,input,1258,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:68,security,availab,available,68,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:215,security,availab,available,215,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:291,security,availab,available,291,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:373,security,availab,available,373,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:453,security,availab,available,453,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1512,testability,context,context,1512,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1541,testability,context,context,1541,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:902,usability,clear,clear,902,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:950,usability,behavi,behavior,950,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:981,usability,behavi,behavior,981,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:999,usability,clear,clear,999,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1113,usability,behavi,behavior,1113,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/issues/9123:1258,usability,input,input,1258,"How to resolve ""Warning in TClass::Init: no dictionary for class is available""?; when i want to run root file like root (filename).root this came Warning in <TClass::Init>: no dictionary for class TRootLHEFEvent is available Warning in <TClass::Init>: no dictionary for class TRootWeight is available Warning in <TClass::Init>: no dictionary for class TRootLHEFParticle is available Warning in <TClass::Init>: no dictionary for class TSortableObject is available (TFile *) 0x5614f99a3290 how can i resolve this. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9123
https://github.com/root-project/root/pull/9124:622,deployability,updat,updated,622,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:305,integrability,messag,message,305,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:305,interoperability,messag,message,305,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:518,safety,test,tests,518,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:592,safety,test,tested,592,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:622,safety,updat,updated,622,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:622,security,updat,updated,622,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:518,testability,test,tests,518,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:592,testability,test,tested,592,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:30,usability,indicat,indicates,30,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:114,usability,indicat,indicates,114,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:269,usability,user,user,269,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9124:545,usability,behavi,behaviour,545,"[RDFD][Fix #7205] Print() now indicates non-fitting columns; . # This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most. column of dots (...). Moreover, the user will be notified with an. info message as well. Print() guarantees that at least 1 column of the table is displayed. (regardless the width of the first column). The default maximum allowed width of the table is increased to 100. (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #7205 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9124
https://github.com/root-project/root/pull/9125:252,reliability,doe,doesn,252,"Some tutorials did not show correctly in the ref guide.; - The `fit1.C` tutorial showed the picture of `fillrandom.C`. To fix that, In `fillrandom.C`, it is now possible to generate the data file without producing the plot. . - `ConfidenceIntervals.C` doesn't have text output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9125
https://github.com/root-project/root/pull/9125:49,usability,guid,guide,49,"Some tutorials did not show correctly in the ref guide.; - The `fit1.C` tutorial showed the picture of `fillrandom.C`. To fix that, In `fillrandom.C`, it is now possible to generate the data file without producing the plot. . - `ConfidenceIntervals.C` doesn't have text output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9125
https://github.com/root-project/root/pull/9126:159,availability,sla,slashes,159,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/pull/9126:194,availability,sla,slashes,194,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/pull/9126:303,availability,servic,services,303,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/pull/9126:303,deployability,servic,services,303,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/pull/9126:303,integrability,servic,services,303,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/pull/9126:303,modifiability,servic,services,303,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/pull/9126:159,reliability,sla,slashes,159,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/pull/9126:194,reliability,sla,slashes,194,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/pull/9126:87,safety,prevent,prevent,87,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/pull/9126:87,security,preven,prevent,87,"[Jupyroot] Fix stdout/stderr capture on Windows; - add `_fstat(pipeHandle[0], &st)` to prevent blocking when there is nothing to read. - convert mixed forward slashes & backslashes into forward slashes only in the `jupyter_notebook_config.py` file. - add `c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.AsyncMappingKernelManager'` in the `jupyter_notebook_config.py` file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9126
https://github.com/root-project/root/issues/9127:30,deployability,version,versions,30,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1774,energy efficiency,model,model,1774,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1798,energy efficiency,model,model,1798,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1897,energy efficiency,model,model,1897,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2024,energy efficiency,model,model,2024,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2082,energy efficiency,Draw,DrawOption,2082,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2225,energy efficiency,model,model,2225,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2280,energy efficiency,Draw,DrawOption,2280,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:30,integrability,version,versions,30,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:85,integrability,compon,components,85,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:599,integrability,event,events,599,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:663,integrability,event,events,663,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2175,integrability,Compon,Components,2175,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2199,integrability,Compon,Components,2199,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2374,integrability,Compon,Components,2374,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2395,integrability,Compon,Components,2395,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:85,interoperability,compon,components,85,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2175,interoperability,Compon,Components,2175,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2199,interoperability,Compon,Components,2199,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2374,interoperability,Compon,Components,2374,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2395,interoperability,Compon,Components,2395,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:30,modifiability,version,versions,30,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:85,modifiability,compon,components,85,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2175,modifiability,Compon,Components,2175,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2199,modifiability,Compon,Components,2199,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2374,modifiability,Compon,Components,2374,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2395,modifiability,Compon,Components,2395,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:484,security,sign,signal,484,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:592,security,sign,signal,592,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1543,security,sign,signal,1543,",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1567,security,sign,signal,1567,"T.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1577,security,sign,signal,1577,"ar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1684,security,sign,signal,1684,"del_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1774,security,model,model,1774,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1798,security,model,model,1798,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1807,security,sign,signal,1807,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1847,security,sign,signal,1847,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:1897,security,model,model,1897,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2024,security,model,model,2024,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2061,security,sign,signal,2061,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2187,security,sign,signal,2187,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2225,security,model,model,2225,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:63,usability,behavi,behavior,63,"[RF] RooFit plotOn issue; The versions after 6.18 have strange behavior for plotting components in the fit. The plots for the 6.20.02 and 6.18.0 are in the attachments, and the script to reproduce the issue is below:. ```. import ROOT. from ROOT.RooFit import *. mes= ROOT.RooRealVar(""mes"",""m_{ES} (GeV)"",5.265,5.29);. mean=ROOT.RooRealVar(""mean"",""B^{#pm} mass"",5.28,5.265,5.29);. width=ROOT.RooRealVar(""width"",""B^{#pm} width"",0.0027,0.001,1.);. signal_g=ROOT.RooGaussian(""signal_g"",""signal PDF"",mes,mean,width);. bkg_g=ROOT.RooPolynomial(""bkg_g"",""bkg_g"",mes) . nsig=ROOT.RooRealVar(""nsig"",""#signal events"",200,0.,1000);. nbkg=ROOT.RooRealVar(""nbkg"",""#background events"",40,0.,1000);. model_g=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2470,usability,user,user-images,2470,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/issues/9127:2597,usability,user,user-images,2597,"=ROOT.RooAddPdf(""model_g"",""g+a"",ROOT.RooArgList(signal_g,bkg_g),ROOT.RooArgList(nsig,nbkg));. dataset= model_g.generate(ROOT.RooArgSet(mes),2000) . sigma1=ROOT.RooRealVar (""sigma1"", ""sigma1"", 0.0015,0.001,1);. sigma2=ROOT.RooRealVar(""sigma2"", ""sigma2"",0.0030,0.001,3);. alpha1=ROOT.RooRealVar (""alpha1"", ""alpha1"", 1.5, 0,10);. alpha2=ROOT.RooRealVar (""alpha2"", ""alpha2"", 1.5, 0,10);. n=ROOT.RooRealVar(""n"", ""n"", 1.0,0,20);. ratio=ROOT.RooRealVar(""ratio"", ""ratio"", 0.1, 0, 1);. p0=ROOT.RooRealVar(""p0"", ""p0"", 0.0, 0, 2.0);. N=200. a0=ROOT.RooRealVar (""a0"", ""a0"", 0.166, -100, 100);. a1=ROOT.RooRealVar (""a1"", ""a1"", -0.0027, -10, 10);. bkg=ROOT.RooChebychev(""bkg"",""bkg"",mes,ROOT.RooArgList(a0,a1)). myCB1=ROOT.RooCBShape (""CBMass1"", ""CBMass1"", mes, mean, sigma1, alpha1, n);. myCB2=ROOT.RooCBShape (""CBMass2"", ""CBMass2"", mes, mean, sigma2, alpha2, n);. signal=ROOT.RooAddPdf (""signal"", ""signal"", ROOT.RooArgList(myCB1, myCB2), ROOT.RooArgList(ratio));. Nsig= ROOT.RooRealVar (""Nsig"", ""yield of signal"", 200,0.,2000);. Nbkg= ROOT.RooRealVar(""Nbkg"", ""yield of background"",40,0.,2000);. model= ROOT.RooAddPdf (""model"", ""signal and background"", ROOT.RooArgList(signal, bkg), ROOT.RooArgList(Nsig, Nbkg)); . r = model.fitTo(dataset) ;. frame=mes.frame(200). dataset.plotOn(frame, ROOT.RooFit.MarkerStyle ( 20 ),ROOT.RooFit.Binning(200) ). model.plotOn(frame,ROOT.RooFit.Name('signal'),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kRed ), ROOT.RooFit.Components(""signal"") )#,Components=""background""). model.plotOn(frame,ROOT.RooFit.Name(""bkg""),ROOT.RooFit.DrawOption(""F""), ROOT.RooFit.FillStyle (1001),ROOT.RooFit.FillColor(ROOT.kBlue ), ROOT.RooFit.Components(""bkg"") )#,Components=""background""). ```. Thank you. ![componient_draw_issue](https://user-images.githubusercontent.com/43534935/137482639-cd6b8724-2f8c-47bf-8dc7-05f724fd01fb.png). ![componient_draw_old](https://user-images.githubusercontent.com/43534935/137482644-0d84e171-0f4d-4d9e-a770-eb65b0bb5f57.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9127
https://github.com/root-project/root/pull/9128:237,availability,avail,available,237,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:269,deployability,modul,module,269,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:936,integrability,filter,filtering,936,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3846,integrability,filter,filtering,3846,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3915,integrability,inject,injected,3915,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:752,interoperability,prox,proxy,752,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:1438,interoperability,specif,specifying,1438,"t says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2441,interoperability,registr,registration,2441,"g their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:34,modifiability,deco,decorator,34,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:90,modifiability,deco,decorator,90,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:198,modifiability,deco,decorator,198,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:269,modifiability,modul,module,269,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:308,modifiability,deco,decorator,308,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:330,modifiability,paramet,parameters,330,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:848,modifiability,paramet,parameter,848,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:960,modifiability,deco,decorator,960,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2509,modifiability,deco,decorator,2509,"plated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3438,modifiability,paramet,parameter,3438,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3548,modifiability,deco,decorator,3548,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3747,modifiability,paramet,parameter,3747,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:4268,modifiability,paramet,parameter,4268,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:1772,performance,time,time,1772,"d `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pytho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2754,performance,time,time,2754,"ble to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:237,reliability,availab,available,237,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:237,safety,avail,available,237,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:269,safety,modul,module,269,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:928,safety,compl,complex,928,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:1347,safety,valid,valid,1347,"et of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2426,safety,compl,complicate,2426,"ithout specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3334,safety,compl,complex,3334,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3582,safety,review,review,3582,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:237,security,availab,available,237,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:928,security,compl,complex,928,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2426,security,compl,complicate,2426,"ithout specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2731,security,access,accessed,2731,". So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2935,security,access,accesses,2935,"argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` befo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3334,security,compl,complex,3334,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3915,security,inject,injected,3915,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3983,security,access,access,3983,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2393,testability,simpl,simple,2393," option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3582,testability,review,review,3582,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:48,usability,user,user,48,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:250,usability,user,users,250,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:885,usability,user,user,885,"[PyROOT] Implement @pythonization decorator for user and ROOT classes; A `@pythonization` decorator was already being used internally in ROOT to register pythonizor functions for ROOT classes. Such decorator has been redesigned and made available to users via the ROOT module to pythonize their classes. The decorator accepts two parameters: the target of the pythonization (a string or an iterable of strings) and - optionally - a boolean that says if the string(s) are full class names or prefixes. Let's see this better with examples. If I want to pythonize class `C`, I can define a pythonizor function like this:. ```python. from ROOT import pythonization. @pythonization(""C""). def pythonizor_C(klass, name):. ... ```. where `klass` is the Python proxy class for `C` and `name` is the name of the class (i.e. ""C""). The reason I kept `name` as parameter is for convenience for the user, since she might want to do some more complex filtering than what the decorator offers (this will be more useful in the examples for prefixes below). If I want to apply the same pythonizor to more than one class, e.g. `C` and `B`, I can do:. ```python. @pythonization([ ""C"", ""B"" ]). def pythonizor_C_B(klass, name):. ... ```. Note that classes in namespaces also work, e.g. `@pythonization(""NS1::C"")` or `@pythonization([""NS1::C"", ""NS1::NS2::B""])` are also valid. Regarding prefixes, I wanted to provide an option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2393,usability,simpl,simple,2393," option to match multiple classes without specifying their names one by one. This can be useful, for instance, for templated classes, since we might want to apply the same pythonizor to any instantiation of the templated class no matter with what type it was instantiated (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2661,usability,efficien,efficient,2661,"d (note that pythonizors are not applied to templates but to classes). So it is also possible to do (this time picking a real example from ROOT):. ```python. @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2842,usability,user,user,2842,"::VecOps::RVec<"", is_prefix=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any furthe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2869,usability,user,user,2869,"=True). def pythonizor_RVec(klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pyth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2892,usability,User,UserNamespace,2892,"klass, name):. ... ```. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2917,usability,user,user,2917,"``. The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be inje",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:2991,usability,User,UserNamespace,2991,"ything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:. ```python. @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `k",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3166,usability,prefer,prefer,3166,"s::RVec<"", ""std::vector<"" ], is_prefix=True). def pythonizor_RVec_stdvec(klass, name):. ... ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3303,usability,user,user,3303,"ular expressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3709,usability,feedback,feedback,3709,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3799,usability,user,users,3799,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3946,usability,user,user,3946,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9128:3971,usability,user,users,3971,"pressions. I discarded that because of two reasons:. - They are more costly that simple string comparison. - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud on the `name` parameter: he thinks it could be removed since some users won't need it (they won't do any further filtering inside the pythonizor). As an alternative, `name` could be injected in `klass` before the user pythonizor runs (so users would access it as `klass.name`), but that could cause a clash if `name` is already a static member of the class. There is also `klass.__cpp_name__` that is provided by cppyy with the fully qualified name of the class, so we could rely on that too. @vepadulano would rather keep `name` as a parameter. I'd like to hear more opinions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9128
https://github.com/root-project/root/pull/9129:356,deployability,updat,updated,356,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9129:289,safety,test,tests,289,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9129:326,safety,test,tested,326,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9129:356,safety,updat,updated,356,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9129:356,security,updat,updated,356,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9129:289,testability,test,tests,289,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9129:326,testability,test,tested,326,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9129:30,usability,document,documentation,30,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9129:111,usability,document,documentation,111,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9129:152,usability,document,documentation,152,"Grammar and typo fixes in TH1 documentation; # This Pull request:. ... fixes grammar mistakes and typos in the documentation. ## Changes or fixes:. The documentation for the TH1 class had quite a few problems, so this PR fixes the ones I found. ## Checklist:. No code has been changed, so tests are probably not needed. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9129
https://github.com/root-project/root/pull/9130:116,usability,help,helper-cols,116,[NFC][DF] Remove HTML tags from docs; Fixes this problem: https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9130
https://github.com/root-project/root/issues/9133:251,energy efficiency,alloc,allocates,251,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:9,performance,Memor,Memory,9,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:229,performance,memor,memory,229,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:261,performance,memor,memory,261,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:49,safety,compl,complex,49,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:318,safety,test,tested,318,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:49,security,compl,complex,49,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:313,testability,unit,unit-tested,313,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:9,usability,Memor,Memory,9,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:229,usability,memor,memory,229,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:261,usability,memor,memory,261,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/issues/9133:333,usability,custom,custom,333,"[ntuple] Memory leak when reading std::vector of complex objects; - [X] Checked for duplicates. ### Describe the bug. While working on #8770, it turns out that the reading of `std::vector<T>` in RNTuple appears to be affected by memory leaks, if ``T` allocates memory in its constructor. This should be fixed and unit-tested, with a custom class that tracks constructor and destructor calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9133
https://github.com/root-project/root/pull/9134:238,availability,error,error,238,[RF] Some fixes for stressRoofit; This Pull request provides a small fix to stressRooFit by doing correctly the plot in the full range and in the restricted range as it is done in the corresponding tutorial. It also provides a fix for an error message in the RooUnitTest class .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9134
https://github.com/root-project/root/pull/9134:244,integrability,messag,message,244,[RF] Some fixes for stressRoofit; This Pull request provides a small fix to stressRooFit by doing correctly the plot in the full range and in the restricted range as it is done in the corresponding tutorial. It also provides a fix for an error message in the RooUnitTest class .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9134
https://github.com/root-project/root/pull/9134:244,interoperability,messag,message,244,[RF] Some fixes for stressRoofit; This Pull request provides a small fix to stressRooFit by doing correctly the plot in the full range and in the restricted range as it is done in the corresponding tutorial. It also provides a fix for an error message in the RooUnitTest class .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9134
https://github.com/root-project/root/pull/9134:238,performance,error,error,238,[RF] Some fixes for stressRoofit; This Pull request provides a small fix to stressRooFit by doing correctly the plot in the full range and in the restricted range as it is done in the corresponding tutorial. It also provides a fix for an error message in the RooUnitTest class .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9134
https://github.com/root-project/root/pull/9134:238,safety,error,error,238,[RF] Some fixes for stressRoofit; This Pull request provides a small fix to stressRooFit by doing correctly the plot in the full range and in the restricted range as it is done in the corresponding tutorial. It also provides a fix for an error message in the RooUnitTest class .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9134
https://github.com/root-project/root/pull/9134:238,usability,error,error,238,[RF] Some fixes for stressRoofit; This Pull request provides a small fix to stressRooFit by doing correctly the plot in the full range and in the restricted range as it is done in the corresponding tutorial. It also provides a fix for an error message in the RooUnitTest class .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9134
https://github.com/root-project/root/issues/9136:1308,availability,Error,ErrorHandler,1308,"c<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447. #9 0x00007f4f9bff45fd in TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric>::Action (buf=..., start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550, config=0x55b0af070740) at ../io/io/src/TStreamerInf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:2889,availability,operat,operator,2889,"onvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447. #9 0x00007f4f9bff45fd in TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric>::Action (buf=..., start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550, config=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2467. #10 0x00007f4f9bf90e3b in TStreamerInfoActions::GenericLooper::ReadNumericalCollection<TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric> > (buf=..., addr=0x55b0af1eba40, conf=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2617. #11 0x00007f4f9bf6c208 in TStreamerInfoActions::GenericLooper::ReadCollectionBasicType<int> (buf=..., addr=0x55b0af1eba40, conf=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2650. #12 0x00007f4f9be4b627 in TStreamerInfoActions::TConfiguredAction::operator() (this=0x55b0af5360e0, buffer=..., object=0x55b0af1eba40) at ../io/io/inc/TStreamerInfoActions.h:123. #13 0x00007f4f9be49407 in TBufferFile::ApplySequence (this=0x55b0af1d9620, sequence=..., obj=0x55b0af1eba40) at ../io/io/src/TBufferFile.cxx:3572. #14 0x00007f4f826ebd17 in TBranchElement::ReadLeavesMember (this=0x55b0ae204b20, b=...) at ../tree/tree/src/TBranchElement.cxx:4499. #15 0x00007f4f826d0f25 in TBranch::GetEntry (this=0x55b0ae204b20, entry=0, getall=0) at ../tree/tree/src/TBranch.cxx:1691. #16 0x00007f4f826e47af in TBranchElement::GetEntry (this=0x55b0ae204b20, entry=0, getall=0) at ../tree/tree/src/TBranchElement.cxx:2714. #17 0x00007f4f82e8de93 in ROOT::Detail::TBranchProxy::Read (this=0x55b0af313140) at ../tree/treeplayer/inc/TBranchProxy.h:155. #18 0x00007f4f82f3269a in (anonymous namespace)::TCollectionLessSTLReader::GetCP (this=0x55b0af126050, proxy=0x55b0af313140) at ../tree/treeplayer/src/TTreeReaderArray.cxx:112. #19 0x00007f4f82f32746 in (anonymous namespace):",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:967,deployability,Stack,StackTrace,967,"[I/O] Cannot read RVecs written with v6.24 with TTreeReader in current master; Reading with TTree works. This affects RDataFrame critically. To reproduce at the prompt:. ```. /tmp source /home/blue/ROOT/v6.24/_build/bin/thisroot.fish. /tmp root -l # with v6.24. root [0] ROOT::RDataFrame(10).Define(""x"", ""ROOT::RVec<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:63,energy efficiency,current,current,63,"[I/O] Cannot read RVecs written with v6.24 with TTreeReader in current master; Reading with TTree works. This affects RDataFrame critically. To reproduce at the prompt:. ```. /tmp source /home/blue/ROOT/v6.24/_build/bin/thisroot.fish. /tmp root -l # with v6.24. root [0] ROOT::RDataFrame(10).Define(""x"", ""ROOT::RVec<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:893,energy efficiency,core,core,893,"[I/O] Cannot read RVecs written with v6.24 with TTreeReader in current master; Reading with TTree works. This affects RDataFrame critically. To reproduce at the prompt:. ```. /tmp source /home/blue/ROOT/v6.24/_build/bin/thisroot.fish. /tmp root -l # with v6.24. root [0] ROOT::RDataFrame(10).Define(""x"", ""ROOT::RVec<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:1006,energy efficiency,core,core,1006,"nnot read RVecs written with v6.24 with TTreeReader in current master; Reading with TTree works. This affects RDataFrame critically. To reproduce at the prompt:. ```. /tmp source /home/blue/ROOT/v6.24/_build/bin/thisroot.fish. /tmp root -l # with v6.24. root [0] ROOT::RDataFrame(10).Define(""x"", ""ROOT::RVec<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:1239,energy efficiency,core,core,1239,"oot -l # with v6.24. root [0] ROOT::RDataFrame(10).Define(""x"", ""ROOT::RVec<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447. #9 0x00007f4f9bff45fd in TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric>::Action (buf=..., start=0x55b0af0e38d0, end=0x55b0af0e38dc, loo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:1514,energy efficiency,core,core,1514,">Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447. #9 0x00007f4f9bff45fd in TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric>::Action (buf=..., start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550, config=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2467. #10 0x00007f4f9bf90e3b in TStreamerInfoActions::GenericLooper::ReadNumericalCollection<TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLoo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:1669,energy efficiency,core,core,1669," 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447. #9 0x00007f4f9bff45fd in TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric>::Action (buf=..., start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550, config=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2467. #10 0x00007f4f9bf90e3b in TStreamerInfoActions::GenericLooper::ReadNumericalCollection<TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric> > (buf=..., addr=0x55b0af1eba40, conf=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2617. #11 0x00007f4f9bf6c208 in TStreamerInfoA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:2922,integrability,buffer,buffer,2922,"80, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447. #9 0x00007f4f9bff45fd in TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric>::Action (buf=..., start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550, config=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2467. #10 0x00007f4f9bf90e3b in TStreamerInfoActions::GenericLooper::ReadNumericalCollection<TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric> > (buf=..., addr=0x55b0af1eba40, conf=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2617. #11 0x00007f4f9bf6c208 in TStreamerInfoActions::GenericLooper::ReadCollectionBasicType<int> (buf=..., addr=0x55b0af1eba40, conf=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2650. #12 0x00007f4f9be4b627 in TStreamerInfoActions::TConfiguredAction::operator() (this=0x55b0af5360e0, buffer=..., object=0x55b0af1eba40) at ../io/io/inc/TStreamerInfoActions.h:123. #13 0x00007f4f9be49407 in TBufferFile::ApplySequence (this=0x55b0af1d9620, sequence=..., obj=0x55b0af1eba40) at ../io/io/src/TBufferFile.cxx:3572. #14 0x00007f4f826ebd17 in TBranchElement::ReadLeavesMember (this=0x55b0ae204b20, b=...) at ../tree/tree/src/TBranchElement.cxx:4499. #15 0x00007f4f826d0f25 in TBranch::GetEntry (this=0x55b0ae204b20, entry=0, getall=0) at ../tree/tree/src/TBranch.cxx:1691. #16 0x00007f4f826e47af in TBranchElement::GetEntry (this=0x55b0ae204b20, entry=0, getall=0) at ../tree/tree/src/TBranchElement.cxx:2714. #17 0x00007f4f82e8de93 in ROOT::Detail::TBranchProxy::Read (this=0x55b0af313140) at ../tree/treeplayer/inc/TBranchProxy.h:155. #18 0x00007f4f82f3269a in (anonymous namespace)::TCollectionLessSTLReader::GetCP (this=0x55b0af126050, proxy=0x55b0af313140) at ../tree/treeplayer/src/TTreeReaderArray.cxx:112. #19 0x00007f4f82f32746 in (anonymous namespace)::TCollectionLessSTLReader::GetSi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:3771,interoperability,prox,proxy,3771,"/io/io/src/TStreamerInfoActions.cxx:2467. #10 0x00007f4f9bf90e3b in TStreamerInfoActions::GenericLooper::ReadNumericalCollection<TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric> > (buf=..., addr=0x55b0af1eba40, conf=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2617. #11 0x00007f4f9bf6c208 in TStreamerInfoActions::GenericLooper::ReadCollectionBasicType<int> (buf=..., addr=0x55b0af1eba40, conf=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2650. #12 0x00007f4f9be4b627 in TStreamerInfoActions::TConfiguredAction::operator() (this=0x55b0af5360e0, buffer=..., object=0x55b0af1eba40) at ../io/io/inc/TStreamerInfoActions.h:123. #13 0x00007f4f9be49407 in TBufferFile::ApplySequence (this=0x55b0af1d9620, sequence=..., obj=0x55b0af1eba40) at ../io/io/src/TBufferFile.cxx:3572. #14 0x00007f4f826ebd17 in TBranchElement::ReadLeavesMember (this=0x55b0ae204b20, b=...) at ../tree/tree/src/TBranchElement.cxx:4499. #15 0x00007f4f826d0f25 in TBranch::GetEntry (this=0x55b0ae204b20, entry=0, getall=0) at ../tree/tree/src/TBranch.cxx:1691. #16 0x00007f4f826e47af in TBranchElement::GetEntry (this=0x55b0ae204b20, entry=0, getall=0) at ../tree/tree/src/TBranchElement.cxx:2714. #17 0x00007f4f82e8de93 in ROOT::Detail::TBranchProxy::Read (this=0x55b0af313140) at ../tree/treeplayer/inc/TBranchProxy.h:155. #18 0x00007f4f82f3269a in (anonymous namespace)::TCollectionLessSTLReader::GetCP (this=0x55b0af126050, proxy=0x55b0af313140) at ../tree/treeplayer/src/TTreeReaderArray.cxx:112. #19 0x00007f4f82f32746 in (anonymous namespace)::TCollectionLessSTLReader::GetSize (this=0x55b0af126050, proxy=0x55b0af313140) at ../tree/treeplayer/src/TTreeReaderArray.cxx:126. #20 0x00007f4f93fe3cf4 in ?? (). #21 0x00007ffe675d19d0 in ?? (). #22 0x000055b0af126050 in ?? (). #23 0x000055b0af260770 in ?? (). #24 0x000055b0af260770 in ?? (). #25 0x00007ffe675d1bc0 in ?? (). #26 0x00007f4f93fe1c4e in ?? (). #27 0x0000000000000000 in ?? (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:3950,interoperability,prox,proxy,3950,"/io/io/src/TStreamerInfoActions.cxx:2467. #10 0x00007f4f9bf90e3b in TStreamerInfoActions::GenericLooper::ReadNumericalCollection<TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric> > (buf=..., addr=0x55b0af1eba40, conf=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2617. #11 0x00007f4f9bf6c208 in TStreamerInfoActions::GenericLooper::ReadCollectionBasicType<int> (buf=..., addr=0x55b0af1eba40, conf=0x55b0af070740) at ../io/io/src/TStreamerInfoActions.cxx:2650. #12 0x00007f4f9be4b627 in TStreamerInfoActions::TConfiguredAction::operator() (this=0x55b0af5360e0, buffer=..., object=0x55b0af1eba40) at ../io/io/inc/TStreamerInfoActions.h:123. #13 0x00007f4f9be49407 in TBufferFile::ApplySequence (this=0x55b0af1d9620, sequence=..., obj=0x55b0af1eba40) at ../io/io/src/TBufferFile.cxx:3572. #14 0x00007f4f826ebd17 in TBranchElement::ReadLeavesMember (this=0x55b0ae204b20, b=...) at ../tree/tree/src/TBranchElement.cxx:4499. #15 0x00007f4f826d0f25 in TBranch::GetEntry (this=0x55b0ae204b20, entry=0, getall=0) at ../tree/tree/src/TBranch.cxx:1691. #16 0x00007f4f826e47af in TBranchElement::GetEntry (this=0x55b0ae204b20, entry=0, getall=0) at ../tree/tree/src/TBranchElement.cxx:2714. #17 0x00007f4f82e8de93 in ROOT::Detail::TBranchProxy::Read (this=0x55b0af313140) at ../tree/treeplayer/inc/TBranchProxy.h:155. #18 0x00007f4f82f3269a in (anonymous namespace)::TCollectionLessSTLReader::GetCP (this=0x55b0af126050, proxy=0x55b0af313140) at ../tree/treeplayer/src/TTreeReaderArray.cxx:112. #19 0x00007f4f82f32746 in (anonymous namespace)::TCollectionLessSTLReader::GetSize (this=0x55b0af126050, proxy=0x55b0af313140) at ../tree/treeplayer/src/TTreeReaderArray.cxx:126. #20 0x00007f4f93fe3cf4 in ?? (). #21 0x00007ffe675d19d0 in ?? (). #22 0x000055b0af126050 in ?? (). #23 0x000055b0af260770 in ?? (). #24 0x000055b0af260770 in ?? (). #25 0x00007ffe675d1bc0 in ?? (). #26 0x00007f4f93fe1c4e in ?? (). #27 0x0000000000000000 in ?? (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:1,performance,I/O,I/O,1,"[I/O] Cannot read RVecs written with v6.24 with TTreeReader in current master; Reading with TTree works. This affects RDataFrame critically. To reproduce at the prompt:. ```. /tmp source /home/blue/ROOT/v6.24/_build/bin/thisroot.fish. /tmp root -l # with v6.24. root [0] ROOT::RDataFrame(10).Define(""x"", ""ROOT::RVec<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:1308,performance,Error,ErrorHandler,1308,"c<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447. #9 0x00007f4f9bff45fd in TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric>::Action (buf=..., start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550, config=0x55b0af070740) at ../io/io/src/TStreamerInf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:1308,safety,Error,ErrorHandler,1308,"c<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447. #9 0x00007f4f9bff45fd in TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric>::Action (buf=..., start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550, config=0x55b0af070740) at ../io/io/src/TStreamerInf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/issues/9136:1308,usability,Error,ErrorHandler,1308,"c<int>{1,2,3}"").Snapshot(""t"", ""f.root"");. root [1] .q. /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish. /tmp root -l # now with master. root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(). Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'. aborting. #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6. #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6. #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120. #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411. #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174. #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152. #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249. #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509. #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447. #9 0x00007f4f9bff45fd in TStreamerInfoActions::GenericLooper::ConvertBasicType<int, int, TStreamerInfoActions::GenericLooper::Numeric>::Action (buf=..., start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550, config=0x55b0af070740) at ../io/io/src/TStreamerInf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9136
https://github.com/root-project/root/pull/9138:47,security,sign,signature,47,"[PyROOT] Get names and types of all overloads' signature; This PR introduces a machinery to get the names and types (separately) of the signature of each overload of a particular `CPPOverload` object. This allows for example for something like. **EDIT**. Here is the latest status of this feature after some discussion:. ```python. >>> import ROOT. >>> ROOT.gInterpreter.Declare("""""". int foo(int a, float b);. int foo(int a);. float foo(float b);. double foo(int a, float b, double c);. ... """"""). True. >>> ROOT.foo. <cppyy.CPPOverload object at 0x7fc470789fd0>. >>> from pprint import pprint. >>> pprint(ROOT.foo.func_overloads_names). {'double ::foo(int a, float b, double c)': ('a', 'b', 'c'),. 'float ::foo(float b)': ('b',),. 'int ::foo(int a)': ('a',),. 'int ::foo(int a, float b)': ('a', 'b')}. >>> pprint(ROOT.foo.func_overloads_types). {'double ::foo(int a, float b, double c)': {'input_types': ('int',. 'float',. 'double'),. 'return_type': 'double'},. 'float ::foo(float b)': {'input_types': ('float',), 'return_type': 'float'},. 'int ::foo(int a)': {'input_types': ('int',), 'return_type': 'int'},. 'int ::foo(int a, float b)': {'input_types': ('int', 'float'),. 'return_type': 'int'}}. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9138
https://github.com/root-project/root/pull/9138:136,security,sign,signature,136,"[PyROOT] Get names and types of all overloads' signature; This PR introduces a machinery to get the names and types (separately) of the signature of each overload of a particular `CPPOverload` object. This allows for example for something like. **EDIT**. Here is the latest status of this feature after some discussion:. ```python. >>> import ROOT. >>> ROOT.gInterpreter.Declare("""""". int foo(int a, float b);. int foo(int a);. float foo(float b);. double foo(int a, float b, double c);. ... """"""). True. >>> ROOT.foo. <cppyy.CPPOverload object at 0x7fc470789fd0>. >>> from pprint import pprint. >>> pprint(ROOT.foo.func_overloads_names). {'double ::foo(int a, float b, double c)': ('a', 'b', 'c'),. 'float ::foo(float b)': ('b',),. 'int ::foo(int a)': ('a',),. 'int ::foo(int a, float b)': ('a', 'b')}. >>> pprint(ROOT.foo.func_overloads_types). {'double ::foo(int a, float b, double c)': {'input_types': ('int',. 'float',. 'double'),. 'return_type': 'double'},. 'float ::foo(float b)': {'input_types': ('float',), 'return_type': 'float'},. 'int ::foo(int a)': {'input_types': ('int',), 'return_type': 'int'},. 'int ::foo(int a, float b)': {'input_types': ('int', 'float'),. 'return_type': 'int'}}. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9138
https://github.com/root-project/root/pull/9138:274,usability,statu,status,274,"[PyROOT] Get names and types of all overloads' signature; This PR introduces a machinery to get the names and types (separately) of the signature of each overload of a particular `CPPOverload` object. This allows for example for something like. **EDIT**. Here is the latest status of this feature after some discussion:. ```python. >>> import ROOT. >>> ROOT.gInterpreter.Declare("""""". int foo(int a, float b);. int foo(int a);. float foo(float b);. double foo(int a, float b, double c);. ... """"""). True. >>> ROOT.foo. <cppyy.CPPOverload object at 0x7fc470789fd0>. >>> from pprint import pprint. >>> pprint(ROOT.foo.func_overloads_names). {'double ::foo(int a, float b, double c)': ('a', 'b', 'c'),. 'float ::foo(float b)': ('b',),. 'int ::foo(int a)': ('a',),. 'int ::foo(int a, float b)': ('a', 'b')}. >>> pprint(ROOT.foo.func_overloads_types). {'double ::foo(int a, float b, double c)': {'input_types': ('int',. 'float',. 'double'),. 'return_type': 'double'},. 'float ::foo(float b)': {'input_types': ('float',), 'return_type': 'float'},. 'int ::foo(int a)': {'input_types': ('int',), 'return_type': 'int'},. 'int ::foo(int a, float b)': {'input_types': ('int', 'float'),. 'return_type': 'int'}}. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9138
https://github.com/root-project/root/pull/9139:97,deployability,stack,stacktrace,97,"[DF] Avoid crash in tutorial due to reused canvas name; This tutorial crashed with the following stacktrace when run. interactively. Avoiding to register a canvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<opt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:5101,deployability,updat,updated,5101,"ry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #38 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #39 0x00007f5b8e95795b in () at /usr/lib/libpython3.9.so.1.0. #40 0x00007f5b8ea3cac6 in () at /usr/lib/libpython3.9.so.1.0. #41 0x00007f5b8ea17554 in () at /usr/lib/libpython3.9.so.1.0. #42 0x00007f5b8e62c259 in start_thread () at /usr/lib/libpthread.so.0. #43 0x00007f5b8e7425e3 in clone () at /usr/lib/libc.so.6. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1153,energy efficiency,optim,optimized,1153,"nvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1175,energy efficiency,core,core,1175,"name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, meth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1290,energy efficiency,core,core,1290,"6c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace):",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1703,energy efficiency,optim,optimized,1703,") at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1726,energy efficiency,optim,optimized,1726,"lient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimiz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1748,energy efficiency,optim,optimized,1748,"0007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../binding",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1772,energy efficiency,optim,optimized,1772,"ent::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1930,energy efficiency,optim,optimized,1930,"ent.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, se",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1952,energy efficiency,optim,optimized,1952,"07f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, off",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1975,energy efficiency,optim,optimized,1975,"nt::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1997,energy efficiency,optim,optimized,1997,"s=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/py",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2157,energy efficiency,optim,optimized,2157," out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2181,energy efficiency,optim,optimized,2181,"rc/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2388,energy efficiency,optim,optimized,2388,"5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2412,energy efficiency,optim,optimized,2412,"l(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2434,energy efficiency,optim,optimized,2434," size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2634,energy efficiency,optim,optimized,2634,".cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2658,energy efficiency,optim,optimized,2658,"8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(ano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2680,energy efficiency,optim,optimized,2680,"gned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2702,energy efficiency,optim,optimized,2702,"mized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOver",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2724,energy efficiency,optim,optimized,2724,"imized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyOb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3210,energy efficiency,optim,optimized,3210,"oot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3526,energy efficiency,optim,optimized,3526,"#24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e9",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:551,integrability,event,event,551,"[DF] Avoid crash in tutorial due to reused canvas name; This tutorial crashed with the following stacktrace when run. interactively. Avoiding to register a canvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<opt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:688,integrability,event,event,688,"[DF] Avoid crash in tutorial due to reused canvas name; This tutorial crashed with the following stacktrace when run. interactively. Avoiding to register a canvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<opt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1407,integrability,Wrap,WrapperCall,1407,"is=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1407,interoperability,Wrapper,WrapperCall,1407,"is=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1574,interoperability,bind,bindings,1574,"/gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1794,interoperability,bind,bindings,1794,") (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2019,interoperability,bind,bindings,2019,"../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2203,interoperability,bind,bindings,2203,"67. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offse",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2477,interoperability,bind,bindings,2477,"2242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2746,interoperability,bind,bindings,2746,"timized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2991,interoperability,bind,bindings,2991,"=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3264,interoperability,bind,bindings,3264,"::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3569,interoperability,bind,bindings,3569,"hod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3797,interoperability,bind,bindings,3797,"5 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #38 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #39 0x00007f5b8e95795b in () at /usr/lib/libpython3.9.so.1.0. #40 0x00007f5b8ea3cac6 in () at /usr/lib/libpython3.9",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:36,modifiability,reu,reused,36,"[DF] Avoid crash in tutorial due to reused canvas name; This tutorial crashed with the following stacktrace when run. interactively. Avoiding to register a canvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<opt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1574,modifiability,bind,bindings,1574,"/gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1794,modifiability,bind,bindings,1794,") (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2019,modifiability,bind,bindings,2019,"../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2203,modifiability,bind,bindings,2203,"67. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offse",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2477,modifiability,bind,bindings,2477,"2242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2746,modifiability,bind,bindings,2746,"timized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2991,modifiability,bind,bindings,2991,"=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3264,modifiability,bind,bindings,3264,"::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3569,modifiability,bind,bindings,3569,"hod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3797,modifiability,bind,bindings,3797,"5 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #38 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #39 0x00007f5b8e95795b in () at /usr/lib/libpython3.9.so.1.0. #40 0x00007f5b8ea3cac6 in () at /usr/lib/libpython3.9",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:192,performance,time,times,192,"[DF] Avoid crash in tutorial due to reused canvas name; This tutorial crashed with the following stacktrace when run. interactively. Avoiding to register a canvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<opt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1153,performance,optimiz,optimized,1153,"nvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1703,performance,optimiz,optimized,1703,") at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1726,performance,optimiz,optimized,1726,"lient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimiz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1748,performance,optimiz,optimized,1748,"0007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../binding",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1772,performance,optimiz,optimized,1772,"ent::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1930,performance,optimiz,optimized,1930,"ent.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, se",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1952,performance,optimiz,optimized,1952,"07f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, off",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1975,performance,optimiz,optimized,1975,"nt::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:1997,performance,optimiz,optimized,1997,"s=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/py",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2157,performance,optimiz,optimized,2157," out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2181,performance,optimiz,optimized,2181,"rc/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2388,performance,optimiz,optimized,2388,"5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2412,performance,optimiz,optimized,2412,"l(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2434,performance,optimiz,optimized,2434," size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2634,performance,optimiz,optimized,2634,".cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2658,performance,optimiz,optimized,2658,"8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(ano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2680,performance,optimiz,optimized,2680,"gned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2702,performance,optimiz,optimized,2702,"mized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOver",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:2724,performance,optimiz,optimized,2724,"imized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833. #22 0x00007f5b8decdc0f in GILCallB (ctxt=0x7f5b79ae0430, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyOb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3210,performance,optimiz,optimized,3210,"oot/cppyy/CPyCppyy/src/Executors.cxx:69. #23 CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(Cppyy::TCppMethod_t, Cppyy::TCppObject_t, CPyCppyy::CallContext*) (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148. #24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:3526,performance,optimiz,optimized,3526,"#24 0x00007f5b8deba4c9 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74. #25 0x00007f5b8debd3a8 in CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=0x55e75ccfd080, offset=0, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149. #26 0x00007f5b8debb6fa in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (this=this entry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e9",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:5,safety,Avoid,Avoid,5,"[DF] Avoid crash in tutorial due to reused canvas name; This tutorial crashed with the following stacktrace when run. interactively. Avoiding to register a canvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<opt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:133,safety,Avoid,Avoiding,133,"[DF] Avoid crash in tutorial due to reused canvas name; This tutorial crashed with the following stacktrace when run. interactively. Avoiding to register a canvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<opt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:5071,safety,test,tested,5071,"ry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #38 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #39 0x00007f5b8e95795b in () at /usr/lib/libpython3.9.so.1.0. #40 0x00007f5b8ea3cac6 in () at /usr/lib/libpython3.9.so.1.0. #41 0x00007f5b8ea17554 in () at /usr/lib/libpython3.9.so.1.0. #42 0x00007f5b8e62c259 in start_thread () at /usr/lib/libpthread.so.0. #43 0x00007f5b8e7425e3 in clone () at /usr/lib/libc.so.6. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:5101,safety,updat,updated,5101,"ry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #38 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #39 0x00007f5b8e95795b in () at /usr/lib/libpython3.9.so.1.0. #40 0x00007f5b8ea3cac6 in () at /usr/lib/libpython3.9.so.1.0. #41 0x00007f5b8ea17554 in () at /usr/lib/libpython3.9.so.1.0. #42 0x00007f5b8e62c259 in start_thread () at /usr/lib/libpthread.so.0. #43 0x00007f5b8e7425e3 in clone () at /usr/lib/libc.so.6. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:5101,security,updat,updated,5101,"ry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #38 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #39 0x00007f5b8e95795b in () at /usr/lib/libpython3.9.so.1.0. #40 0x00007f5b8ea3cac6 in () at /usr/lib/libpython3.9.so.1.0. #41 0x00007f5b8ea17554 in () at /usr/lib/libpython3.9.so.1.0. #42 0x00007f5b8e62c259 in start_thread () at /usr/lib/libpthread.so.0. #43 0x00007f5b8e7425e3 in clone () at /usr/lib/libc.so.6. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:5071,testability,test,tested,5071,"ry=0x55e760617f50, self=self entry=0x55e75ccfd080, offset=<optimized out>, ctxt=ctxt entry=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728. #27 0x00007f5b8debc46c in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (this=0x55e760617f50, self= 0x7f5b8080ef50: 0x7f5b808043c0, args=0x7f5b8e1ab040, kwds=<optimized out>, ctxt=0x7f5b79ae0430) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783. #28 0x00007f5b8dec09fe in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, PyObject*, PyObject*) (pymeth=0x7f5b8080ef40, args=0x7f5b8e1ab040, kwds=0x0) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566. #29 0x00007f5b8e941333 in _PyObject_MakeTpCall () at /usr/lib/libpython3.9.so.1.0. #30 0x00007f5b8e93d218 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #31 0x00007f5b8e936fd9 in () at /usr/lib/libpython3.9.so.1.0. #32 0x00007f5b8e948b8e in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #33 0x00007f5b8e93aec9 in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #34 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #35 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #36 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #37 0x00007f5b8e93858e in _PyEval_EvalFrameDefault () at /usr/lib/libpython3.9.so.1.0. #38 0x00007f5b8e94896b in _PyFunction_Vectorcall () at /usr/lib/libpython3.9.so.1.0. #39 0x00007f5b8e95795b in () at /usr/lib/libpython3.9.so.1.0. #40 0x00007f5b8ea3cac6 in () at /usr/lib/libpython3.9.so.1.0. #41 0x00007f5b8ea17554 in () at /usr/lib/libpython3.9.so.1.0. #42 0x00007f5b8e62c259 in start_thread () at /usr/lib/libpthread.so.0. #43 0x00007f5b8e7425e3 in clone () at /usr/lib/libc.so.6. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/pull/9139:118,usability,interact,interactively,118,"[DF] Avoid crash in tutorial due to reused canvas name; This tutorial crashed with the following stacktrace when run. interactively. Avoiding to register a canvas with the same name. multiple times fixes the crash:. ```. #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740. #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789. #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476. #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846. #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656. #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648. #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703. #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067. #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424. #17 0x00007f5b8130600d in (). #18 0x00007f5b79ae0450 in (). #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778. #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816. #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<opt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9139
https://github.com/root-project/root/issues/9140:40,usability,user,user-defined,40,"[ntuple] `const`-qualified members of a user-defined struct do not work; - [X] Checked for duplicates. ### Describe the bug. For `const uint32_t`:. ```. Field c_int32 has unknown type const uint32_t. ```. One interesting thing is that enums never worked, but I did not see the. `const uint32_t` problem in ROOT 6.24.0, it seems to be new in 6.25.1. Could you check if something could be done there? Cheers, Marcin.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9140
https://github.com/root-project/root/issues/9141:631,deployability,stack,stackoverflow,631,"complete JIRA migration to find if bug already reported; ### Explain what you would like to see improved. Sometimes, before filing a bug report, I look first if it is already reported here in GitHub, but I forget to check if it may have been reported earlier in JIRA (and is still open). ### Optional: share how it could be improved. There are scripts out there that could be used ot migrate all remaining JIRA issues into GitHub, see e.g.:. https://github.com/hbrands/jira-issues-importer. https://github.com/doctrine/jira-github-issues. And after that, the remaining JIRA tickets could be closed. ### Additional context. https://stackoverflow.com/questions/31125655/is-there-a-way-to-import-jira-issues-to-github",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9141
https://github.com/root-project/root/issues/9141:302,interoperability,share,share,302,"complete JIRA migration to find if bug already reported; ### Explain what you would like to see improved. Sometimes, before filing a bug report, I look first if it is already reported here in GitHub, but I forget to check if it may have been reported earlier in JIRA (and is still open). ### Optional: share how it could be improved. There are scripts out there that could be used ot migrate all remaining JIRA issues into GitHub, see e.g.:. https://github.com/hbrands/jira-issues-importer. https://github.com/doctrine/jira-github-issues. And after that, the remaining JIRA tickets could be closed. ### Additional context. https://stackoverflow.com/questions/31125655/is-there-a-way-to-import-jira-issues-to-github",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9141
https://github.com/root-project/root/issues/9141:0,safety,compl,complete,0,"complete JIRA migration to find if bug already reported; ### Explain what you would like to see improved. Sometimes, before filing a bug report, I look first if it is already reported here in GitHub, but I forget to check if it may have been reported earlier in JIRA (and is still open). ### Optional: share how it could be improved. There are scripts out there that could be used ot migrate all remaining JIRA issues into GitHub, see e.g.:. https://github.com/hbrands/jira-issues-importer. https://github.com/doctrine/jira-github-issues. And after that, the remaining JIRA tickets could be closed. ### Additional context. https://stackoverflow.com/questions/31125655/is-there-a-way-to-import-jira-issues-to-github",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9141
https://github.com/root-project/root/issues/9141:0,security,compl,complete,0,"complete JIRA migration to find if bug already reported; ### Explain what you would like to see improved. Sometimes, before filing a bug report, I look first if it is already reported here in GitHub, but I forget to check if it may have been reported earlier in JIRA (and is still open). ### Optional: share how it could be improved. There are scripts out there that could be used ot migrate all remaining JIRA issues into GitHub, see e.g.:. https://github.com/hbrands/jira-issues-importer. https://github.com/doctrine/jira-github-issues. And after that, the remaining JIRA tickets could be closed. ### Additional context. https://stackoverflow.com/questions/31125655/is-there-a-way-to-import-jira-issues-to-github",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9141
https://github.com/root-project/root/issues/9141:614,testability,context,context,614,"complete JIRA migration to find if bug already reported; ### Explain what you would like to see improved. Sometimes, before filing a bug report, I look first if it is already reported here in GitHub, but I forget to check if it may have been reported earlier in JIRA (and is still open). ### Optional: share how it could be improved. There are scripts out there that could be used ot migrate all remaining JIRA issues into GitHub, see e.g.:. https://github.com/hbrands/jira-issues-importer. https://github.com/doctrine/jira-github-issues. And after that, the remaining JIRA tickets could be closed. ### Additional context. https://stackoverflow.com/questions/31125655/is-there-a-way-to-import-jira-issues-to-github",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9141
https://github.com/root-project/root/issues/9141:591,usability,close,closed,591,"complete JIRA migration to find if bug already reported; ### Explain what you would like to see improved. Sometimes, before filing a bug report, I look first if it is already reported here in GitHub, but I forget to check if it may have been reported earlier in JIRA (and is still open). ### Optional: share how it could be improved. There are scripts out there that could be used ot migrate all remaining JIRA issues into GitHub, see e.g.:. https://github.com/hbrands/jira-issues-importer. https://github.com/doctrine/jira-github-issues. And after that, the remaining JIRA tickets could be closed. ### Additional context. https://stackoverflow.com/questions/31125655/is-there-a-way-to-import-jira-issues-to-github",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9141
https://github.com/root-project/root/pull/9142:203,security,intrus,intrusive,203,"Add the '--notebook' option for Windows; Copy the code for the `--notebook` option from `rootx/src/rootx.cxx`, which is for X11 and Cocoa only (i.e. Not built on Windows). This is the simplest (and less intrusive) way of fixing it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9142
https://github.com/root-project/root/pull/9142:184,testability,simpl,simplest,184,"Add the '--notebook' option for Windows; Copy the code for the `--notebook` option from `rootx/src/rootx.cxx`, which is for X11 and Cocoa only (i.e. Not built on Windows). This is the simplest (and less intrusive) way of fixing it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9142
https://github.com/root-project/root/pull/9142:184,usability,simpl,simplest,184,"Add the '--notebook' option for Windows; Copy the code for the `--notebook` option from `rootx/src/rootx.cxx`, which is for X11 and Cocoa only (i.e. Not built on Windows). This is the simplest (and less intrusive) way of fixing it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9142
https://github.com/root-project/root/issues/9143:107,energy efficiency,Draw,Draw,107,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:496,energy efficiency,Draw,Draw,496,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:518,safety,test,test,518,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:540,safety,test,test,540,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:562,safety,test,test,562,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:692,safety,input,input,692,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:698,safety,test,test,698,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:887,security,Team,Team,887,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:518,testability,test,test,518,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:540,testability,test,test,540,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:562,testability,test,test,562,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:698,testability,test,test,698,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:1236,testability,context,context,1236,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:220,usability,user,user-images,220,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:329,usability,behavi,behavior,329,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:627,usability,document,documentclass,627,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:680,usability,document,document,680,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:692,usability,input,input,692,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:714,usability,document,document,714,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/issues/9143:1092,usability,help,help,1092,"star marker invisible in latex output; - [x] Checked for duplicates. ### Describe the bug. When using TH1::Draw(""P*""), the PNG and PDF output looks fine, but the markers are invisible in the TEX output. ![image](https://user-images.githubusercontent.com/10653970/137940738-13f9dee9-53c5-4984-964f-ce9740e4d681.png). ### Expected behavior. Markers are visible in TEX also. ### To Reproduce. from ROOT import TCanvas, TH1D. ```. c = TCanvas(). h = TH1D(""h"", ""h"", 10,0,10). h.SetBinContent(2,10). h.Draw(""P*""). c.SaveAs(""test.png""). c.SaveAs(""test.pdf""). c.SaveAs(""test.tex""). ```. and then compile the latex output using:. ```. \documentclass{standalone}. \usepackage{tikz}. \begin{document}. \input{test.tex}. \end{document}. ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.25/01 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 01 2021, 23:19:42 |. | From heads/master@v6-25-01-1861-g6b33e04cac |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://sft.its.cern.ch/jira/browse/ROOT-8587",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9143
https://github.com/root-project/root/pull/9144:79,integrability,messag,message,79,"[PyROOT] Remove TTree.AsMatrix in 6.26; As announced in 6.24 via a deprecation message, TTree.AsMatrix will be removed in 6.26. Any use of it should be replaced with. RDataFrame.AsNumpy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9144
https://github.com/root-project/root/pull/9144:79,interoperability,messag,message,79,"[PyROOT] Remove TTree.AsMatrix in 6.26; As announced in 6.24 via a deprecation message, TTree.AsMatrix will be removed in 6.26. Any use of it should be replaced with. RDataFrame.AsNumpy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9144
https://github.com/root-project/root/issues/9145:741,deployability,contain,contains,741,"[DF] Various improvements in SaveGraph; [SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads. - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context. <!--. Add any other context about the problem here. -->. Related old jira tickets:. - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph). - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9145
https://github.com/root-project/root/issues/9145:212,modifiability,variab,variables,212,"[DF] Various improvements in SaveGraph; [SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads. - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context. <!--. Add any other context about the problem here. -->. Related old jira tickets:. - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph). - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9145
https://github.com/root-project/root/issues/9145:288,performance,concurren,concurrently,288,"[DF] Various improvements in SaveGraph; [SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads. - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context. <!--. Add any other context about the problem here. -->. Related old jira tickets:. - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph). - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9145
https://github.com/root-project/root/issues/9145:270,safety,safe,safe,270,"[DF] Various improvements in SaveGraph; [SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads. - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context. <!--. Add any other context about the problem here. -->. Related old jira tickets:. - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph). - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9145
https://github.com/root-project/root/issues/9145:449,testability,context,context,449,"[DF] Various improvements in SaveGraph; [SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads. - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context. <!--. Add any other context about the problem here. -->. Related old jira tickets:. - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph). - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9145
https://github.com/root-project/root/issues/9145:478,testability,context,context,478,"[DF] Various improvements in SaveGraph; [SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads. - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context. <!--. Add any other context about the problem here. -->. Related old jira tickets:. - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph). - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9145
https://github.com/root-project/root/issues/9145:427,usability,guid,guide,427,"[DF] Various improvements in SaveGraph; [SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads. - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context. <!--. Add any other context about the problem here. -->. Related old jira tickets:. - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph). - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9145
https://github.com/root-project/root/pull/9146:126,deployability,Updat,Update,126,[webgui] let disable path change in RFileDialog; Let configure such property. Better handling of double click in file dialog. Update JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9146
https://github.com/root-project/root/pull/9146:53,integrability,configur,configure,53,[webgui] let disable path change in RFileDialog; Let configure such property. Better handling of double click in file dialog. Update JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9146
https://github.com/root-project/root/pull/9146:53,modifiability,configur,configure,53,[webgui] let disable path change in RFileDialog; Let configure such property. Better handling of double click in file dialog. Update JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9146
https://github.com/root-project/root/pull/9146:126,safety,Updat,Update,126,[webgui] let disable path change in RFileDialog; Let configure such property. Better handling of double click in file dialog. Update JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9146
https://github.com/root-project/root/pull/9146:53,security,configur,configure,53,[webgui] let disable path change in RFileDialog; Let configure such property. Better handling of double click in file dialog. Update JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9146
https://github.com/root-project/root/pull/9146:126,security,Updat,Update,126,[webgui] let disable path change in RFileDialog; Let configure such property. Better handling of double click in file dialog. Update JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9146
https://github.com/root-project/root/pull/9146:118,usability,dialog,dialog,118,[webgui] let disable path change in RFileDialog; Let configure such property. Better handling of double click in file dialog. Update JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9146
https://github.com/root-project/root/pull/9150:56,deployability,integr,integrals,56,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:138,deployability,depend,depends,138,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:568,deployability,updat,updated,568,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:56,integrability,integr,integrals,56,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:138,integrability,depend,depends,138,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:56,interoperability,integr,integrals,56,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:302,interoperability,compatib,compatible,302,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:56,modifiability,integr,integrals,56,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:138,modifiability,depend,depends,138,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:56,reliability,integr,integrals,56,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:138,safety,depend,depends,138,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:224,safety,test,test,224,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:248,safety,test,test,248,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:568,safety,updat,updated,568,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:629,safety,test,tests,629,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:56,security,integr,integrals,56,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:568,security,updat,updated,568,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:56,testability,integr,integrals,56,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:138,testability,depend,depends,138,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:219,testability,unit,unit,219,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:224,testability,test,test,224,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:248,testability,test,test,248,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9150:629,testability,test,tests,629,"[RF] Define norm. set for multi-range fit normalization integrals; This fixes the results of multi-range fits where the shape of the pdf. depends on the normalization set, e.g. with a multidimenstional. `RooProdPdf`. A unit test was implemented to test that the result of such a 2D. multi-range fit is compatible with the fit result over the full range. It is expected that if the union of the ranges is the full range, the. result will exactly match the full-range fit. This has already been. checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is. such a 2D multi-range fits in the tests (see also the. rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9150
https://github.com/root-project/root/pull/9152:20,deployability,manag,management,20,[ntuple] Fix memory management on read of std::vector elements; The problem of constructor and destructor calls when reading std::vector of non-trivial types has come up in #8770. This fixes #9133. To me it looks like we would benefit from storing information about trivially constructable/destructable types in the `RField` class. @jalopezg-r00t @eguiraud @pcanal Let me know what you think.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9152
https://github.com/root-project/root/pull/9152:20,energy efficiency,manag,management,20,[ntuple] Fix memory management on read of std::vector elements; The problem of constructor and destructor calls when reading std::vector of non-trivial types has come up in #8770. This fixes #9133. To me it looks like we would benefit from storing information about trivially constructable/destructable types in the `RField` class. @jalopezg-r00t @eguiraud @pcanal Let me know what you think.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9152
https://github.com/root-project/root/pull/9152:13,performance,memor,memory,13,[ntuple] Fix memory management on read of std::vector elements; The problem of constructor and destructor calls when reading std::vector of non-trivial types has come up in #8770. This fixes #9133. To me it looks like we would benefit from storing information about trivially constructable/destructable types in the `RField` class. @jalopezg-r00t @eguiraud @pcanal Let me know what you think.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9152
https://github.com/root-project/root/pull/9152:20,safety,manag,management,20,[ntuple] Fix memory management on read of std::vector elements; The problem of constructor and destructor calls when reading std::vector of non-trivial types has come up in #8770. This fixes #9133. To me it looks like we would benefit from storing information about trivially constructable/destructable types in the `RField` class. @jalopezg-r00t @eguiraud @pcanal Let me know what you think.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9152
https://github.com/root-project/root/pull/9152:13,usability,memor,memory,13,[ntuple] Fix memory management on read of std::vector elements; The problem of constructor and destructor calls when reading std::vector of non-trivial types has come up in #8770. This fixes #9133. To me it looks like we would benefit from storing information about trivially constructable/destructable types in the `RField` class. @jalopezg-r00t @eguiraud @pcanal Let me know what you think.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9152
https://github.com/root-project/root/pull/9153:69,deployability,version,version,69,"Refactor computation graph trigger in distributed RDataFrame; Second version of #9122 , with ideas that came after discussion with @eguiraud @etejedor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9153
https://github.com/root-project/root/pull/9153:69,integrability,version,version,69,"Refactor computation graph trigger in distributed RDataFrame; Second version of #9122 , with ideas that came after discussion with @eguiraud @etejedor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9153
https://github.com/root-project/root/pull/9153:38,interoperability,distribut,distributed,38,"Refactor computation graph trigger in distributed RDataFrame; Second version of #9122 , with ideas that came after discussion with @eguiraud @etejedor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9153
https://github.com/root-project/root/pull/9153:0,modifiability,Refact,Refactor,0,"Refactor computation graph trigger in distributed RDataFrame; Second version of #9122 , with ideas that came after discussion with @eguiraud @etejedor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9153
https://github.com/root-project/root/pull/9153:69,modifiability,version,version,69,"Refactor computation graph trigger in distributed RDataFrame; Second version of #9122 , with ideas that came after discussion with @eguiraud @etejedor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9153
https://github.com/root-project/root/pull/9153:0,performance,Refactor,Refactor,0,"Refactor computation graph trigger in distributed RDataFrame; Second version of #9122 , with ideas that came after discussion with @eguiraud @etejedor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9153
https://github.com/root-project/root/issues/9154:58,availability,error,error,58,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:171,availability,heal,health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error,171,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:372,availability,error,error,372,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:406,availability,Error,Error,406,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:490,availability,Error,Error,490,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:628,availability,Error,Error,628,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:759,availability,Error,Error,759,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:843,availability,Error,Error,843,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:981,availability,Error,Error,981,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1118,availability,Error,Error,1118,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1202,availability,Error,Error,1202,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1340,availability,Error,Error,1340,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1516,availability,error,error,1516,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1575,availability,error,error,1575,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1641,availability,heal,health,1641,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1865,deployability,patch,patches,1865,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1893,deployability,build,build,1893,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:26,performance,content,content,26,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:58,performance,error,error,58,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:199,performance,content,content-tfile-ok-but-ttree-corrupted-and-no-error,199,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:372,performance,error,error,372,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:406,performance,Error,Error,406,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:490,performance,Error,Error,490,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:628,performance,Error,Error,628,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:759,performance,Error,Error,759,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:843,performance,Error,Error,843,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:981,performance,Error,Error,981,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1118,performance,Error,Error,1118,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1202,performance,Error,Error,1202,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1340,performance,Error,Error,1340,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1516,performance,error,error,1516,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1575,performance,error,error,1575,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:58,safety,error,error,58,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:162,safety,valid,validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error,162,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:329,safety,Test,TestBit,329,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:372,safety,error,error,372,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:406,safety,Error,Error,406,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:450,safety,detect,detected,450,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:490,safety,Error,Error,490,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:628,safety,Error,Error,628,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:759,safety,Error,Error,759,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:803,safety,detect,detected,803,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:843,safety,Error,Error,843,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:981,safety,Error,Error,981,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1118,safety,Error,Error,1118,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1162,safety,detect,detected,1162,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1202,safety,Error,Error,1202,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1340,safety,Error,Error,1340,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1516,safety,error,error,1516,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1575,safety,error,error,1575,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1768,safety,test,test,1768,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1865,safety,patch,patches,1865,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:46,security,sign,signaled,46,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:450,security,detect,detected,450,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:803,security,detect,detected,803,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1162,security,detect,detected,1162,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1865,security,patch,patches,1865,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:329,testability,Test,TestBit,329,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1768,testability,test,test,1768,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:58,usability,error,error,58,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:243,usability,error,error,243,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:372,usability,error,error,372,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:406,usability,Error,Error,406,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:490,usability,Error,Error,490,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:628,usability,Error,Error,628,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:759,usability,Error,Error,759,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:843,usability,Error,Error,843,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:981,usability,Error,Error,981,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1118,usability,Error,Error,1118,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1202,usability,Error,Error,1202,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1340,usability,Error,Error,1340,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1491,usability,behavi,behavior,1491,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1516,usability,error,error,1516,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/issues/9154:1575,usability,error,error,1575,"ROOT.TFile:: corrupt data content (TTree) not signaled/no error thrown; Checked for duplicates: not found. Discussion started here:. https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug. Using from python:. A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:. ```. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0. Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596. Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836. Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0. ```. ### Expected behavior. Any catch-able error either at TFile opening or at least when parsing and error is encounter ... At this point i cannot check and asses the health of the file from within python. ### To Reproduce. https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202. a test file can be provided through private communication. ### Setup. fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d. manual build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9154
https://github.com/root-project/root/pull/9155:74,availability,error,errors,74,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:119,availability,error,error,119,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:424,availability,error,error,424,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:162,integrability,pub,public,162,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:467,integrability,pub,public,467,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:74,performance,error,errors,74,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:119,performance,error,error,119,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:424,performance,error,error,424,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:74,safety,error,errors,74,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:119,safety,error,error,119,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:181,safety,Compl,ComplexStruct,181,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:235,safety,Compl,ComplexStruct,235,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:340,safety,Test,TestBody,340,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:358,safety,Test,TestBody,358,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:424,safety,error,error,424,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:486,safety,Compl,ComplexStruct,486,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:538,safety,Compl,ComplexStruct,538,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:643,safety,Test,TestBody,643,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:661,safety,Test,TestBody,661,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:181,security,Compl,ComplexStruct,181,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:235,security,Compl,ComplexStruct,235,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:486,security,Compl,ComplexStruct,486,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:538,security,Compl,ComplexStruct,538,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:340,testability,Test,TestBody,340,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:358,testability,Test,TestBody,358,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:643,testability,Test,TestBody,643,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:661,testability,Test,TestBody,661,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:74,usability,error,errors,74,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:119,usability,error,error,119,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9155:424,usability,error,error,424,"Fix unresolved external statics on Windows; Fix the following compilation errors on Windows:. ```. rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallConstructor"" (?gNCallConstructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). rfield_vector.obj : error LNK2019: unresolved external symbol ""public: static int ComplexStruct::gNCallDestructor"" (?gNCallDestructor@ComplexStruct@@2HA) referenced in function ""private: virtual void __thiscall RNTuple_ComplexVector_Test::TestBody(void)"" (?TestBody@RNTuple_ComplexVector_Test@@EAEXXZ). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9155
https://github.com/root-project/root/pull/9156:191,deployability,updat,updated,191,[TGNumberEntry] add centisecond display option; # This Pull request:. ## Changes or fixes:. Adds support for centiseconds in TGNumberentry. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8794.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9156
https://github.com/root-project/root/pull/9156:161,safety,test,tested,161,[TGNumberEntry] add centisecond display option; # This Pull request:. ## Changes or fixes:. Adds support for centiseconds in TGNumberentry. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8794.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9156
https://github.com/root-project/root/pull/9156:191,safety,updat,updated,191,[TGNumberEntry] add centisecond display option; # This Pull request:. ## Changes or fixes:. Adds support for centiseconds in TGNumberentry. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8794.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9156
https://github.com/root-project/root/pull/9156:191,security,updat,updated,191,[TGNumberEntry] add centisecond display option; # This Pull request:. ## Changes or fixes:. Adds support for centiseconds in TGNumberentry. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8794.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9156
https://github.com/root-project/root/pull/9156:161,testability,test,tested,161,[TGNumberEntry] add centisecond display option; # This Pull request:. ## Changes or fixes:. Adds support for centiseconds in TGNumberentry. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8794.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9156
https://github.com/root-project/root/pull/9156:97,usability,support,support,97,[TGNumberEntry] add centisecond display option; # This Pull request:. ## Changes or fixes:. Adds support for centiseconds in TGNumberentry. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/8794.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9156
https://github.com/root-project/root/pull/9157:91,deployability,build,build,91,"[v618][RF] Fix missing initializer warnings in MemPoolForRooSets.h; This PR should fix the build warnings in the v6.18 nightlies. I have checked that the missing field initializer warnings go away with. this change by compiling the following example snippet under gcc48:. ```C++. // compile with g++ -Wmissing-field-initializers -std=c++11 -o test test.cc. struct A{. A(). : arr_{{}}. {}. std::array<int, 10> arr_ = {{}};. };. int main() {. A a{};. std::cout << a.arr_[0] << std::endl;. return 0;. }. ```. The warnings are reproduced, and can successfully be suppressed by. replacing `{}` with `{{}}`. This is a backport of 855fd44340e13161f88ca09a86e50abf5c1cd5a1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9157
https://github.com/root-project/root/pull/9157:343,safety,test,test,343,"[v618][RF] Fix missing initializer warnings in MemPoolForRooSets.h; This PR should fix the build warnings in the v6.18 nightlies. I have checked that the missing field initializer warnings go away with. this change by compiling the following example snippet under gcc48:. ```C++. // compile with g++ -Wmissing-field-initializers -std=c++11 -o test test.cc. struct A{. A(). : arr_{{}}. {}. std::array<int, 10> arr_ = {{}};. };. int main() {. A a{};. std::cout << a.arr_[0] << std::endl;. return 0;. }. ```. The warnings are reproduced, and can successfully be suppressed by. replacing `{}` with `{{}}`. This is a backport of 855fd44340e13161f88ca09a86e50abf5c1cd5a1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9157
https://github.com/root-project/root/pull/9157:348,safety,test,test,348,"[v618][RF] Fix missing initializer warnings in MemPoolForRooSets.h; This PR should fix the build warnings in the v6.18 nightlies. I have checked that the missing field initializer warnings go away with. this change by compiling the following example snippet under gcc48:. ```C++. // compile with g++ -Wmissing-field-initializers -std=c++11 -o test test.cc. struct A{. A(). : arr_{{}}. {}. std::array<int, 10> arr_ = {{}};. };. int main() {. A a{};. std::cout << a.arr_[0] << std::endl;. return 0;. }. ```. The warnings are reproduced, and can successfully be suppressed by. replacing `{}` with `{{}}`. This is a backport of 855fd44340e13161f88ca09a86e50abf5c1cd5a1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9157
https://github.com/root-project/root/pull/9157:343,testability,test,test,343,"[v618][RF] Fix missing initializer warnings in MemPoolForRooSets.h; This PR should fix the build warnings in the v6.18 nightlies. I have checked that the missing field initializer warnings go away with. this change by compiling the following example snippet under gcc48:. ```C++. // compile with g++ -Wmissing-field-initializers -std=c++11 -o test test.cc. struct A{. A(). : arr_{{}}. {}. std::array<int, 10> arr_ = {{}};. };. int main() {. A a{};. std::cout << a.arr_[0] << std::endl;. return 0;. }. ```. The warnings are reproduced, and can successfully be suppressed by. replacing `{}` with `{{}}`. This is a backport of 855fd44340e13161f88ca09a86e50abf5c1cd5a1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9157
https://github.com/root-project/root/pull/9157:348,testability,test,test,348,"[v618][RF] Fix missing initializer warnings in MemPoolForRooSets.h; This PR should fix the build warnings in the v6.18 nightlies. I have checked that the missing field initializer warnings go away with. this change by compiling the following example snippet under gcc48:. ```C++. // compile with g++ -Wmissing-field-initializers -std=c++11 -o test test.cc. struct A{. A(). : arr_{{}}. {}. std::array<int, 10> arr_ = {{}};. };. int main() {. A a{};. std::cout << a.arr_[0] << std::endl;. return 0;. }. ```. The warnings are reproduced, and can successfully be suppressed by. replacing `{}` with `{{}}`. This is a backport of 855fd44340e13161f88ca09a86e50abf5c1cd5a1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9157
https://github.com/root-project/root/pull/9158:315,availability,redund,redundant,315,[ntuple] Discard `const`/`volatile` qualifiers in RField type names; This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:. - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function. - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:. - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9158
https://github.com/root-project/root/pull/9158:315,deployability,redundan,redundant,315,[ntuple] Discard `const`/`volatile` qualifiers in RField type names; This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:. - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function. - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:. - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9158
https://github.com/root-project/root/pull/9158:192,reliability,doe,does,192,[ntuple] Discard `const`/`volatile` qualifiers in RField type names; This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:. - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function. - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:. - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9158
https://github.com/root-project/root/pull/9158:315,reliability,redundan,redundant,315,[ntuple] Discard `const`/`volatile` qualifiers in RField type names; This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:. - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function. - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:. - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9158
https://github.com/root-project/root/pull/9158:315,safety,redund,redundant,315,[ntuple] Discard `const`/`volatile` qualifiers in RField type names; This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:. - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function. - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:. - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9158
https://github.com/root-project/root/pull/9158:369,safety,test,test,369,[ntuple] Discard `const`/`volatile` qualifiers in RField type names; This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:. - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function. - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:. - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9158
https://github.com/root-project/root/pull/9158:439,safety,test,tested,439,[ntuple] Discard `const`/`volatile` qualifiers in RField type names; This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:. - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function. - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:. - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9158
https://github.com/root-project/root/pull/9158:369,testability,test,test,369,[ntuple] Discard `const`/`volatile` qualifiers in RField type names; This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:. - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function. - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:. - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9158
https://github.com/root-project/root/pull/9158:439,testability,test,tested,439,[ntuple] Discard `const`/`volatile` qualifiers in RField type names; This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:. - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function. - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:. - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9158
https://github.com/root-project/root/pull/9159:85,modifiability,refact,refactoring,85,[DF] Remove unused data members from RDefineBase; They were likely forgot after some refactoring.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9159
https://github.com/root-project/root/pull/9159:85,performance,refactor,refactoring,85,[DF] Remove unused data members from RDefineBase; They were likely forgot after some refactoring.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9159
https://github.com/root-project/root/pull/9160:310,deployability,Depend,DependentTy,310,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:310,integrability,Depend,DependentTy,310,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:474,integrability,messag,messages,474,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:474,interoperability,messag,messages,474,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:310,modifiability,Depend,DependentTy,310,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:463,reliability,diagno,diagnostic,463,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:310,safety,Depend,DependentTy,310,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:755,safety,test,tested,755,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:40,security,ident,identifiers,40,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:100,security,ident,identifiers,100,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:123,security,token,token,123,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:341,security,ident,identifier,341,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:680,security,ident,identifiers,680,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:716,security,ident,identifier,716,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:727,security,token,token,727,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:310,testability,Depend,DependentTy,310,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:463,testability,diagno,diagnostic,463,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9160:755,testability,test,tested,755,"[tcling] Disable runtime resolution for identifiers that are certainly types; Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:. - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:. - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9160
https://github.com/root-project/root/pull/9161:176,energy efficiency,current,currently,176,"[RF] Fix weights in `SumW2Error()` fits to RooDataHist with batch mode; If the `SumW2Error` correction is requested on fits with the batch mode,. the weights of each entry are currently determined to be the square of. the original weight for each entry. In the binned fit case, this is wrong. One should not square the entry. weight (or more precisely bin weight in the binned case), but take the. sum of squares of event weights when they were added to the histrogram. The RooDataHist class keeps track of these sum of squared weights, and. this commit changes the code in `RooNLLVar` and the RooFit dataset. classes such that these sums of squared weights are used in the batch. mode fits. This fixes issue #9118.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9161
https://github.com/root-project/root/pull/9161:60,integrability,batch,batch,60,"[RF] Fix weights in `SumW2Error()` fits to RooDataHist with batch mode; If the `SumW2Error` correction is requested on fits with the batch mode,. the weights of each entry are currently determined to be the square of. the original weight for each entry. In the binned fit case, this is wrong. One should not square the entry. weight (or more precisely bin weight in the binned case), but take the. sum of squares of event weights when they were added to the histrogram. The RooDataHist class keeps track of these sum of squared weights, and. this commit changes the code in `RooNLLVar` and the RooFit dataset. classes such that these sums of squared weights are used in the batch. mode fits. This fixes issue #9118.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9161
https://github.com/root-project/root/pull/9161:133,integrability,batch,batch,133,"[RF] Fix weights in `SumW2Error()` fits to RooDataHist with batch mode; If the `SumW2Error` correction is requested on fits with the batch mode,. the weights of each entry are currently determined to be the square of. the original weight for each entry. In the binned fit case, this is wrong. One should not square the entry. weight (or more precisely bin weight in the binned case), but take the. sum of squares of event weights when they were added to the histrogram. The RooDataHist class keeps track of these sum of squared weights, and. this commit changes the code in `RooNLLVar` and the RooFit dataset. classes such that these sums of squared weights are used in the batch. mode fits. This fixes issue #9118.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9161
https://github.com/root-project/root/pull/9161:416,integrability,event,event,416,"[RF] Fix weights in `SumW2Error()` fits to RooDataHist with batch mode; If the `SumW2Error` correction is requested on fits with the batch mode,. the weights of each entry are currently determined to be the square of. the original weight for each entry. In the binned fit case, this is wrong. One should not square the entry. weight (or more precisely bin weight in the binned case), but take the. sum of squares of event weights when they were added to the histrogram. The RooDataHist class keeps track of these sum of squared weights, and. this commit changes the code in `RooNLLVar` and the RooFit dataset. classes such that these sums of squared weights are used in the batch. mode fits. This fixes issue #9118.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9161
https://github.com/root-project/root/pull/9161:674,integrability,batch,batch,674,"[RF] Fix weights in `SumW2Error()` fits to RooDataHist with batch mode; If the `SumW2Error` correction is requested on fits with the batch mode,. the weights of each entry are currently determined to be the square of. the original weight for each entry. In the binned fit case, this is wrong. One should not square the entry. weight (or more precisely bin weight in the binned case), but take the. sum of squares of event weights when they were added to the histrogram. The RooDataHist class keeps track of these sum of squared weights, and. this commit changes the code in `RooNLLVar` and the RooFit dataset. classes such that these sums of squared weights are used in the batch. mode fits. This fixes issue #9118.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9161
https://github.com/root-project/root/pull/9161:60,performance,batch,batch,60,"[RF] Fix weights in `SumW2Error()` fits to RooDataHist with batch mode; If the `SumW2Error` correction is requested on fits with the batch mode,. the weights of each entry are currently determined to be the square of. the original weight for each entry. In the binned fit case, this is wrong. One should not square the entry. weight (or more precisely bin weight in the binned case), but take the. sum of squares of event weights when they were added to the histrogram. The RooDataHist class keeps track of these sum of squared weights, and. this commit changes the code in `RooNLLVar` and the RooFit dataset. classes such that these sums of squared weights are used in the batch. mode fits. This fixes issue #9118.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9161
https://github.com/root-project/root/pull/9161:133,performance,batch,batch,133,"[RF] Fix weights in `SumW2Error()` fits to RooDataHist with batch mode; If the `SumW2Error` correction is requested on fits with the batch mode,. the weights of each entry are currently determined to be the square of. the original weight for each entry. In the binned fit case, this is wrong. One should not square the entry. weight (or more precisely bin weight in the binned case), but take the. sum of squares of event weights when they were added to the histrogram. The RooDataHist class keeps track of these sum of squared weights, and. this commit changes the code in `RooNLLVar` and the RooFit dataset. classes such that these sums of squared weights are used in the batch. mode fits. This fixes issue #9118.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9161
https://github.com/root-project/root/pull/9161:674,performance,batch,batch,674,"[RF] Fix weights in `SumW2Error()` fits to RooDataHist with batch mode; If the `SumW2Error` correction is requested on fits with the batch mode,. the weights of each entry are currently determined to be the square of. the original weight for each entry. In the binned fit case, this is wrong. One should not square the entry. weight (or more precisely bin weight in the binned case), but take the. sum of squares of event weights when they were added to the histrogram. The RooDataHist class keeps track of these sum of squared weights, and. this commit changes the code in `RooNLLVar` and the RooFit dataset. classes such that these sums of squared weights are used in the batch. mode fits. This fixes issue #9118.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9161
https://github.com/root-project/root/pull/9163:95,interoperability,specif,specify,95,"[rbrowser] correctly show svg image; When svg image embed into HTML as base64 data, one should specify ""svg+xml"" type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9163
https://github.com/root-project/root/pull/9163:108,interoperability,xml,xml,108,"[rbrowser] correctly show svg image; When svg image embed into HTML as base64 data, one should specify ""svg+xml"" type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9163
https://github.com/root-project/root/pull/9165:187,deployability,automat,automatically,187,"[rbrowser] catch creation of new web window and embed it; If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,. RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:. * start browser. * load `rbox.cxx` macro. * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9165
https://github.com/root-project/root/pull/9165:253,energy efficiency,load,load,253,"[rbrowser] catch creation of new web window and embed it; If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,. RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:. * start browser. * load `rbox.cxx` macro. * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9165
https://github.com/root-project/root/pull/9165:339,energy efficiency,draw,drawings,339,"[rbrowser] catch creation of new web window and embed it; If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,. RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:. * start browser. * load `rbox.cxx` macro. * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9165
https://github.com/root-project/root/pull/9165:253,performance,load,load,253,"[rbrowser] catch creation of new web window and embed it; If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,. RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:. * start browser. * load `rbox.cxx` macro. * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9165
https://github.com/root-project/root/pull/9165:418,reliability,RCa,RCanvas,418,"[rbrowser] catch creation of new web window and embed it; If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,. RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:. * start browser. * load `rbox.cxx` macro. * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9165
https://github.com/root-project/root/pull/9165:159,security,intercept,intercept,159,"[rbrowser] catch creation of new web window and embed it; If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,. RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:. * start browser. * load `rbox.cxx` macro. * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9165
https://github.com/root-project/root/pull/9165:187,testability,automat,automatically,187,"[rbrowser] catch creation of new web window and embed it; If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,. RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:. * start browser. * load `rbox.cxx` macro. * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9165
https://github.com/root-project/root/pull/9165:215,usability,widget,widgets,215,"[rbrowser] catch creation of new web window and embed it; If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,. RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:. * start browser. * load `rbox.cxx` macro. * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9165
https://github.com/root-project/root/pull/9165:409,usability,Support,Support,409,"[rbrowser] catch creation of new web window and embed it; If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,. RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:. * start browser. * load `rbox.cxx` macro. * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9165
https://github.com/root-project/root/issues/9166:27,availability,operat,operator,27,"`std::vector<T,Allocator>::operator[]` with unsafe assignment break pretty printer; ```. $ cling. ****************** CLING ******************. * Type C++ code and press enter to run it *. * Type .q to exit *. *******************************************. [cling]$ #include <vector>. [cling]$ std::vector<int> f = {5,6};. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]=3. (int) 3. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]. (int) 3. ```. (yes yes I know people use [`std::vector<T,Allocator>::at`](https://en.cppreference.com/w/cpp/container/vector/at) often for this exact reason… but the pretty printer should still show all elements, no?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9166
https://github.com/root-project/root/issues/9166:555,deployability,contain,container,555,"`std::vector<T,Allocator>::operator[]` with unsafe assignment break pretty printer; ```. $ cling. ****************** CLING ******************. * Type C++ code and press enter to run it *. * Type .q to exit *. *******************************************. [cling]$ #include <vector>. [cling]$ std::vector<int> f = {5,6};. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]=3. (int) 3. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]. (int) 3. ```. (yes yes I know people use [`std::vector<T,Allocator>::at`](https://en.cppreference.com/w/cpp/container/vector/at) often for this exact reason… but the pretty printer should still show all elements, no?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9166
https://github.com/root-project/root/issues/9166:15,energy efficiency,Alloc,Allocator,15,"`std::vector<T,Allocator>::operator[]` with unsafe assignment break pretty printer; ```. $ cling. ****************** CLING ******************. * Type C++ code and press enter to run it *. * Type .q to exit *. *******************************************. [cling]$ #include <vector>. [cling]$ std::vector<int> f = {5,6};. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]=3. (int) 3. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]. (int) 3. ```. (yes yes I know people use [`std::vector<T,Allocator>::at`](https://en.cppreference.com/w/cpp/container/vector/at) often for this exact reason… but the pretty printer should still show all elements, no?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9166
https://github.com/root-project/root/issues/9166:504,energy efficiency,Alloc,Allocator,504,"`std::vector<T,Allocator>::operator[]` with unsafe assignment break pretty printer; ```. $ cling. ****************** CLING ******************. * Type C++ code and press enter to run it *. * Type .q to exit *. *******************************************. [cling]$ #include <vector>. [cling]$ std::vector<int> f = {5,6};. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]=3. (int) 3. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]. (int) 3. ```. (yes yes I know people use [`std::vector<T,Allocator>::at`](https://en.cppreference.com/w/cpp/container/vector/at) often for this exact reason… but the pretty printer should still show all elements, no?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9166
https://github.com/root-project/root/issues/9166:44,safety,unsaf,unsafe,44,"`std::vector<T,Allocator>::operator[]` with unsafe assignment break pretty printer; ```. $ cling. ****************** CLING ******************. * Type C++ code and press enter to run it *. * Type .q to exit *. *******************************************. [cling]$ #include <vector>. [cling]$ std::vector<int> f = {5,6};. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]=3. (int) 3. [cling]$ f. (std::vector<int> &) { 5, 6 }. [cling]$ f[2]. (int) 3. ```. (yes yes I know people use [`std::vector<T,Allocator>::at`](https://en.cppreference.com/w/cpp/container/vector/at) often for this exact reason… but the pretty printer should still show all elements, no?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9166
https://github.com/root-project/root/pull/9168:18,availability,mask,masking,18,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:417,availability,mask,mask,417,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:598,availability,redund,redundant,598,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1110,availability,error,error,1110,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1124,availability,mask,masking,1124,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1195,availability,state,state,1195,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:598,deployability,redundan,redundant,598,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:970,deployability,observ,observables,970,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1253,deployability,updat,updates,1253,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1265,deployability,observ,observable,1265,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:736,energy efficiency,reduc,reduce,736,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:937,energy efficiency,current,current,937,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:480,integrability,sub,subrange,480,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:614,integrability,sub,subrange,614,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:702,integrability,sub,subrange,702,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1195,integrability,state,state,1195,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:451,modifiability,variab,variable,451,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:297,performance,cach,cacheValidEntries,297,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:324,performance,cach,cacheValidEntries,324,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:511,performance,cach,cacheValidEntries,511,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1110,performance,error,error,1110,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1309,performance,cach,cacheValidEntries,1309,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1381,performance,cach,cacheValidEntries,1381,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:598,reliability,redundan,redundant,598,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1503,reliability,doe,doesn,1503,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:133,safety,valid,valid,133,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:231,safety,valid,valid,231,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:271,safety,valid,valid,271,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:548,safety,valid,valid,548,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:598,safety,redund,redundant,598,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:766,safety,valid,valid,766,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:874,safety,valid,valid,874,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:920,safety,valid,valid,920,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1110,safety,error,error,1110,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1253,safety,updat,updates,1253,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1253,security,updat,updates,1253,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:970,testability,observ,observables,970,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1265,testability,observ,observable,1265,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1002,usability,document,documentation,1002,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1110,usability,error,error,1110,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1343,usability,document,documentation,1343,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9168:1410,usability,shortcut,shortcut,1410,"[RF] Remove entry masking feature from RooDataHist; This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in. RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in. `RooAbsOptTestStatistic` to mask histogram entries out of the variable. range in case of a subrange fit. The reasons why `cacheValidEntries` and. the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is. creating a clone of the dataset with the subrange only using. `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For. the RooDataHist, `valid()` tells you ""if bin `i` is considered. valid within the current range definitions of all observables"". (according to the documentation). For the RooDataSet, it always. returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the. `mutable` state of the RooDataHist, which can cause trouble if one. updates the observable range but then forgets to call. `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`. was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep. it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful. way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9168
https://github.com/root-project/root/pull/9169:230,integrability,filter,filter,230,"[rfiledialog] let set working path from client side; When file dialog started from client, one can specify ""working_path"" argument. Like ""/Home/data"" or ""/Files system/home/user/data"". Fix tiny problem with directory showing when filter is enabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9169
https://github.com/root-project/root/pull/9169:99,interoperability,specif,specify,99,"[rfiledialog] let set working path from client side; When file dialog started from client, one can specify ""working_path"" argument. Like ""/Home/data"" or ""/Files system/home/user/data"". Fix tiny problem with directory showing when filter is enabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9169
https://github.com/root-project/root/pull/9169:63,usability,dialog,dialog,63,"[rfiledialog] let set working path from client side; When file dialog started from client, one can specify ""working_path"" argument. Like ""/Home/data"" or ""/Files system/home/user/data"". Fix tiny problem with directory showing when filter is enabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9169
https://github.com/root-project/root/pull/9169:173,usability,user,user,173,"[rfiledialog] let set working path from client side; When file dialog started from client, one can specify ""working_path"" argument. Like ""/Home/data"" or ""/Files system/home/user/data"". Fix tiny problem with directory showing when filter is enabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9169
https://github.com/root-project/root/pull/9170:231,availability,slo,slot,231,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:331,deployability,log,logic,331,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:87,modifiability,refact,refactoring,87,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:87,performance,refactor,refactoring,87,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:190,performance,time,time,190,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:108,reliability,doe,does,108,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:231,reliability,slo,slot,231,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:46,safety,avoid,avoid,46,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:331,safety,log,logic,331,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:331,security,log,logic,331,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/pull/9170:331,testability,log,logic,331,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations; This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value. at construction time. fLastCheckedEntry can be reset per-slot in. InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the. treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9170
https://github.com/root-project/root/issues/9171:59,availability,state,statements,59,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:835,availability,error,error,835,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:120,energy efficiency,Current,Currently,120,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:1039,energy efficiency,current,current,1039,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:59,integrability,state,statements,59,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:250,integrability,wrap,wrapper,250,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:605,integrability,translat,translates,605,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:628,integrability,wrap,wrap,628,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:660,integrability,wrap,wrap,660,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:894,integrability,wrap,wrap,894,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:1233,integrability,wrap,wrapped,1233,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:1345,integrability,wrap,wrapper,1345,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:250,interoperability,wrapper,wrapper,250,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:605,interoperability,translat,translates,605,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:1116,interoperability,share,share,1116,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:1345,interoperability,wrapper,wrapper,1345,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:835,performance,error,error,835,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:23,safety,input,input,23,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:184,safety,input,input,184,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:835,safety,error,error,835,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:907,safety,input,input,907,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:1169,safety,input,input,1169,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:860,security,ident,identifier,860,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:349,testability,simpl,simplistic,349,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:23,usability,input,input,23,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:184,usability,input,input,184,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:349,usability,simpl,simplistic,349,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:405,usability,user,users,405,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:835,usability,error,error,835,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:907,usability,input,input,907,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:1047,usability,support,support,1047,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9171:1169,usability,input,input,1169,"[cling] Properly split input line in top-level declaration/statements; ### Explain what you would like to see improved. Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not. This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,. ```c++. root [0] namespace foo { int i; }. root [1] using namespace foo; std::cout << ""hello\n"";. hello. root [2] i. (int) 0. ```. translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while. ```c++. root [0] namespace foo { int i; }. root [1] std::cout << ""hello\n""; using namespace foo;. hello. root [2] i. input_line_11:2:3: error: use of undeclared identifier 'i'. (i). ^. ```. will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved. Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9171
https://github.com/root-project/root/issues/9173:31,availability,Failur,Failure,31,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:302,availability,error,error,302,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:31,deployability,Fail,Failure,31,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:592,deployability,updat,update,592,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:317,interoperability,convers,conversion,317,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:579,modifiability,paramet,parameter,579,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:31,performance,Failur,Failure,31,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:302,performance,error,error,302,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:31,reliability,Fail,Failure,31,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:302,safety,error,error,302,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:592,safety,updat,update,592,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:205,security,soc,sockaddr,205,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:430,security,soc,sockaddr,430,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:592,security,updat,update,592,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/issues/9173:302,usability,error,error,302,"Root v6.24/06 using XrdSysDNS: Failure to compile using g++ 10.3.1; ```. .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc: In . static member function 'static char* XrdSysDNS::Peername(int, sockaddr*, char**). ': . .../root_build/XROOTD-prefix/src/XROOTD/src/XrdSys/XrdSysDNS.cc:704:50: error: invalid conversion from 'int*' to 'socklen_t*' {aka 'unsigned int*'} [-fpermissive]. 704 | if (getpeername(snum, (struct sockaddr *)sap, &addrlen) < 0). | ^~~~~~~~. | |. | int*. ```. XrdSysDNS was deprecated in xrootd. Perhaps either add cast to socklen_t* on the third parameter or update to xrootd 5.3.2?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9173
https://github.com/root-project/root/pull/9174:650,availability,operat,operator,650,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1235,availability,avail,available,1235,"llow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""ove",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1364,availability,avail,available,1364,"nd implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1775,availability,operat,operator,1775,"ion of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""ove",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1820,availability,operat,operator,1820," static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1883,availability,operat,operator,1883,"s, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedM",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:2960,availability,operat,operator,2960,"squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3702,availability,error,errors,3702,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:4127,availability,error,errors,4127,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1094,deployability,automat,automatic,1094,"ne in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1249,deployability,automat,automatic,1249,"and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:2435,deployability,fail,fail,2435,"ted types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](aut",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3526,deployability,fail,failed,3526,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:544,energy efficiency,optim,optimizations,544,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:596,energy efficiency,alloc,allocation,596,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:715,energy efficiency,reduc,reduced,715,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1760,integrability,pub,public,1760," from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3918,integrability,rout,route,3918,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:4016,integrability,sub,subtleties,4016,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:4349,integrability,Filter,Filter,4349,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:277,interoperability,specif,specified,277,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:381,interoperability,convers,conversions,381,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:439,interoperability,Specif,Specification,439,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:702,interoperability,specif,specified,702,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:941,interoperability,compatib,compatible,941,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1221,interoperability,convers,conversion,1221," in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d =",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:4337,modifiability,exten,extended,4337,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:544,performance,optimiz,optimizations,544,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:589,performance,memor,memory,589,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3702,performance,error,errors,3702,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:4127,performance,error,errors,4127,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1235,reliability,availab,available,1235,"llow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""ove",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1364,reliability,availab,available,1364,"nd implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:2435,reliability,fail,fail,2435,"ted types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](aut",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3526,reliability,fail,failed,3526,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3929,reliability,doe,does,3929,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3991,reliability,doe,does,3991,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1045,safety,compl,complete,1045,"requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1235,safety,avail,available,1235,"llow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""ove",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1364,safety,avail,available,1364,"nd implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3106,safety,compl,complete,3106,"``. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3240,safety,compl,complete,3240,"dedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of column",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3702,safety,error,errors,3702,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:4127,safety,error,errors,4127,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1045,security,compl,complete,1045,"requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1235,security,availab,available,1235,"llow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""ove",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1364,security,availab,available,1364,"nd implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3106,security,compl,complete,3106,"``. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3240,security,compl,complete,3240,"dedFreePtsq"", ROOT.squared, [""Muon_pt""]). #works as long as there is a column ""x"" with type implicitly convertible to float or double. d = d.Define(""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of column",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1094,testability,automat,automatic,1094,"ne in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1249,testability,automat,automatic,1249,"and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. static float mul(float x, float y) { return x*y; }. };. ```. then in python one can do. ```python. d = ROOT.ROOT.RDataFrame(chain). #overload resolved by type of column. d = d.Define(""overloadedFreePts",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:589,usability,memor,memory,589,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:612,usability,support,support,612,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:797,usability,support,support,797,"Enhanced functionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:1007,usability,support,support,1007,"nctionality for RDF Define; This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:. - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible). (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.). - support for callables with overloaded operator() as long as argument types are explicitly specified. - reduced copying/moving of callable. New features from pythonization of Define:. - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot. - support for expression strings, and a complete lambda expression passed as a string. - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available). - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous). - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++. ```cpp. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>. T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {. public:. float operator() (float x) { return x*x; }. double operator() (double x) { return x*x; }. template<typename T>. T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:3702,usability,error,errors,3702,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9174:4127,usability,error,errors,4127,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous. d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function. d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member. d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member. d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member. d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(). d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression. d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing). d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting). d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""). ```. A few remaining issues here:. - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties). In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9174
https://github.com/root-project/root/pull/9175:114,availability,error,error,114,[Eve-7] Correction in client selection : handle case when eve elements are removed (e.g. loop events); Fix client error if event is switched while elements were previously selected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9175
https://github.com/root-project/root/pull/9175:94,integrability,event,events,94,[Eve-7] Correction in client selection : handle case when eve elements are removed (e.g. loop events); Fix client error if event is switched while elements were previously selected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9175
https://github.com/root-project/root/pull/9175:123,integrability,event,event,123,[Eve-7] Correction in client selection : handle case when eve elements are removed (e.g. loop events); Fix client error if event is switched while elements were previously selected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9175
https://github.com/root-project/root/pull/9175:114,performance,error,error,114,[Eve-7] Correction in client selection : handle case when eve elements are removed (e.g. loop events); Fix client error if event is switched while elements were previously selected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9175
https://github.com/root-project/root/pull/9175:114,safety,error,error,114,[Eve-7] Correction in client selection : handle case when eve elements are removed (e.g. loop events); Fix client error if event is switched while elements were previously selected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9175
https://github.com/root-project/root/pull/9175:114,usability,error,error,114,[Eve-7] Correction in client selection : handle case when eve elements are removed (e.g. loop events); Fix client error if event is switched while elements were previously selected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9175
https://github.com/root-project/root/issues/9176:1524,energy efficiency,power,powerful,1524,"Add documentation for saving TCanvas and TPad (reference and manual); ### Explain what you would like to see improved. I used [TCanvas](https://root.cern.ch/doc/master/classTCanvas.html)::SaveAs (which is a virtual function from its parent, [TPad::SaveAs](https://root.cern.ch/doc/master/classTPad.html#ac5f647da7241953352aa3c12baf41029)) to write canvases to files. This function has two arguments. > SaveAs(const char *filename="""", Option_t *option=""""). however, there is absolutely no documentation what the ""option"" could be. I read docs for *TCanvas*, *TPad*, *TObject* and searched on google; finally, I read the source code and saw that the ""option"" was not used at all. As a side note, when I read the [manual's section on graphics](https://root.cern/manual/graphics/), I found that it doesn't discuss saving canvases, which is a pity, because [ROOT IO section](https://root.cern/manual/root_io) also deals with very different things. ### Optional: share how it could be improved. - write that the *option* argument has no effect for *TCanvas* and *TPad* *::SaveAs* (add this information to the method's documentation). - maybe refer to [TPad::Print](https://root.cern.ch/doc/master/classTPad.html#ae44fee7e51d69841c1dce4b899eee14d) if one wants to use more options. - maybe add to the manual's chapter on Graphics a small section how to write canvases/pads to files. ### Setup. 1. Master branch of the ROOT code. ### Additional context. If I understand correctly, *TPad::Print* method is the preferred and the most powerful one, while *SaveAs* is just for unification with *TObject* (probably it should be also mentioned in these method's docs, if this is true).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9176
https://github.com/root-project/root/issues/9176:957,interoperability,share,share,957,"Add documentation for saving TCanvas and TPad (reference and manual); ### Explain what you would like to see improved. I used [TCanvas](https://root.cern.ch/doc/master/classTCanvas.html)::SaveAs (which is a virtual function from its parent, [TPad::SaveAs](https://root.cern.ch/doc/master/classTPad.html#ac5f647da7241953352aa3c12baf41029)) to write canvases to files. This function has two arguments. > SaveAs(const char *filename="""", Option_t *option=""""). however, there is absolutely no documentation what the ""option"" could be. I read docs for *TCanvas*, *TPad*, *TObject* and searched on google; finally, I read the source code and saw that the ""option"" was not used at all. As a side note, when I read the [manual's section on graphics](https://root.cern/manual/graphics/), I found that it doesn't discuss saving canvases, which is a pity, because [ROOT IO section](https://root.cern/manual/root_io) also deals with very different things. ### Optional: share how it could be improved. - write that the *option* argument has no effect for *TCanvas* and *TPad* *::SaveAs* (add this information to the method's documentation). - maybe refer to [TPad::Print](https://root.cern.ch/doc/master/classTPad.html#ae44fee7e51d69841c1dce4b899eee14d) if one wants to use more options. - maybe add to the manual's chapter on Graphics a small section how to write canvases/pads to files. ### Setup. 1. Master branch of the ROOT code. ### Additional context. If I understand correctly, *TPad::Print* method is the preferred and the most powerful one, while *SaveAs* is just for unification with *TObject* (probably it should be also mentioned in these method's docs, if this is true).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9176
https://github.com/root-project/root/issues/9176:794,reliability,doe,doesn,794,"Add documentation for saving TCanvas and TPad (reference and manual); ### Explain what you would like to see improved. I used [TCanvas](https://root.cern.ch/doc/master/classTCanvas.html)::SaveAs (which is a virtual function from its parent, [TPad::SaveAs](https://root.cern.ch/doc/master/classTPad.html#ac5f647da7241953352aa3c12baf41029)) to write canvases to files. This function has two arguments. > SaveAs(const char *filename="""", Option_t *option=""""). however, there is absolutely no documentation what the ""option"" could be. I read docs for *TCanvas*, *TPad*, *TObject* and searched on google; finally, I read the source code and saw that the ""option"" was not used at all. As a side note, when I read the [manual's section on graphics](https://root.cern/manual/graphics/), I found that it doesn't discuss saving canvases, which is a pity, because [ROOT IO section](https://root.cern/manual/root_io) also deals with very different things. ### Optional: share how it could be improved. - write that the *option* argument has no effect for *TCanvas* and *TPad* *::SaveAs* (add this information to the method's documentation). - maybe refer to [TPad::Print](https://root.cern.ch/doc/master/classTPad.html#ae44fee7e51d69841c1dce4b899eee14d) if one wants to use more options. - maybe add to the manual's chapter on Graphics a small section how to write canvases/pads to files. ### Setup. 1. Master branch of the ROOT code. ### Additional context. If I understand correctly, *TPad::Print* method is the preferred and the most powerful one, while *SaveAs* is just for unification with *TObject* (probably it should be also mentioned in these method's docs, if this is true).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9176
https://github.com/root-project/root/issues/9176:1437,testability,context,context,1437,"Add documentation for saving TCanvas and TPad (reference and manual); ### Explain what you would like to see improved. I used [TCanvas](https://root.cern.ch/doc/master/classTCanvas.html)::SaveAs (which is a virtual function from its parent, [TPad::SaveAs](https://root.cern.ch/doc/master/classTPad.html#ac5f647da7241953352aa3c12baf41029)) to write canvases to files. This function has two arguments. > SaveAs(const char *filename="""", Option_t *option=""""). however, there is absolutely no documentation what the ""option"" could be. I read docs for *TCanvas*, *TPad*, *TObject* and searched on google; finally, I read the source code and saw that the ""option"" was not used at all. As a side note, when I read the [manual's section on graphics](https://root.cern/manual/graphics/), I found that it doesn't discuss saving canvases, which is a pity, because [ROOT IO section](https://root.cern/manual/root_io) also deals with very different things. ### Optional: share how it could be improved. - write that the *option* argument has no effect for *TCanvas* and *TPad* *::SaveAs* (add this information to the method's documentation). - maybe refer to [TPad::Print](https://root.cern.ch/doc/master/classTPad.html#ae44fee7e51d69841c1dce4b899eee14d) if one wants to use more options. - maybe add to the manual's chapter on Graphics a small section how to write canvases/pads to files. ### Setup. 1. Master branch of the ROOT code. ### Additional context. If I understand correctly, *TPad::Print* method is the preferred and the most powerful one, while *SaveAs* is just for unification with *TObject* (probably it should be also mentioned in these method's docs, if this is true).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9176
https://github.com/root-project/root/issues/9176:1451,testability,understand,understand,1451,"Add documentation for saving TCanvas and TPad (reference and manual); ### Explain what you would like to see improved. I used [TCanvas](https://root.cern.ch/doc/master/classTCanvas.html)::SaveAs (which is a virtual function from its parent, [TPad::SaveAs](https://root.cern.ch/doc/master/classTPad.html#ac5f647da7241953352aa3c12baf41029)) to write canvases to files. This function has two arguments. > SaveAs(const char *filename="""", Option_t *option=""""). however, there is absolutely no documentation what the ""option"" could be. I read docs for *TCanvas*, *TPad*, *TObject* and searched on google; finally, I read the source code and saw that the ""option"" was not used at all. As a side note, when I read the [manual's section on graphics](https://root.cern/manual/graphics/), I found that it doesn't discuss saving canvases, which is a pity, because [ROOT IO section](https://root.cern/manual/root_io) also deals with very different things. ### Optional: share how it could be improved. - write that the *option* argument has no effect for *TCanvas* and *TPad* *::SaveAs* (add this information to the method's documentation). - maybe refer to [TPad::Print](https://root.cern.ch/doc/master/classTPad.html#ae44fee7e51d69841c1dce4b899eee14d) if one wants to use more options. - maybe add to the manual's chapter on Graphics a small section how to write canvases/pads to files. ### Setup. 1. Master branch of the ROOT code. ### Additional context. If I understand correctly, *TPad::Print* method is the preferred and the most powerful one, while *SaveAs* is just for unification with *TObject* (probably it should be also mentioned in these method's docs, if this is true).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9176
https://github.com/root-project/root/issues/9176:4,usability,document,documentation,4,"Add documentation for saving TCanvas and TPad (reference and manual); ### Explain what you would like to see improved. I used [TCanvas](https://root.cern.ch/doc/master/classTCanvas.html)::SaveAs (which is a virtual function from its parent, [TPad::SaveAs](https://root.cern.ch/doc/master/classTPad.html#ac5f647da7241953352aa3c12baf41029)) to write canvases to files. This function has two arguments. > SaveAs(const char *filename="""", Option_t *option=""""). however, there is absolutely no documentation what the ""option"" could be. I read docs for *TCanvas*, *TPad*, *TObject* and searched on google; finally, I read the source code and saw that the ""option"" was not used at all. As a side note, when I read the [manual's section on graphics](https://root.cern/manual/graphics/), I found that it doesn't discuss saving canvases, which is a pity, because [ROOT IO section](https://root.cern/manual/root_io) also deals with very different things. ### Optional: share how it could be improved. - write that the *option* argument has no effect for *TCanvas* and *TPad* *::SaveAs* (add this information to the method's documentation). - maybe refer to [TPad::Print](https://root.cern.ch/doc/master/classTPad.html#ae44fee7e51d69841c1dce4b899eee14d) if one wants to use more options. - maybe add to the manual's chapter on Graphics a small section how to write canvases/pads to files. ### Setup. 1. Master branch of the ROOT code. ### Additional context. If I understand correctly, *TPad::Print* method is the preferred and the most powerful one, while *SaveAs* is just for unification with *TObject* (probably it should be also mentioned in these method's docs, if this is true).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9176
https://github.com/root-project/root/issues/9176:488,usability,document,documentation,488,"Add documentation for saving TCanvas and TPad (reference and manual); ### Explain what you would like to see improved. I used [TCanvas](https://root.cern.ch/doc/master/classTCanvas.html)::SaveAs (which is a virtual function from its parent, [TPad::SaveAs](https://root.cern.ch/doc/master/classTPad.html#ac5f647da7241953352aa3c12baf41029)) to write canvases to files. This function has two arguments. > SaveAs(const char *filename="""", Option_t *option=""""). however, there is absolutely no documentation what the ""option"" could be. I read docs for *TCanvas*, *TPad*, *TObject* and searched on google; finally, I read the source code and saw that the ""option"" was not used at all. As a side note, when I read the [manual's section on graphics](https://root.cern/manual/graphics/), I found that it doesn't discuss saving canvases, which is a pity, because [ROOT IO section](https://root.cern/manual/root_io) also deals with very different things. ### Optional: share how it could be improved. - write that the *option* argument has no effect for *TCanvas* and *TPad* *::SaveAs* (add this information to the method's documentation). - maybe refer to [TPad::Print](https://root.cern.ch/doc/master/classTPad.html#ae44fee7e51d69841c1dce4b899eee14d) if one wants to use more options. - maybe add to the manual's chapter on Graphics a small section how to write canvases/pads to files. ### Setup. 1. Master branch of the ROOT code. ### Additional context. If I understand correctly, *TPad::Print* method is the preferred and the most powerful one, while *SaveAs* is just for unification with *TObject* (probably it should be also mentioned in these method's docs, if this is true).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9176
https://github.com/root-project/root/issues/9176:1112,usability,document,documentation,1112,"Add documentation for saving TCanvas and TPad (reference and manual); ### Explain what you would like to see improved. I used [TCanvas](https://root.cern.ch/doc/master/classTCanvas.html)::SaveAs (which is a virtual function from its parent, [TPad::SaveAs](https://root.cern.ch/doc/master/classTPad.html#ac5f647da7241953352aa3c12baf41029)) to write canvases to files. This function has two arguments. > SaveAs(const char *filename="""", Option_t *option=""""). however, there is absolutely no documentation what the ""option"" could be. I read docs for *TCanvas*, *TPad*, *TObject* and searched on google; finally, I read the source code and saw that the ""option"" was not used at all. As a side note, when I read the [manual's section on graphics](https://root.cern/manual/graphics/), I found that it doesn't discuss saving canvases, which is a pity, because [ROOT IO section](https://root.cern/manual/root_io) also deals with very different things. ### Optional: share how it could be improved. - write that the *option* argument has no effect for *TCanvas* and *TPad* *::SaveAs* (add this information to the method's documentation). - maybe refer to [TPad::Print](https://root.cern.ch/doc/master/classTPad.html#ae44fee7e51d69841c1dce4b899eee14d) if one wants to use more options. - maybe add to the manual's chapter on Graphics a small section how to write canvases/pads to files. ### Setup. 1. Master branch of the ROOT code. ### Additional context. If I understand correctly, *TPad::Print* method is the preferred and the most powerful one, while *SaveAs* is just for unification with *TObject* (probably it should be also mentioned in these method's docs, if this is true).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9176
https://github.com/root-project/root/issues/9176:1501,usability,prefer,preferred,1501,"Add documentation for saving TCanvas and TPad (reference and manual); ### Explain what you would like to see improved. I used [TCanvas](https://root.cern.ch/doc/master/classTCanvas.html)::SaveAs (which is a virtual function from its parent, [TPad::SaveAs](https://root.cern.ch/doc/master/classTPad.html#ac5f647da7241953352aa3c12baf41029)) to write canvases to files. This function has two arguments. > SaveAs(const char *filename="""", Option_t *option=""""). however, there is absolutely no documentation what the ""option"" could be. I read docs for *TCanvas*, *TPad*, *TObject* and searched on google; finally, I read the source code and saw that the ""option"" was not used at all. As a side note, when I read the [manual's section on graphics](https://root.cern/manual/graphics/), I found that it doesn't discuss saving canvases, which is a pity, because [ROOT IO section](https://root.cern/manual/root_io) also deals with very different things. ### Optional: share how it could be improved. - write that the *option* argument has no effect for *TCanvas* and *TPad* *::SaveAs* (add this information to the method's documentation). - maybe refer to [TPad::Print](https://root.cern.ch/doc/master/classTPad.html#ae44fee7e51d69841c1dce4b899eee14d) if one wants to use more options. - maybe add to the manual's chapter on Graphics a small section how to write canvases/pads to files. ### Setup. 1. Master branch of the ROOT code. ### Additional context. If I understand correctly, *TPad::Print* method is the preferred and the most powerful one, while *SaveAs* is just for unification with *TObject* (probably it should be also mentioned in these method's docs, if this is true).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9176
https://github.com/root-project/root/pull/9177:240,deployability,updat,update,240,"[RF] Use range-based loops for RooLinkedList; This is a followup to commit 2f7936a, using range-based loops or at. least the `begin()` and `end()` member functions for RooLinkedLists. everywhere in RooFit/RooStats. This is not an important update but just a small technical change, which I found in some of my older development branches but forgot to open a PR so far.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9177
https://github.com/root-project/root/pull/9177:240,safety,updat,update,240,"[RF] Use range-based loops for RooLinkedList; This is a followup to commit 2f7936a, using range-based loops or at. least the `begin()` and `end()` member functions for RooLinkedLists. everywhere in RooFit/RooStats. This is not an important update but just a small technical change, which I found in some of my older development branches but forgot to open a PR so far.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9177
https://github.com/root-project/root/pull/9177:240,security,updat,update,240,"[RF] Use range-based loops for RooLinkedList; This is a followup to commit 2f7936a, using range-based loops or at. least the `begin()` and `end()` member functions for RooLinkedLists. everywhere in RooFit/RooStats. This is not an important update but just a small technical change, which I found in some of my older development branches but forgot to open a PR so far.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9177
https://github.com/root-project/root/pull/9178:220,availability,error,errors,220,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:306,availability,error,errors,306,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:208,deployability,log,log,208,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:278,deployability,FAIL,FAILED,278,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:400,deployability,fail,fail,400,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:540,deployability,fail,failed,540,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:29,integrability,batch,batch,29,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:152,integrability,batch,batch,152,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:634,integrability,batch,batch,634,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:29,performance,batch,batch,29,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:152,performance,batch,batch,152,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:220,performance,error,errors,220,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:306,performance,error,errors,306,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:634,performance,batch,batch,634,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:278,reliability,FAIL,FAILED,278,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:400,reliability,fail,fail,400,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:540,reliability,fail,failed,540,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:208,safety,log,log,208,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:220,safety,error,errors,220,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:239,safety,test,test,239,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:270,safety,test,test,270,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:306,safety,error,errors,306,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:385,safety,test,tests,385,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:558,safety,test,test,558,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:208,security,log,log,208,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:208,testability,log,log,208,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:239,testability,test,test,239,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:270,testability,test,test,270,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:385,testability,test,tests,385,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:558,testability,test,test,558,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:220,usability,error,errors,220,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/pull/9178:306,usability,error,errors,306,"[RF] Add `-q` quiet and `-b` batch mode options to stressRooFit; Various developments to prepare the `stressRooFit` executable for the. newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a. given test, but will only report the test as FAILED when there were any. errors. Tis is useful during development, allowing the developer to see which. tests pass and fail at one glance without having to endlessly scroll. through the ouput that gets chopped up by the detailed reports on which. comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch. mode. Finally, there is a little change such that all datasets in `stressRooFit` use. the vector datastore, including a bugfix in `RooAbsData` to make. `convertToVectorStore` work correctly even if the `storageType` was. wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9178
https://github.com/root-project/root/issues/9179:203,availability,error,error,203,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:2090,availability,Operat,Operating,2090,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:33,deployability,instal,installed,33,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:107,deployability,Instal,Installation,107,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:353,deployability,stack,stack,353,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:903,deployability,Stack,StackTrace,903,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:1633,deployability,stack,stack,1633,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:2069,deployability,version,version,2069,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:673,energy efficiency,optim,optimised,673,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:815,energy efficiency,optim,optimised,815,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:1564,integrability,sub,submit,1564,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:2069,integrability,version,version,2069,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:2200,interoperability,standard,standard,2200,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:87,modifiability,pac,package,87,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:937,modifiability,Pac,Packages,937,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:1060,modifiability,Pac,Packages,1060,".xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:2069,modifiability,version,version,2069,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:203,performance,error,error,203,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:124,safety,compl,completed,124,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:203,safety,error,error,203,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:124,security,compl,completed,124,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:1102,security,sign,signal,1102,". Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating syste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:359,testability,trace,trace,359,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:1639,testability,trace,trace,1639,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:203,usability,error,error,203,"segmentation violation; . I have installed [xfitter](https://www.xfitter.org/xFitter/) package using ROOT. Installation was completed successfully . but when I want to run some examples I encounter this error:. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ============",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:1394,usability,hint,hint,1394,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:1438,usability,help,help,1438,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/issues/9179:1715,usability,help,help,1715,"** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f80c2812dba in __GI___wait4 (pid=139255, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f80c2812d7b in __GI___waitpid (pid=<optimised out>, stat_loc=stat_loc. entry=0x7fff1886c568, options=options. entry=0) at waitpid.c:38. #2 0x00007f80c27820e7 in do_system (line=<optimised out>) at ../sysdeps/posix/system.c:172. #3 0x00007f817cab0c47 in TUnixSystem::StackTrace() () from /home/mamali/Packages/root_install/lib/libCore.so. #4 0x00007f817caadef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/mamali/Packages/root_install/lib/libCore.so. #5 <signal handler called>. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007fff1886f330 in ?? (). #7 0x00005639fcd3b4e6 in init_theory_modules () at init_theory.f:13. #8 0x00005639fcd03ddc in xfitter () at main.f:72. #9 0x00005639fccfb53d in main (). ===========================================================. ```. Setup. 1. ROOT version: 6.24/06. 2. Operating system: ubuntu, 20.04 Built for linuxx8664gcc. 3. How you obtained ROOT: built it myself with c++17 standard library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9179
https://github.com/root-project/root/pull/9180:108,modifiability,refact,refactor,108,"[RF] RooLagrangianMorphFunc::Config as struct; ### This Pull request:. . Hi @guitargeek, this PR is just to refactor the simple class in. RooLagrangianMorphFunc::Config as a struct to keep it's usage apparent. Let me know what you think ! . #### Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9180
https://github.com/root-project/root/pull/9180:108,performance,refactor,refactor,108,"[RF] RooLagrangianMorphFunc::Config as struct; ### This Pull request:. . Hi @guitargeek, this PR is just to refactor the simple class in. RooLagrangianMorphFunc::Config as a struct to keep it's usage apparent. Let me know what you think ! . #### Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9180
https://github.com/root-project/root/pull/9180:264,safety,test,tested,264,"[RF] RooLagrangianMorphFunc::Config as struct; ### This Pull request:. . Hi @guitargeek, this PR is just to refactor the simple class in. RooLagrangianMorphFunc::Config as a struct to keep it's usage apparent. Let me know what you think ! . #### Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9180
https://github.com/root-project/root/pull/9180:121,testability,simpl,simple,121,"[RF] RooLagrangianMorphFunc::Config as struct; ### This Pull request:. . Hi @guitargeek, this PR is just to refactor the simple class in. RooLagrangianMorphFunc::Config as a struct to keep it's usage apparent. Let me know what you think ! . #### Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9180
https://github.com/root-project/root/pull/9180:264,testability,test,tested,264,"[RF] RooLagrangianMorphFunc::Config as struct; ### This Pull request:. . Hi @guitargeek, this PR is just to refactor the simple class in. RooLagrangianMorphFunc::Config as a struct to keep it's usage apparent. Let me know what you think ! . #### Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9180
https://github.com/root-project/root/pull/9180:121,usability,simpl,simple,121,"[RF] RooLagrangianMorphFunc::Config as struct; ### This Pull request:. . Hi @guitargeek, this PR is just to refactor the simple class in. RooLagrangianMorphFunc::Config as a struct to keep it's usage apparent. Let me know what you think ! . #### Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9180
https://github.com/root-project/root/pull/9182:129,availability,avail,available,129,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:245,deployability,build,build,245,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:26,integrability,compon,component,26,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:104,integrability,compon,component,104,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:26,interoperability,compon,component,26,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:104,interoperability,compon,component,104,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:317,interoperability,specif,specify,317,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:26,modifiability,compon,component,26,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:104,modifiability,compon,component,104,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:263,performance,time,time,263,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:129,reliability,availab,available,129,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:129,safety,avail,available,129,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:178,safety,test,tested,178,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:129,security,availab,available,129,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9182:178,testability,test,tested,178,"[webgui] introduce qt6web component; Like `qt5web`, it provides web-based display but for Qt6 WebEngine component. Qt6 WebEngine available now in Qt 6.3 developer branch, can be tested with OpenSUSE Tumbleweed. Both `qt5web` and `qt6web` can be build at the same time and used independently. Just when starting ROOT, specify `root --web=qt6`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9182
https://github.com/root-project/root/pull/9183:103,availability,cluster,cluster,103,"Distributed RDataFrame on Dask; Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python. import ROOT. from dask.distributed import Client. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context. # Jupyter notebooks / Python session don't need this. if __name__ == ""__main__"":. client = Client(""SCHEDULER_ADDRESS""). df = RDataFrame(""mytree"",""myfile.root"", daskclient=client). # Proceed as usual. df.Define(""x"",""someoperation"").Histo1D(""x""). ```. Missing pieces:. - [ ] Tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9183
https://github.com/root-project/root/pull/9183:103,deployability,cluster,cluster,103,"Distributed RDataFrame on Dask; Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python. import ROOT. from dask.distributed import Client. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context. # Jupyter notebooks / Python session don't need this. if __name__ == ""__main__"":. client = Client(""SCHEDULER_ADDRESS""). df = RDataFrame(""mytree"",""myfile.root"", daskclient=client). # Proceed as usual. df.Define(""x"",""someoperation"").Histo1D(""x""). ```. Missing pieces:. - [ ] Tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9183
https://github.com/root-project/root/pull/9183:0,interoperability,Distribut,Distributed,0,"Distributed RDataFrame on Dask; Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python. import ROOT. from dask.distributed import Client. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context. # Jupyter notebooks / Python session don't need this. if __name__ == ""__main__"":. client = Client(""SCHEDULER_ADDRESS""). df = RDataFrame(""mytree"",""myfile.root"", daskclient=client). # Proceed as usual. df.Define(""x"",""someoperation"").Histo1D(""x""). ```. Missing pieces:. - [ ] Tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9183
https://github.com/root-project/root/pull/9183:86,interoperability,distribut,distributed,86,"Distributed RDataFrame on Dask; Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python. import ROOT. from dask.distributed import Client. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context. # Jupyter notebooks / Python session don't need this. if __name__ == ""__main__"":. client = Client(""SCHEDULER_ADDRESS""). df = RDataFrame(""mytree"",""myfile.root"", daskclient=client). # Proceed as usual. df.Define(""x"",""someoperation"").Histo1D(""x""). ```. Missing pieces:. - [ ] Tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9183
https://github.com/root-project/root/pull/9183:163,interoperability,distribut,distributed,163,"Distributed RDataFrame on Dask; Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python. import ROOT. from dask.distributed import Client. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context. # Jupyter notebooks / Python session don't need this. if __name__ == ""__main__"":. client = Client(""SCHEDULER_ADDRESS""). df = RDataFrame(""mytree"",""myfile.root"", daskclient=client). # Proceed as usual. df.Define(""x"",""someoperation"").Histo1D(""x""). ```. Missing pieces:. - [ ] Tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9183
https://github.com/root-project/root/pull/9183:225,interoperability,Distribut,Distributed,225,"Distributed RDataFrame on Dask; Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python. import ROOT. from dask.distributed import Client. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context. # Jupyter notebooks / Python session don't need this. if __name__ == ""__main__"":. client = Client(""SCHEDULER_ADDRESS""). df = RDataFrame(""mytree"",""myfile.root"", daskclient=client). # Proceed as usual. df.Define(""x"",""someoperation"").Histo1D(""x""). ```. Missing pieces:. - [ ] Tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9183
https://github.com/root-project/root/pull/9183:357,security,session,session,357,"Distributed RDataFrame on Dask; Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python. import ROOT. from dask.distributed import Client. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context. # Jupyter notebooks / Python session don't need this. if __name__ == ""__main__"":. client = Client(""SCHEDULER_ADDRESS""). df = RDataFrame(""mytree"",""myfile.root"", daskclient=client). # Proceed as usual. df.Define(""x"",""someoperation"").Histo1D(""x""). ```. Missing pieces:. - [ ] Tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9183
https://github.com/root-project/root/pull/9183:319,testability,context,context,319,"Distributed RDataFrame on Dask; Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python. import ROOT. from dask.distributed import Client. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context. # Jupyter notebooks / Python session don't need this. if __name__ == ""__main__"":. client = Client(""SCHEDULER_ADDRESS""). df = RDataFrame(""mytree"",""myfile.root"", daskclient=client). # Proceed as usual. df.Define(""x"",""someoperation"").Histo1D(""x""). ```. Missing pieces:. - [ ] Tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9183
https://github.com/root-project/root/pull/9183:37,usability,support,support,37,"Distributed RDataFrame on Dask; Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python. import ROOT. from dask.distributed import Client. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context. # Jupyter notebooks / Python session don't need this. if __name__ == ""__main__"":. client = Client(""SCHEDULER_ADDRESS""). df = RDataFrame(""mytree"",""myfile.root"", daskclient=client). # Proceed as usual. df.Define(""x"",""someoperation"").Histo1D(""x""). ```. Missing pieces:. - [ ] Tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9183
https://github.com/root-project/root/pull/9184:308,deployability,depend,dependent,308,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:536,deployability,integr,integral,536,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:308,integrability,depend,dependent,308,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:536,integrability,integr,integral,536,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:536,interoperability,integr,integral,536,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:165,modifiability,variab,variable,165,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:209,modifiability,variab,variables,209,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:308,modifiability,depend,dependent,308,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:318,modifiability,variab,variables,318,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:536,modifiability,integr,integral,536,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:536,reliability,integr,integral,536,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:308,safety,depend,dependent,308,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:449,safety,test,tested,449,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:513,safety,test,test,513,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:536,security,integr,integral,536,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:308,testability,depend,dependent,308,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:449,testability,test,tested,449,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:508,testability,unit,unit,508,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:513,testability,test,test,513,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9184:536,testability,integr,integral,536,"[RF] add code for RooPolyFunc; ### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally. - [x] added tutorials. - [x] added unit test. - [ ] analytical integral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9184
https://github.com/root-project/root/pull/9186:32,deployability,log,logic,32,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:103,deployability,log,logic,103,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:32,safety,log,logic,32,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:103,safety,log,logic,103,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:437,safety,review,review,437,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:32,security,log,logic,32,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:103,security,log,logic,103,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:32,testability,log,logic,32,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:103,testability,log,logic,103,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:437,testability,review,review,437,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/pull/9186:71,usability,prefer,prefer,71,"[DF] Lift some data members and logic to non-template base classes; We prefer keeping as much data and logic as possible in the non-template. base classes (RFilterBase, RDefineBase, etc.) rather than in the. concrete templated implementations (RFilter, RDefine) so that compiler. and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9186
https://github.com/root-project/root/issues/9187:1662,availability,ERROR,ERROR,1662,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1728,availability,ERROR,ERROR,1728,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1815,availability,Slo,Slope,1815,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:5,deployability,unload,unloading,5,"Code unloading fails assert: ""Can not revert previous transactions""; From https://root-forum.cern.ch/t/segmentation-violation-when-re-compiling-cpp-file-after-running/47373. ```c++. // minimal.cpp. # include <TRandom3.h>. # include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:15,deployability,fail,fails,15,"Code unloading fails assert: ""Can not revert previous transactions""; From https://root-forum.cern.ch/t/segmentation-violation-when-re-compiling-cpp-file-after-running/47373. ```c++. // minimal.cpp. # include <TRandom3.h>. # include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1991,deployability,build,build,1991,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:2094,deployability,unload,unload,2094,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:2210,deployability,fail,failed,2210,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1257,energy efficiency,Draw,DrawCopy,1257,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1690,modifiability,PARAMET,PARAMETER,1690,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:825,performance,time,time,825,"Code unloading fails assert: ""Can not revert previous transactions""; From https://root-forum.cern.ch/t/segmentation-violation-when-re-compiling-cpp-file-after-running/47373. ```c++. // minimal.cpp. # include <TRandom3.h>. # include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1662,performance,ERROR,ERROR,1662,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1728,performance,ERROR,ERROR,1728,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:15,reliability,fail,fails,15,"Code unloading fails assert: ""Can not revert previous transactions""; From https://root-forum.cern.ch/t/segmentation-violation-when-re-compiling-cpp-file-after-running/47373. ```c++. // minimal.cpp. # include <TRandom3.h>. # include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1815,reliability,Slo,Slope,1815,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:2210,reliability,fail,failed,2210,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1662,safety,ERROR,ERROR,1662,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1728,safety,ERROR,ERROR,1728,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:21,testability,assert,assert,21,"Code unloading fails assert: ""Can not revert previous transactions""; From https://root-forum.cern.ch/t/segmentation-violation-when-re-compiling-cpp-file-after-running/47373. ```c++. // minimal.cpp. # include <TRandom3.h>. # include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:933,testability,simul,simulo,933,"Code unloading fails assert: ""Can not revert previous transactions""; From https://root-forum.cern.ch/t/segmentation-violation-when-re-compiling-cpp-file-after-running/47373. ```c++. // minimal.cpp. # include <TRandom3.h>. # include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:2123,testability,Assert,Assertion,2123,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:185,usability,minim,minimal,185,"Code unloading fails assert: ""Can not revert previous transactions""; From https://root-forum.cern.ch/t/segmentation-violation-when-re-compiling-cpp-file-after-running/47373. ```c++. // minimal.cpp. # include <TRandom3.h>. # include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1476,usability,Close,Close,1476,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1523,usability,minim,minimal,1523,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1599,usability,STATU,STATUS,1599,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1662,usability,ERROR,ERROR,1662,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1728,usability,ERROR,ERROR,1728,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9187:1959,usability,minim,minimal,1959,"# include <TH1D.h>. # include <TFile.h>. # include <TCanvas.h>. # include <TStyle.h>. # include <Riostream.h>. # include <iostream>. void particles_decay(int N0, double delta_t, double alpha, int seed = 1) {. double t=0.;. double T = 300.;. int N_survived = N0;. int N_decayed;. int N_steps = (int)(T/delta_t);. int step = 0;. double r;. TRandom3 *gRandom = new TRandom3();. gRandom -> SetSeed(seed);. TFile file(""particles_decay.root"", ""recreate"");. TCanvas* f = new TCanvas(""f"");. //creo oggetto TH1D per disegnare la funzione di decadimento. TH1D* N_vs_t = new TH1D(""N_vs_t"", ""Number of particles in time"", N_steps, 0, T);. while((t < T) && (N_survived > 0)) {. N_vs_t -> SetBinContent(step, N_survived);. //simulo decadimento radioattivo sulle particelle sopravvisute. N_decayed = 0;. for(int j=0; j<N_survived; j++){. r = gRandom -> Rndm();. if (r < alpha*delta_t) N_decayed++;. }. if (N_survived <= N_decayed) break;. N_survived -= N_decayed;. t += delta_t;. step++;. }. gStyle -> SetOptFit();. N_vs_t -> Fit(""expo"");. N_vs_t -> DrawCopy();. //Metto sul file root tutte le robe sovrapposte, nota che f punta al TCanvas aperto sopra, . //mentre il file .root con quel nome era stato anche lui creato sopra. f -> Print(""particles_decay.root"");. file.Close();. }. ```. This gives. ```. root [0] .L minimal.C. root [1] particles_decay(500, 1., 0.01). FCN=51.0153 FROM MIGRAD STATUS=CONVERGED 40 CALLS 41 TOTAL. EDM=4.6871e-07 STRATEGY= 1 ERROR MATRIX ACCURATE . EXT PARAMETER STEP FIRST . NO. NAME VALUE ERROR SIZE DERIVATIVE . 1 Constant 6.20101e+00 7.29140e-03 1.63914e-05 -1.00223e-01. 2 Slope -1.01929e-02 6.74151e-05 1.51443e-07 4.24243e+00. Info in <TCanvas::SaveAs>: ROOT file particles_decay.root has been created. root [2] .L minimal.C. root.exe: /home/axel/build/root/master/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1513: void cling::Interpreter::unload(cling::Transaction&): Assertion `!T.getTopmostParent()->getNext() && ""Can not revert previous transactions""' failed. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9187
https://github.com/root-project/root/issues/9188:94,availability,error,error-when-i-try-to-draw-a-histogram,94,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:585,availability,avail,available,585,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:688,availability,avail,available,688,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:805,availability,avail,available,805,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:314,deployability,Build,Build,314,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:114,energy efficiency,draw,draw-a-histogram,114,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:94,performance,error,error-when-i-try-to-draw-a-histogram,94,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:585,reliability,availab,available,585,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:688,reliability,availab,available,688,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:805,reliability,availab,available,805,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:94,safety,error,error-when-i-try-to-draw-a-histogram,94,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:585,safety,avail,available,585,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:688,safety,avail,available,688,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:805,safety,avail,available,805,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:585,security,availab,available,585,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:688,security,availab,available,688,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:805,security,availab,available,805,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9188:94,usability,error,error-when-i-try-to-draw-a-histogram,94,"Unnecessary (?) warnings reading `unique_ptr`; From https://root-forum.cern.ch/t/segmentation-error-when-i-try-to-draw-a-histogram/47392. Opening https://root-forum.cern.ch/uploads/short-url/vue07kduqCLe9dhZ3MGW8pLWja0.root shows. ```. root [0] . Attaching file file05.root as _file0... Warning in <TStreamerInfo::Build>: unique_ptr<TH1F,default_delete<TH1F> >: __uniq_ptr_data<TH1F,default_delete<TH1F>,true,true> has no streamer or dictionary, data member ""_M_t"" will not be saved. Warning in <TClass::Init>: no dictionary for class __compressed_pair<TH1F*,default_delete<TH1F> > is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<TH1F*,0,false> is available. Warning in <TClass::Init>: no dictionary for class __compressed_pair_elem<default_delete<TH1F>,1,true> is available. (TFile *) 0x5617370bbe70. ```. That's on Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9188
https://github.com/root-project/root/issues/9189:364,deployability,version,version,364,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:549,deployability,version,version,549,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:577,deployability,instal,installed,577,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:870,deployability,version,version,870,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:980,deployability,Build,Build,980,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:41,energy efficiency,current,current,41,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:144,energy efficiency,current,current,144,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:924,energy efficiency,current,current,924,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:364,integrability,version,version,364,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:549,integrability,version,version,549,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:870,integrability,version,version,870,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:102,modifiability,variab,variable,102,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:364,modifiability,version,version,364,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:549,modifiability,version,version,549,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:870,modifiability,version,version,870,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:312,reliability,doe,does,312,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:604,reliability,doe,does,604,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:408,safety,test,test,408,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:408,testability,test,test,408,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/issues/9189:630,usability,behavi,behaviour,630,"TEfficiency constructors not appended to current directory; The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24. ```. TFile* file = new TFile(""test.root"", ""RECREATE"");. TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);. eff->Fill(true, 0);. file->Write();. ```. Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of. `TDirectory::TContext ctx(nullptr);`. in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:. ROOT v6.24 built from source. OS: Ubuntu 20.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9189
https://github.com/root-project/root/pull/9191:107,integrability,Discover,Discovered,107,"[ntuple, rdf] Fix reading anonymous collections; Fixes reading RNTuples with anonymous collections in RDF. Discovered while working on #8897",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9191
https://github.com/root-project/root/pull/9191:107,interoperability,Discover,Discovered,107,"[ntuple, rdf] Fix reading anonymous collections; Fixes reading RNTuples with anonymous collections in RDF. Discovered while working on #8897",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9191
https://github.com/root-project/root/pull/9191:107,usability,Discov,Discovered,107,"[ntuple, rdf] Fix reading anonymous collections; Fixes reading RNTuples with anonymous collections in RDF. Discovered while working on #8897",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9191
https://github.com/root-project/root/pull/9192:161,availability,failur,failure,161,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:185,availability,servic,services,185,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:161,deployability,fail,failure,161,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:185,deployability,servic,services,185,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:237,deployability,build,build,237,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:185,integrability,servic,services,185,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:185,modifiability,servic,services,185,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:120,performance,parallel,parallel,120,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:161,performance,failur,failure,161,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:161,reliability,fail,failure,161,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:46,safety,test,tests,46,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:110,safety,test,tests,110,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:156,safety,test,test,156,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:250,safety,test,testReport,250,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:288,safety,test,test,288,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:399,safety,test,test,399,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:493,safety,test,test,493,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:46,testability,test,tests,46,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:110,testability,test,tests,110,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:156,testability,test,test,156,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:250,testability,test,testReport,250,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:288,testability,test,test,288,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:399,testability,test,test,399,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9192:493,testability,test,test,493,"[ntuple] Use different filenames in different tests; Using the same filename can cause races when running the tests in. parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```. $ rg test_ntuple_clusters.root. tree/ntuple/v7/test/ntuple_basics.cxx. 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx. 279: FileRaii fileGuard(""test_ntuple_clusters.root"");. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9192
https://github.com/root-project/root/pull/9193:124,deployability,automat,automatically,124,[NFC] Add Jakob as owner of tree/ntuple/v7; Just noticed that opening a PR against these files added Philippe as a reviewer automatically but not Jakob.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9193
https://github.com/root-project/root/pull/9193:115,safety,review,reviewer,115,[NFC] Add Jakob as owner of tree/ntuple/v7; Just noticed that opening a PR against these files added Philippe as a reviewer automatically but not Jakob.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9193
https://github.com/root-project/root/pull/9193:115,testability,review,reviewer,115,[NFC] Add Jakob as owner of tree/ntuple/v7; Just noticed that opening a PR against these files added Philippe as a reviewer automatically but not Jakob.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9193
https://github.com/root-project/root/pull/9193:124,testability,automat,automatically,124,[NFC] Add Jakob as owner of tree/ntuple/v7; Just noticed that opening a PR against these files added Philippe as a reviewer automatically but not Jakob.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9193
https://github.com/root-project/root/pull/9194:224,deployability,Updat,Update,224,[webgui] improve Qt5/Qt6/CEF related code; 1. Adjust code to latest CEF. 2. Improve polling method when waiting RWebWindow connections from Qt5/Qt6 web window. 3. Let embed web windows in RBrowser also with qt5/qt6/cef . 4. Update documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9194
https://github.com/root-project/root/pull/9194:224,safety,Updat,Update,224,[webgui] improve Qt5/Qt6/CEF related code; 1. Adjust code to latest CEF. 2. Improve polling method when waiting RWebWindow connections from Qt5/Qt6 web window. 3. Let embed web windows in RBrowser also with qt5/qt6/cef . 4. Update documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9194
https://github.com/root-project/root/pull/9194:224,security,Updat,Update,224,[webgui] improve Qt5/Qt6/CEF related code; 1. Adjust code to latest CEF. 2. Improve polling method when waiting RWebWindow connections from Qt5/Qt6 web window. 3. Let embed web windows in RBrowser also with qt5/qt6/cef . 4. Update documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9194
https://github.com/root-project/root/pull/9194:231,usability,document,documentation,231,[webgui] improve Qt5/Qt6/CEF related code; 1. Adjust code to latest CEF. 2. Improve polling method when waiting RWebWindow connections from Qt5/Qt6 web window. 3. Let embed web windows in RBrowser also with qt5/qt6/cef . 4. Update documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9194
https://github.com/root-project/root/issues/9196:315,availability,sli,slide,315,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:199,deployability,observ,observed,199,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:830,energy efficiency,alloc,allocated,830,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:14,performance,memor,memory,14,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:227,performance,memor,memory,227,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:575,performance,perform,performed,575,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:840,performance,memor,memory,840,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:870,performance,time,time,870,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:958,performance,memor,memory,958,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:1143,performance,memor,memory,1143,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:315,reliability,sli,slide,315,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:660,safety,test,test,660,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:551,security,sign,signal,551,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:199,testability,observ,observed,199,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:660,testability,test,test,660,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:14,usability,memor,memory,14,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:227,usability,memor,memory,227,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:575,usability,perform,performed,575,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:840,usability,memor,memory,840,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:958,usability,memor,memory,958,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:1005,usability,user,user-images,1005,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/issues/9196:1143,usability,memor,memory,1143,"[RF] Possible memory leak when running upper-limits with toys; - [ X] Checked for duplicates. Dear All,. as discussed in a previous [issue](https://github.com/root-project/root/issues/7890), we have observed an increase in the memory when method GetInterval of the HypoTestInverter is called (see for example this [slide](https://docs.google.com/presentation/d/1hpDIabM3pMOvooI2TH3hen0YpVy74YCg9XUNNw5prvk/edit?usp=sharing). I've prepared a small example using root 6.22/00 on centos 3.10.0-1160.42.2.el7.x86_64, where I've only one bkg and one dummy signal sample, and I've performed an upper-limit scan with 10k toys (the workspace and .C file used for this test can be found [here](https://cernbox.cern.ch/index.php/s/FOxntIggyp89tt0). As you can see from the picture below (it's a vimdiff of 3 different outputs of pmap), the allocated memory is increasing with the time (from the left to the right). I've also checked that for pmap the majority of this memory is flagged as dirty. . ![image](https://user-images.githubusercontent.com/80854397/139116392-29e8cadb-1f6d-4552-ba1b-c25d185f05d8.png). Is there any way to limit the increase in memory? . Best,. Luigi.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9196
https://github.com/root-project/root/pull/9197:454,deployability,integr,integral,454,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:554,deployability,depend,depending,554,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:454,integrability,integr,integral,454,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:554,integrability,depend,depending,554,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:133,interoperability,convers,conversion,133,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:258,interoperability,convers,conversion,258,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:341,interoperability,convers,conversion,341,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:454,interoperability,integr,integral,454,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:578,interoperability,platform,platform,578,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:454,modifiability,integr,integral,454,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:554,modifiability,depend,depending,554,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:454,reliability,integr,integral,454,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:330,safety,detect,detected,330,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:554,safety,depend,depending,554,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:180,security,loss,loss,180,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:303,security,loss,loss,303,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:330,security,detect,detected,330,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:454,security,integr,integral,454,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:454,testability,integr,integral,454,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9197:554,testability,depend,depending,554,"Silence compilation warnings on Windows 64 bit; Silence a zillion of compilation warnings like:. ```. warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data. ```. From Microsoft:. Compiler Warning (level 3) C4267. 'var' : conversion from 'size_t' to 'type', possible loss of data. The compiler detected a conversion from size_t to a smaller type. To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t. (size_t is unsigned __int64 or unsigned integer, depending on the target platform).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9197
https://github.com/root-project/root/pull/9199:288,availability,slo,slot,288,"[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines; Before this commit, each action and filter was calling InitSlot on all. the defines it knew about. As a consequence, RDefine had to keep track. of whether InitSlot was already called on it for a given task and a. given slot. We can avoid the multiple InitSlot calls on the same objects and the. book-keeping of whether the call already happened or not by having. RLoopManager call InitSlot on every defined column once per task and per. slot. To this end, we need to register RDefine objects with the. RLoopManager when they are created and deregister them when they are. destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9199
https://github.com/root-project/root/pull/9199:506,availability,slo,slot,506,"[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines; Before this commit, each action and filter was calling InitSlot on all. the defines it knew about. As a consequence, RDefine had to keep track. of whether InitSlot was already called on it for a given task and a. given slot. We can avoid the multiple InitSlot calls on the same objects and the. book-keeping of whether the call already happened or not by having. RLoopManager call InitSlot on every defined column once per task and per. slot. To this end, we need to register RDefine objects with the. RLoopManager when they are created and deregister them when they are. destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9199
https://github.com/root-project/root/pull/9199:105,integrability,filter,filter,105,"[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines; Before this commit, each action and filter was calling InitSlot on all. the defines it knew about. As a consequence, RDefine had to keep track. of whether InitSlot was already called on it for a given task and a. given slot. We can avoid the multiple InitSlot calls on the same objects and the. book-keeping of whether the call already happened or not by having. RLoopManager call InitSlot on every defined column once per task and per. slot. To this end, we need to register RDefine objects with the. RLoopManager when they are created and deregister them when they are. destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9199
https://github.com/root-project/root/pull/9199:724,integrability,Filter,Filters,724,"[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines; Before this commit, each action and filter was calling InitSlot on all. the defines it knew about. As a consequence, RDefine had to keep track. of whether InitSlot was already called on it for a given task and a. given slot. We can avoid the multiple InitSlot calls on the same objects and the. book-keeping of whether the call already happened or not by having. RLoopManager call InitSlot on every defined column once per task and per. slot. To this end, we need to register RDefine objects with the. RLoopManager when they are created and deregister them when they are. destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9199
https://github.com/root-project/root/pull/9199:50,performance,time,times,50,"[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines; Before this commit, each action and filter was calling InitSlot on all. the defines it knew about. As a consequence, RDefine had to keep track. of whether InitSlot was already called on it for a given task and a. given slot. We can avoid the multiple InitSlot calls on the same objects and the. book-keeping of whether the call already happened or not by having. RLoopManager call InitSlot on every defined column once per task and per. slot. To this end, we need to register RDefine objects with the. RLoopManager when they are created and deregister them when they are. destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9199
https://github.com/root-project/root/pull/9199:288,reliability,slo,slot,288,"[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines; Before this commit, each action and filter was calling InitSlot on all. the defines it knew about. As a consequence, RDefine had to keep track. of whether InitSlot was already called on it for a given task and a. given slot. We can avoid the multiple InitSlot calls on the same objects and the. book-keeping of whether the call already happened or not by having. RLoopManager call InitSlot on every defined column once per task and per. slot. To this end, we need to register RDefine objects with the. RLoopManager when they are created and deregister them when they are. destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9199
https://github.com/root-project/root/pull/9199:506,reliability,slo,slot,506,"[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines; Before this commit, each action and filter was calling InitSlot on all. the defines it knew about. As a consequence, RDefine had to keep track. of whether InitSlot was already called on it for a given task and a. given slot. We can avoid the multiple InitSlot calls on the same objects and the. book-keeping of whether the call already happened or not by having. RLoopManager call InitSlot on every defined column once per task and per. slot. To this end, we need to register RDefine objects with the. RLoopManager when they are created and deregister them when they are. destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9199
https://github.com/root-project/root/pull/9199:5,safety,Avoid,Avoid,5,"[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines; Before this commit, each action and filter was calling InitSlot on all. the defines it knew about. As a consequence, RDefine had to keep track. of whether InitSlot was already called on it for a given task and a. given slot. We can avoid the multiple InitSlot calls on the same objects and the. book-keeping of whether the call already happened or not by having. RLoopManager call InitSlot on every defined column once per task and per. slot. To this end, we need to register RDefine objects with the. RLoopManager when they are created and deregister them when they are. destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9199
https://github.com/root-project/root/pull/9199:301,safety,avoid,avoid,301,"[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines; Before this commit, each action and filter was calling InitSlot on all. the defines it knew about. As a consequence, RDefine had to keep track. of whether InitSlot was already called on it for a given task and a. given slot. We can avoid the multiple InitSlot calls on the same objects and the. book-keeping of whether the call already happened or not by having. RLoopManager call InitSlot on every defined column once per task and per. slot. To this end, we need to register RDefine objects with the. RLoopManager when they are created and deregister them when they are. destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9199
https://github.com/root-project/root/issues/9202:241,availability,error,error,241,"[ntuple] Members of an aliased type do not resolve to the underlying type; - [X] Checked for duplicates. ### Describe the bug. ```c++. namespace SG { typedef uint32_t sgkey_t; }. class X { SG::sgkey_t sgkey = 123; };. ```. Produces the same error: ""Field sgkey has unknown type SG::sgkey_t"". Cheers, Marcin. ### Setup. Using ROOT from `master` branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9202
https://github.com/root-project/root/issues/9202:241,performance,error,error,241,"[ntuple] Members of an aliased type do not resolve to the underlying type; - [X] Checked for duplicates. ### Describe the bug. ```c++. namespace SG { typedef uint32_t sgkey_t; }. class X { SG::sgkey_t sgkey = 123; };. ```. Produces the same error: ""Field sgkey has unknown type SG::sgkey_t"". Cheers, Marcin. ### Setup. Using ROOT from `master` branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9202
https://github.com/root-project/root/issues/9202:241,safety,error,error,241,"[ntuple] Members of an aliased type do not resolve to the underlying type; - [X] Checked for duplicates. ### Describe the bug. ```c++. namespace SG { typedef uint32_t sgkey_t; }. class X { SG::sgkey_t sgkey = 123; };. ```. Produces the same error: ""Field sgkey has unknown type SG::sgkey_t"". Cheers, Marcin. ### Setup. Using ROOT from `master` branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9202
https://github.com/root-project/root/issues/9202:241,usability,error,error,241,"[ntuple] Members of an aliased type do not resolve to the underlying type; - [X] Checked for duplicates. ### Describe the bug. ```c++. namespace SG { typedef uint32_t sgkey_t; }. class X { SG::sgkey_t sgkey = 123; };. ```. Produces the same error: ""Field sgkey has unknown type SG::sgkey_t"". Cheers, Marcin. ### Setup. Using ROOT from `master` branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9202
https://github.com/root-project/root/pull/9203:739,deployability,updat,updated,739,"[DF][Fix root-project#9116] Display pretty Print and AsString; # This Pull request:. Additional custom column ""rdfentry_"" added to the Display(). The RDisplay constructor is adjusted so that is prints the name of the. first column as ""Row"" (that is always ""rdfentry_""). Function DashesBetweenLines added to display dashes in the beginning,. between entries and in the end of the Print() and AsString() methods. To first column is used to check if there is a new entry in the table. Moreover, the GetColumnsToShorten() method now considers spaces between. columns when counting the total width of the table. All tests are adjusted accordingly. ## Changes or fixes:. More beatiful Display. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9116 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9203
https://github.com/root-project/root/pull/9203:611,safety,test,tests,611,"[DF][Fix root-project#9116] Display pretty Print and AsString; # This Pull request:. Additional custom column ""rdfentry_"" added to the Display(). The RDisplay constructor is adjusted so that is prints the name of the. first column as ""Row"" (that is always ""rdfentry_""). Function DashesBetweenLines added to display dashes in the beginning,. between entries and in the end of the Print() and AsString() methods. To first column is used to check if there is a new entry in the table. Moreover, the GetColumnsToShorten() method now considers spaces between. columns when counting the total width of the table. All tests are adjusted accordingly. ## Changes or fixes:. More beatiful Display. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9116 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9203
https://github.com/root-project/root/pull/9203:709,safety,test,tested,709,"[DF][Fix root-project#9116] Display pretty Print and AsString; # This Pull request:. Additional custom column ""rdfentry_"" added to the Display(). The RDisplay constructor is adjusted so that is prints the name of the. first column as ""Row"" (that is always ""rdfentry_""). Function DashesBetweenLines added to display dashes in the beginning,. between entries and in the end of the Print() and AsString() methods. To first column is used to check if there is a new entry in the table. Moreover, the GetColumnsToShorten() method now considers spaces between. columns when counting the total width of the table. All tests are adjusted accordingly. ## Changes or fixes:. More beatiful Display. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9116 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9203
https://github.com/root-project/root/pull/9203:739,safety,updat,updated,739,"[DF][Fix root-project#9116] Display pretty Print and AsString; # This Pull request:. Additional custom column ""rdfentry_"" added to the Display(). The RDisplay constructor is adjusted so that is prints the name of the. first column as ""Row"" (that is always ""rdfentry_""). Function DashesBetweenLines added to display dashes in the beginning,. between entries and in the end of the Print() and AsString() methods. To first column is used to check if there is a new entry in the table. Moreover, the GetColumnsToShorten() method now considers spaces between. columns when counting the total width of the table. All tests are adjusted accordingly. ## Changes or fixes:. More beatiful Display. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9116 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9203
https://github.com/root-project/root/pull/9203:739,security,updat,updated,739,"[DF][Fix root-project#9116] Display pretty Print and AsString; # This Pull request:. Additional custom column ""rdfentry_"" added to the Display(). The RDisplay constructor is adjusted so that is prints the name of the. first column as ""Row"" (that is always ""rdfentry_""). Function DashesBetweenLines added to display dashes in the beginning,. between entries and in the end of the Print() and AsString() methods. To first column is used to check if there is a new entry in the table. Moreover, the GetColumnsToShorten() method now considers spaces between. columns when counting the total width of the table. All tests are adjusted accordingly. ## Changes or fixes:. More beatiful Display. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9116 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9203
https://github.com/root-project/root/pull/9203:611,testability,test,tests,611,"[DF][Fix root-project#9116] Display pretty Print and AsString; # This Pull request:. Additional custom column ""rdfentry_"" added to the Display(). The RDisplay constructor is adjusted so that is prints the name of the. first column as ""Row"" (that is always ""rdfentry_""). Function DashesBetweenLines added to display dashes in the beginning,. between entries and in the end of the Print() and AsString() methods. To first column is used to check if there is a new entry in the table. Moreover, the GetColumnsToShorten() method now considers spaces between. columns when counting the total width of the table. All tests are adjusted accordingly. ## Changes or fixes:. More beatiful Display. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9116 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9203
https://github.com/root-project/root/pull/9203:709,testability,test,tested,709,"[DF][Fix root-project#9116] Display pretty Print and AsString; # This Pull request:. Additional custom column ""rdfentry_"" added to the Display(). The RDisplay constructor is adjusted so that is prints the name of the. first column as ""Row"" (that is always ""rdfentry_""). Function DashesBetweenLines added to display dashes in the beginning,. between entries and in the end of the Print() and AsString() methods. To first column is used to check if there is a new entry in the table. Moreover, the GetColumnsToShorten() method now considers spaces between. columns when counting the total width of the table. All tests are adjusted accordingly. ## Changes or fixes:. More beatiful Display. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9116 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9203
https://github.com/root-project/root/pull/9203:96,usability,custom,custom,96,"[DF][Fix root-project#9116] Display pretty Print and AsString; # This Pull request:. Additional custom column ""rdfentry_"" added to the Display(). The RDisplay constructor is adjusted so that is prints the name of the. first column as ""Row"" (that is always ""rdfentry_""). Function DashesBetweenLines added to display dashes in the beginning,. between entries and in the end of the Print() and AsString() methods. To first column is used to check if there is a new entry in the table. Moreover, the GetColumnsToShorten() method now considers spaces between. columns when counting the total width of the table. All tests are adjusted accordingly. ## Changes or fixes:. More beatiful Display. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9116 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9203
https://github.com/root-project/root/pull/9204:172,deployability,updat,updated,172,"Tutorial aliases; # This Pull request: Applied aliases in tutorials for RVec (int, double, float). ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9204
https://github.com/root-project/root/pull/9204:142,safety,test,tested,142,"Tutorial aliases; # This Pull request: Applied aliases in tutorials for RVec (int, double, float). ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9204
https://github.com/root-project/root/pull/9204:172,safety,updat,updated,172,"Tutorial aliases; # This Pull request: Applied aliases in tutorials for RVec (int, double, float). ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9204
https://github.com/root-project/root/pull/9204:172,security,updat,updated,172,"Tutorial aliases; # This Pull request: Applied aliases in tutorials for RVec (int, double, float). ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9204
https://github.com/root-project/root/pull/9204:142,testability,test,tested,142,"Tutorial aliases; # This Pull request: Applied aliases in tutorials for RVec (int, double, float). ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9204
https://github.com/root-project/root/pull/9205:230,deployability,updat,updated,230,"[DF][Fix root-project#9117] Applied aliases in tutorials; # This Pull request: Applied aliases in tutorials for RVec (int, float, double). ## Changes or fixes: Use newer aliases. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9117 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9205
https://github.com/root-project/root/pull/9205:200,safety,test,tested,200,"[DF][Fix root-project#9117] Applied aliases in tutorials; # This Pull request: Applied aliases in tutorials for RVec (int, float, double). ## Changes or fixes: Use newer aliases. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9117 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9205
https://github.com/root-project/root/pull/9205:230,safety,updat,updated,230,"[DF][Fix root-project#9117] Applied aliases in tutorials; # This Pull request: Applied aliases in tutorials for RVec (int, float, double). ## Changes or fixes: Use newer aliases. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9117 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9205
https://github.com/root-project/root/pull/9205:230,security,updat,updated,230,"[DF][Fix root-project#9117] Applied aliases in tutorials; # This Pull request: Applied aliases in tutorials for RVec (int, float, double). ## Changes or fixes: Use newer aliases. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9117 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9205
https://github.com/root-project/root/pull/9205:200,testability,test,tested,200,"[DF][Fix root-project#9117] Applied aliases in tutorials; # This Pull request: Applied aliases in tutorials for RVec (int, float, double). ## Changes or fixes: Use newer aliases. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9117 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9205
https://github.com/root-project/root/pull/9206:168,availability,redund,redundant,168,"[RF] Some code modernization of RooNLLVar; * replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to. one of the internal-use constructors to be consistent with the other. internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9206
https://github.com/root-project/root/pull/9206:413,availability,consist,consistent,413,"[RF] Some code modernization of RooNLLVar; * replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to. one of the internal-use constructors to be consistent with the other. internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9206
https://github.com/root-project/root/pull/9206:168,deployability,redundan,redundant,168,"[RF] Some code modernization of RooNLLVar; * replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to. one of the internal-use constructors to be consistent with the other. internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9206
https://github.com/root-project/root/pull/9206:472,performance,memor,memory,472,"[RF] Some code modernization of RooNLLVar; * replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to. one of the internal-use constructors to be consistent with the other. internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9206
https://github.com/root-project/root/pull/9206:168,reliability,redundan,redundant,168,"[RF] Some code modernization of RooNLLVar; * replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to. one of the internal-use constructors to be consistent with the other. internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9206
https://github.com/root-project/root/pull/9206:168,safety,redund,redundant,168,"[RF] Some code modernization of RooNLLVar; * replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to. one of the internal-use constructors to be consistent with the other. internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9206
https://github.com/root-project/root/pull/9206:204,safety,avoid,avoid,204,"[RF] Some code modernization of RooNLLVar; * replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to. one of the internal-use constructors to be consistent with the other. internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9206
https://github.com/root-project/root/pull/9206:413,usability,consist,consistent,413,"[RF] Some code modernization of RooNLLVar; * replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to. one of the internal-use constructors to be consistent with the other. internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9206
https://github.com/root-project/root/pull/9206:472,usability,memor,memory,472,"[RF] Some code modernization of RooNLLVar; * replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to. one of the internal-use constructors to be consistent with the other. internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9206
https://github.com/root-project/root/issues/9207:409,availability,state,stated,409,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:489,availability,state,state,489,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:581,deployability,contain,contain,581,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:725,deployability,continu,continuation,725,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:1729,deployability,releas,release,1729,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:409,integrability,state,stated,409,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:489,integrability,state,state,489,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:600,integrability,messag,message,600,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:622,integrability,messag,message,622,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:666,integrability,messag,messages,666,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:781,integrability,messag,messages,781,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:1294,integrability,messag,message,1294,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:1437,integrability,messag,message,1437,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:1579,integrability,messag,message,1579,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:600,interoperability,messag,message,600,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:622,interoperability,messag,message,622,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:666,interoperability,messag,messages,666,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:781,interoperability,messag,messages,781,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:1294,interoperability,messag,message,1294,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:1437,interoperability,messag,message,1437,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:1579,interoperability,messag,message,1579,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:23,reliability,doe,does,23,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:93,safety,compl,complete,93,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:591,safety,compl,complete,591,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:93,security,compl,complete,93,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:591,security,compl,complete,591,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:276,usability,behavi,behaviour,276,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:689,usability,indicat,indicates,689,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:804,usability,indicat,indicates,804,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/issues/9207:1491,usability,indicat,indicate,1491,"WebSocket data handler does not check opcode ; ### The WebSocket data handler in ROOT is not complete. The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received. As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. . - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);. - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);. - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;. - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;. - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:. 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5). 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9207
https://github.com/root-project/root/pull/9208:83,interoperability,format,formatting,83,[tree] Port to Win64 (supersedes #8013); Replace `Long_t` by `Longptr_t` + pointer formatting,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9208
https://github.com/root-project/root/pull/9209:96,availability,operat,operation,96,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:181,availability,failur,failure,181,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:181,deployability,fail,failure,181,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:225,integrability,messag,message,225,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:271,integrability,messag,message,271,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:65,interoperability,socket,socket,65,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:225,interoperability,messag,message,225,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:241,interoperability,socket,socket,241,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:271,interoperability,messag,message,271,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:181,performance,failur,failure,181,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:181,reliability,fail,failure,181,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:249,safety,Prevent,Prevent,249,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:65,security,soc,socket,65,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:241,security,soc,socket,241,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:249,security,Preven,Prevent,249,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:143,usability,support,supported,143,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:219,usability,close,close,219,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9209:265,usability,close,close,265,"[http] analyze websocket opcode in civetweb (#9207); In civetweb socket handler check different operation codes. According to RFC6455, all not-supported codes should be handled as. failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9209
https://github.com/root-project/root/pull/9210:101,security,sign,signature,101,"[montecarlo] Use correct argument types; Cast arguments to the correct `Long64_t` types. The methods signature are `TExMap::GetValue(Long64_t key)` and `TExMap::Add(Long64_t key, Long64_t value)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9210
https://github.com/root-project/root/pull/9211:0,deployability,Updat,Update,0,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:168,deployability,log,logical,168,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:312,deployability,updat,updated,312,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:40,energy efficiency,Draw,DrawLatex,40,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:154,reliability,doe,does,154,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:0,safety,Updat,Update,0,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:168,safety,log,logical,168,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:282,safety,test,tested,282,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:312,safety,updat,updated,312,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:0,security,Updat,Update,0,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:168,security,log,logical,168,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:312,security,updat,updated,312,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:168,testability,log,logical,168,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9211:282,testability,test,tested,282,"Update TLatex.cxx; The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9211
https://github.com/root-project/root/pull/9212:812,availability,consist,consistent,812,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:963,deployability,integr,integral,963,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1040,deployability,integr,integral,1040,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1099,deployability,integr,integral,1099,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1185,deployability,integr,integral,1185,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1273,deployability,integr,integral,1273,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1332,deployability,integr,integral,1332,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1347,deployability,manag,manager,1347,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:456,energy efficiency,model,model,456,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:742,energy efficiency,model,model,742,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1138,energy efficiency,model,model,1138,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1347,energy efficiency,manag,manager,1347,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:217,integrability,batch,batch,217,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:866,integrability,batch,batch,866,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:963,integrability,integr,integral,963,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1040,integrability,integr,integral,1040,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1099,integrability,integr,integral,1099,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1185,integrability,integr,integral,1185,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1273,integrability,integr,integral,1273,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1332,integrability,integr,integral,1332,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:963,interoperability,integr,integral,963,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1040,interoperability,integr,integral,1040,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1099,interoperability,integr,integral,1099,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1185,interoperability,integr,integral,1185,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1273,interoperability,integr,integral,1273,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1332,interoperability,integr,integral,1332,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:90,modifiability,inherit,inherits,90,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:963,modifiability,integr,integral,963,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1040,modifiability,integr,integral,1040,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1099,modifiability,integr,integral,1099,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1185,modifiability,integr,integral,1185,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1273,modifiability,integr,integral,1273,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1332,modifiability,integr,integral,1332,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:217,performance,batch,batch,217,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:866,performance,batch,batch,866,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1341,performance,cach,cache,1341,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:240,reliability,doe,doesn,240,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:328,reliability,doe,does,328,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:372,reliability,doe,doesn,372,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:963,reliability,integr,integral,963,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1040,reliability,integr,integral,1040,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1099,reliability,integr,integral,1099,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1185,reliability,integr,integral,1185,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1273,reliability,integr,integral,1273,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1332,reliability,integr,integral,1332,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:924,safety,compl,complication,924,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1347,safety,manag,manager,1347,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:456,security,model,model,456,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:742,security,model,model,742,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:924,security,compl,complication,924,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:963,security,integr,integral,963,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1040,security,integr,integral,1040,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1099,security,integr,integral,1099,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1138,security,model,model,1138,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1185,security,integr,integral,1185,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1273,security,integr,integral,1273,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1332,security,integr,integral,1332,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:963,testability,integr,integral,963,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1040,testability,integr,integral,1040,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1099,testability,integr,integral,1099,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1185,testability,integr,integral,1185,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1273,testability,integr,integral,1273,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1332,testability,integr,integral,1332,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1532,testability,simpl,simplification,1532,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:791,usability,behavi,behavior,791,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:812,usability,consist,consistent,812,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9212:1532,usability,simpl,simplification,1532,"[RF] Implement `RooResolutionModel::selfNormalized`; Even though the `RooResolutionModel` inherits from RooAbsPdf, it is. special because it has it's own overload of `getValV`. This is. problematic for the new RooFit batch mode, because it doesn't use. `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs. it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the. resolution model behaves like a pdf when used on it's own (i.e., it will. be normalized), but when used for an analytical convolution via. `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is. implemented to return `true` if the resolution model is used in a. convolution. Like this, it's behavior as a pdf is consistent with the. `getValV` implementation and the batch mode had no problems using that. class anymore. One complication after this change was the integral code in. `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral. value is retrieved by getting it's normalization integral, but now that. the resolution model is proclaiming to be self-normalized the integral. is always trivially one. This problem is solved by getting the. normalization integral directly via `getNormObj` from the normalization. integral cache manager, in which case the check for self-normalization. is not done. In fact, this has already been done before in the case of. ranged fits, so the change in this commit is actually a simplification. of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9212
https://github.com/root-project/root/pull/9213:179,deployability,version,versions,179,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:258,energy efficiency,load,loading,258,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:88,integrability,Compon,Component-preload,88,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:147,integrability,compon,components,147,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:179,integrability,version,versions,179,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:192,integrability,Compon,Component,192,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:277,integrability,compon,components,277,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:88,interoperability,Compon,Component-preload,88,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:147,interoperability,compon,components,147,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:192,interoperability,Compon,Component,192,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:277,interoperability,compon,components,277,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:88,modifiability,Compon,Component-preload,88,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:147,modifiability,compon,components,147,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:179,modifiability,version,versions,179,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:192,modifiability,Compon,Component,192,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:277,modifiability,compon,components,277,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:258,performance,load,loading,258,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:121,reliability,RCa,RCanvas,121,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:234,security,control,controllers,234,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9213:234,testability,control,controllers,234,"Let run python scripts from RBrowser; Also provide latest JSROOT. And provide `ui5/canv/Component-preload.js`. Used for `RCanvas` and `TWebCanvas` components. Includes compressed versions of `Component.js`, `manifest.json`, views and controllers. . Speed-up loading of the web components. Preliminary code to generate such file is:. https://github.com/linev/misc/tree/master/ui5comp. CAUTION! All changes in original scripts only will take effect after changes in preload script",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9213
https://github.com/root-project/root/pull/9214:222,availability,error,errors,222,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:679,availability,error,error,679,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1501,availability,Error,Error,1501,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1608,availability,error,error,1608,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:339,deployability,log,log,339,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:376,deployability,build,build,376,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:410,deployability,build,build,410,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:522,deployability,build,build,522,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:556,deployability,build,build,556,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:609,deployability,build,build,609,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:643,deployability,build,build,643,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:649,deployability,build,build,649,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:748,deployability,build,build,748,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:782,deployability,build,build,782,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:788,deployability,build,build,788,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:847,deployability,build,build,847,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:881,deployability,build,build,881,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:887,deployability,build,build,887,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:976,deployability,modul,module,976,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1049,deployability,build,build,1049,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1083,deployability,build,build,1083,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1089,deployability,build,build,1089,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1103,deployability,modul,module,1103,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1110,deployability,modul,modulemap,1110,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1172,deployability,modul,module,1172,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1254,deployability,build,build,1254,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1288,deployability,build,build,1288,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1350,deployability,build,build,1350,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1384,deployability,build,build,1384,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1390,deployability,build,build,1390,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1525,deployability,build,build,1525,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1559,deployability,build,build,1559,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1565,deployability,build,build,1565,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1597,integrability,messag,message,1597,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1597,interoperability,messag,message,1597,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:976,modifiability,modul,module,976,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1103,modifiability,modul,module,1103,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1110,modifiability,modul,modulemap,1110,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1172,modifiability,modul,module,1172,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:222,performance,error,errors,222,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:679,performance,error,error,679,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:930,performance,time,times,930,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1433,performance,time,times,1433,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1501,performance,Error,Error,1501,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1608,performance,error,error,1608,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:5,safety,Avoid,Avoid,5,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:62,safety,test,tests,62,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:222,safety,error,errors,222,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:339,safety,log,log,339,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:421,safety,test,test,421,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:567,safety,test,test,567,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:679,safety,error,error,679,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:976,safety,modul,module,976,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1103,safety,modul,module,1103,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1110,safety,modul,modulemap,1110,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1172,safety,modul,module,1172,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1299,safety,test,test,1299,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1501,safety,Error,Error,1501,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1608,safety,error,error,1608,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:339,security,log,log,339,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:62,testability,test,tests,62,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:339,testability,log,log,339,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:421,testability,test,test,421,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:567,testability,test,test,567,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1299,testability,test,test,1299,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:222,usability,error,errors,222,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:679,usability,error,error,679,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1501,usability,Error,Error,1501,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/pull/9214:1608,usability,error,error,1608,"[RF] Avoid including `RooMath.h` in RooFit headers and stress tests; This change is introduced to fix a problem with redefinition of RooMath. when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:. https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:. ```. Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx... In file included from input_line_8:1:. In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'. class RooMath {. ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'. #include ""RooMath.h"". ^. /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here. module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }. ^. /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here. #include ""RooMath.h"". ^. CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):. error code: 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9214
https://github.com/root-project/root/issues/9215:806,availability,state,states,806,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:411,deployability,contain,containing,411,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:561,deployability,Version,Version,561,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:602,energy efficiency,current,current,602,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:561,integrability,Version,Version,561,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:806,integrability,state,states,806,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:275,interoperability,share,shared,275,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:561,modifiability,Version,Version,561,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:38,reliability,doe,does,38,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:177,reliability,doe,does,177,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:47,safety,prevent,prevent,47,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:186,safety,prevent,prevent,186,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:249,safety,prevent,prevents,249,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:342,safety,test,test,342,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:490,safety,test,test,490,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:534,safety,test,test,534,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:47,security,preven,prevent,47,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:186,security,preven,prevent,186,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:249,security,preven,prevents,249,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:342,testability,test,test,342,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:490,testability,test,test,490,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:534,testability,test,test,534,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:665,testability,context,context,665,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:124,usability,document,documented,124,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:222,usability,behavi,behavior,222,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:678,usability,document,documentation,678,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/issues/9215:1047,usability,document,documentation,1047,"TFile::MakeProject ""nocompile"" option does not prevent compilation; - [x] Checked for duplicates. ### Describe the bug. The documented `nocompile` flag for `TFile::MakeProject` does not prevent compilation. . ### Expected behavior. `nocompile` flag prevents compilation of a shared object library. ### To Reproduce. Run: `tfile->MakeProject(""test"", ""*"", ""recreate+nocompile"");`. on any ROOT file with a `TTree` containing data that `MakeProject` can generate classes for. In the generated `test` directory you will see that it built `test.so`. ### Setup. `ROOT Version: 6.24/06` but is also present in current `master` (see source code links below). ### Additional context. The documentation for [TFile::MakeProject](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L2627). incorrectly states that the `nocompile` option disabled compilation of the library. The actual implementation in the [source code](https://github.com/root-project/root/blob/master/io/io/src/TFile.cxx#L3257) actually requires `nocompilation`. Either the documentation or the implementation needs to be changed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9215
https://github.com/root-project/root/pull/9216:35,energy efficiency,optim,optimize,35,[DF] Use SparkContext attribute to optimize npartitions; The SparkContext.defaultParallelism attribute is always defined. Using it we can define a more elegant `optimize_npartitions` method for the SparkBackend.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9216
https://github.com/root-project/root/pull/9216:35,performance,optimiz,optimize,35,[DF] Use SparkContext attribute to optimize npartitions; The SparkContext.defaultParallelism attribute is always defined. Using it we can define a more elegant `optimize_npartitions` method for the SparkBackend.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9216
https://github.com/root-project/root/pull/9218:19,deployability,version,version,19,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:329,deployability,updat,updated,329,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:19,integrability,version,version,19,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:112,integrability,translat,translated,112,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:175,integrability,translat,translated,175,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:112,interoperability,translat,translated,112,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:175,interoperability,translat,translated,175,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:19,modifiability,version,version,19,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:299,safety,test,tested,299,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:329,safety,updat,updated,329,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:329,security,updat,updated,329,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:299,testability,test,tested,299,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9218:261,usability,help,helps,261,[RF] Remove Python version of outdated `rf204_extrangefit` tutorial; # This Pull request:. rf204_extrangefit.py translated to C++. ## Changes or fixes:. Whole python code was translated to C++ with code description as written in rf204_extrangefit.py. Hope this helps. Thanks! . ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9218
https://github.com/root-project/root/pull/9219:269,energy efficiency,profil,profile,269,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:17,integrability,batch,batch,17,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:159,interoperability,standard,standard,159,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:299,modifiability,paramet,parameters,299,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:17,performance,batch,batch,17,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:269,performance,profil,profile,269,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:65,reliability,doe,does,65,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:133,reliability,doe,does,133,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:9,usability,support,support,9,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:91,usability,command,command,91,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:253,usability,user,user,253,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9219:292,usability,custom,custom,292,"[webgui] support batch mode with Firefox; Unfortunately, Firefox does not provide dump-dom command line argument. as chrome/chromium does. But one can use non-standard `window.dump()`. function which only exists in Firefox. For that one need to create. user.js file in profile directory with custom parameters. Now one can create png, svg, jpeg files with Firefox, not PDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9219
https://github.com/root-project/root/pull/9222:92,deployability,fail,fail,92,"[VecOps] Allow implicit conversions in Where; Before this commit, something like this would fail:. Where(arr1 > 2, 10, ROOT::RVecF{arr1.size(), 1.f}). Because 10 is not exactly `float`. We now allow the scalar arguments to be of a different type from the. value_type of the RVec arguments if they can be implicitly coverted. to the value_type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9222
https://github.com/root-project/root/pull/9222:24,interoperability,convers,conversions,24,"[VecOps] Allow implicit conversions in Where; Before this commit, something like this would fail:. Where(arr1 > 2, 10, ROOT::RVecF{arr1.size(), 1.f}). Because 10 is not exactly `float`. We now allow the scalar arguments to be of a different type from the. value_type of the RVec arguments if they can be implicitly coverted. to the value_type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9222
https://github.com/root-project/root/pull/9222:203,modifiability,scal,scalar,203,"[VecOps] Allow implicit conversions in Where; Before this commit, something like this would fail:. Where(arr1 > 2, 10, ROOT::RVecF{arr1.size(), 1.f}). Because 10 is not exactly `float`. We now allow the scalar arguments to be of a different type from the. value_type of the RVec arguments if they can be implicitly coverted. to the value_type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9222
https://github.com/root-project/root/pull/9222:92,reliability,fail,fail,92,"[VecOps] Allow implicit conversions in Where; Before this commit, something like this would fail:. Where(arr1 > 2, 10, ROOT::RVecF{arr1.size(), 1.f}). Because 10 is not exactly `float`. We now allow the scalar arguments to be of a different type from the. value_type of the RVec arguments if they can be implicitly coverted. to the value_type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9222
https://github.com/root-project/root/pull/9224:64,availability,cluster,cluster,64,[ntuple] Fix race in RClusterPool destruction; Ensures that the cluster prefetch thread flushes all queued requests before processing the termination signal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9224
https://github.com/root-project/root/pull/9224:64,deployability,cluster,cluster,64,[ntuple] Fix race in RClusterPool destruction; Ensures that the cluster prefetch thread flushes all queued requests before processing the termination signal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9224
https://github.com/root-project/root/pull/9224:100,integrability,queue,queued,100,[ntuple] Fix race in RClusterPool destruction; Ensures that the cluster prefetch thread flushes all queued requests before processing the termination signal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9224
https://github.com/root-project/root/pull/9224:100,performance,queue,queued,100,[ntuple] Fix race in RClusterPool destruction; Ensures that the cluster prefetch thread flushes all queued requests before processing the termination signal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9224
https://github.com/root-project/root/pull/9224:150,security,sign,signal,150,[ntuple] Fix race in RClusterPool destruction; Ensures that the cluster prefetch thread flushes all queued requests before processing the termination signal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9224
https://github.com/root-project/root/issues/9225:656,deployability,fail,failed,656,"[Feature][DF] `Snapshot()` to a `TDirectory`; ### Is your feature request related to a problem? Please describe. When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like. Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered. The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context. I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9225
https://github.com/root-project/root/issues/9225:215,energy efficiency,current,current,215,"[Feature][DF] `Snapshot()` to a `TDirectory`; ### Is your feature request related to a problem? Please describe. When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like. Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered. The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context. I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9225
https://github.com/root-project/root/issues/9225:567,integrability,sub,sub,567,"[Feature][DF] `Snapshot()` to a `TDirectory`; ### Is your feature request related to a problem? Please describe. When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like. Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered. The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context. I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9225
https://github.com/root-project/root/issues/9225:656,reliability,fail,failed,656,"[Feature][DF] `Snapshot()` to a `TDirectory`; ### Is your feature request related to a problem? Please describe. When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like. Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered. The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context. I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9225
https://github.com/root-project/root/issues/9225:533,safety,test,tested,533,"[Feature][DF] `Snapshot()` to a `TDirectory`; ### Is your feature request related to a problem? Please describe. When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like. Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered. The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context. I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9225
https://github.com/root-project/root/issues/9225:533,testability,test,tested,533,"[Feature][DF] `Snapshot()` to a `TDirectory`; ### Is your feature request related to a problem? Please describe. When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like. Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered. The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context. I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9225
https://github.com/root-project/root/issues/9225:617,testability,context,context,617,"[Feature][DF] `Snapshot()` to a `TDirectory`; ### Is your feature request related to a problem? Please describe. When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like. Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered. The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context. I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9225
https://github.com/root-project/root/issues/9225:205,usability,close,close,205,"[Feature][DF] `Snapshot()` to a `TDirectory`; ### Is your feature request related to a problem? Please describe. When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like. Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered. The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context. I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9225
https://github.com/root-project/root/issues/9225:487,usability,close,close,487,"[Feature][DF] `Snapshot()` to a `TDirectory`; ### Is your feature request related to a problem? Please describe. When taking a snapshot (generating a `TTree`) of an `RInterface` with RDataFrame, I need to close the current file, write to it, and open it up again. ### Describe the solution you'd like. Aside from the file name, I also hope to be able to feed a `TDirectory` to the `Snapshot()` method of an `RInterface`. ### Describe alternatives you've considered. The workaround is to close the file, write and reopen it. I havent tested if it's able to write to a sub-`TDirectory` inside a `TFile`. ### Additional context. I tried to add it myself, but failed to find the code that implements the snapshot functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9225
https://github.com/root-project/root/pull/9228:4,interoperability,bind,bindexplib,4,Fix bindexplib on Windows 64 bit; ```. Portions of this source have been derived from CMake and are. distributed under the OSI-approved BSD 3-Clause License. See https://cmake.org/licensing for details. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9228
https://github.com/root-project/root/pull/9228:101,interoperability,distribut,distributed,101,Fix bindexplib on Windows 64 bit; ```. Portions of this source have been derived from CMake and are. distributed under the OSI-approved BSD 3-Clause License. See https://cmake.org/licensing for details. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9228
https://github.com/root-project/root/pull/9228:4,modifiability,bind,bindexplib,4,Fix bindexplib on Windows 64 bit; ```. Portions of this source have been derived from CMake and are. distributed under the OSI-approved BSD 3-Clause License. See https://cmake.org/licensing for details. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9228
https://github.com/root-project/root/pull/9229:163,deployability,log,log,163,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:167,deployability,scale,scale,167,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:233,deployability,log,log,233,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:167,energy efficiency,scale,scale,167,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:307,integrability,event,event-,307,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:167,modifiability,scal,scale,167,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:167,performance,scale,scale,167,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:0,safety,Compl,Complete,0,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:63,safety,Compl,Complete,63,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:163,safety,log,log,163,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:233,safety,log,log,233,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:0,security,Compl,Complete,0,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:63,security,Compl,Complete,63,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:163,security,log,log,163,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:233,security,log,log,233,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:163,testability,log,log,163,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/pull/9229:233,testability,log,log,233,"Complete fhistogram limits computations; # This Pull request:. Complete https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604 in case of log scale on Y. The coded imported in that PR from ""Paint"" missed the log part. It was seen in https://github.com/root-project/root/issues/9011#event-5529694431. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9229
https://github.com/root-project/root/issues/9231:0,availability,Error,Error,0,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:249,availability,error,error,249,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:265,availability,error,error,265,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:589,availability,down,download,589,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:0,performance,Error,Error,0,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:249,performance,error,error,249,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:256,performance,disk,disk,256,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:261,performance,I/O,I/O,261,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:265,performance,error,error,265,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:0,safety,Error,Error,0,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:249,safety,error,error,249,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:265,safety,error,error,265,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:572,testability,context,context,572,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:0,usability,Error,Error,0,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:249,usability,error,error,249,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:265,usability,error,error,265,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/issues/9231:290,usability,behavi,behavior,290,"Error creating SqliteDataFrame; - [x] Checked for duplicates. ### Describe the bug. ROOT script crashes when trying to read an SQLite file into an data frame:. ```. terminate called after throwing an instance of 'std::runtime_error'. what(): SQlite error: disk I/O error. ```. ### Expected behavior. Should not crash. ### To Reproduce. ```. root.exe -q 'generate_stats_plots.C+(""stats.db"", ""stats.root"")'. ```. ### Setup. ROOT 6.24/04. Linux lxcvmfs146.cern.ch 3.10.0-1160.36.2.el7.x86_64 #1 SMP Wed Jul 21 11:57:15 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux. ### Additional context. You can download the ROOT script and the SQLite database here: https://cernbox.cern.ch/index.php/s/JwjCMwnirmL8aX1. Thank you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9231
https://github.com/root-project/root/pull/9234:149,security,access,accessible,149,"[DF] Move CheckDefineType from RDefineReader.hxx to Utils.hxx; We will use this helper function for variations too, let's put it in a more generally accessible place.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9234
https://github.com/root-project/root/pull/9234:80,usability,help,helper,80,"[DF] Move CheckDefineType from RDefineReader.hxx to Utils.hxx; We will use this helper function for variations too, let's put it in a more generally accessible place.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9234
https://github.com/root-project/root/pull/9237:141,interoperability,format,formatting,141,"[win32gdk] Port to Win64; Replace several `long` by `__int64` and/or `intptr_t`, `Long_t` by `Longptr_t`, `int` by `size_t`, and fix pointer formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9237
https://github.com/root-project/root/pull/9239:7,integrability,coupl,couple,7,Port a couple of tests and tutorials to Win64 (replace Long_t by Long…; …ptr_t + pointer formatting).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9239
https://github.com/root-project/root/pull/9239:89,interoperability,format,formatting,89,Port a couple of tests and tutorials to Win64 (replace Long_t by Long…; …ptr_t + pointer formatting).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9239
https://github.com/root-project/root/pull/9239:7,modifiability,coupl,couple,7,Port a couple of tests and tutorials to Win64 (replace Long_t by Long…; …ptr_t + pointer formatting).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9239
https://github.com/root-project/root/pull/9239:17,safety,test,tests,17,Port a couple of tests and tutorials to Win64 (replace Long_t by Long…; …ptr_t + pointer formatting).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9239
https://github.com/root-project/root/pull/9239:7,testability,coupl,couple,7,Port a couple of tests and tutorials to Win64 (replace Long_t by Long…; …ptr_t + pointer formatting).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9239
https://github.com/root-project/root/pull/9239:17,testability,test,tests,17,Port a couple of tests and tutorials to Win64 (replace Long_t by Long…; …ptr_t + pointer formatting).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9239
https://github.com/root-project/root/issues/9240:766,availability,error,errors,766,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:5679,availability,error,errors,5679,"::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6070,availability,error,error,6070,"ing df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6143,availability,error,error,6143,"pshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) . jEntry: 2	nVar: 5	size: 5. (0.703626, 0.856803, 0.459377, -1.173015) (0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:9651,availability,Error,Error,9651," a custom column TestVar2. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10436,availability,Operat,Operating,10436,"Var1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12,deployability,manag,managing,12,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10240,deployability,version,version,10240," file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10352,deployability,Version,Version,10352,"Size(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""gi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10625,deployability,version,version,10625,"GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10778,deployability,build,build,10778,"or the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. vers",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10801,deployability,manag,manager,10801," is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11102,deployability,version,version,11102,"nate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUIL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11166,deployability,build,build,11166,"hat(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11777,deployability,version,version,11777,"ld with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12134,deployability,build,buildInputs,12134,"ntext. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""lo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12157,deployability,build,buildInputs,12157,"to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12303,deployability,build,buildInputs,12303,"xpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:14672,deployability,version,version,14672,"root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": ""root"",. ""rev"": ""24ea49d4702ba0aa9b1ea5521950520154ee151c"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""root-project"",. ""ref"": ""master"",. ""repo"": ""root"",. ""type"": ""github"". }. }. },. ""root"": ""root"",. ""version"": 7. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12,energy efficiency,manag,managing,12,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10699,energy efficiency,profil,profiles,10699,":VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. ov",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10801,energy efficiency,manag,manager,10801," is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:1536,integrability,Event,Events,1536," the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::endl;. 		for (size_t iVar = 0; iVar < nVar; ++iVar) {. 			const auto &pVar = new((*tcaTest)[iVar]) TLorentzVector(gen_rand(), gen_rand(), gen_rand(), gen_rand());. 			std::fprintf(stderr, ""(%F, %F, %F, %F) "", pVar->Px(), pVar->Py(), pVar->Pz(), pVar->M());. 		}. 		std::cerr << std::endl;. 		ttOut->Fill();. 	}. 	ttOut->Write();. 	tfOut->Close();. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		gen_tree(argv[1]);. 	} else {. 		gen_tree();. 	}. 	return 0;. }. ```. `reproduce.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:2928,integrability,Event,Events,2928,"ry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::endl;. 		for (size_t iVar = 0; iVar < nVar; ++iVar) {. 			const auto &pVar = new((*tcaTest)[iVar]) TLorentzVector(gen_rand(), gen_rand(), gen_rand(), gen_rand());. 			std::fprintf(stderr, ""(%F, %F, %F, %F) "", pVar->Px(), pVar->Py(), pVar->Pz(), pVar->M());. 		}. 		std::cerr << std::endl;. 		ttOut->Fill();. 	}. 	ttOut->Write();. 	tfOut->Close();. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		gen_tree(argv[1]);. 	} else {. 		gen_tree();. 	}. 	return 0;. }. ```. `reproduce.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TH1.h>. #include <TLorentzVector.h>. #include <ROOT/RDataFrame.hxx>. #include <Math/Vector4D.h>. #include <vector>. #include <string>. void reproduce(const std::string pathFileIn = ""file_tcatlv.root"", const std::string pathFileOut = ""file_out.root"") {. 	TFile *tfIn = TFile::Open(pathFileIn.c_str());. 	TTree *ttIn = tfIn->Get<TTree>(""Events"");. 	ROOT::RDataFrame dfIn(*ttIn);. 	std::cerr << ""Defining TestVar2 from TestVar1: TLorentzVector -> LorentzVector"";. 	auto df1 = dfIn.Define(""TestVar2"", [](const TClonesArray &tcaTest, const size_t n) {. 		const size_t nGot = tcaTest.GetSize();. 		std::cerr << ""TestVar1.GetSize(): "" << nGot << ""\tn: "" << n << std::endl;. 		ROOT::RVec<ROOT::Math::PtEtaPhiMVector> vTest(n, ROOT::Math::PtEtaPhiMVector());. 		for (size_t i = 0; i < n; ++i) {. 			const auto &tlv = *static_cast<TLorentzVector *>(tcaTest[i]);. 			vTest[i].SetPxPyPzE(tlv.Px(), tlv.Py(), tlv.Pz(), tlv.E());. 		}. 		return vTest;. 	}, { ""TestVar1"", ""nTestVar1"" });. 	std::cerr << ""Redefining TestVar1: TLorentzVector -> LorentzVector"" << std::endl;. 	auto df2 = df1.Redefine(""TestVar1"", [](const TClonesArray &tcaTest, const size_t n) {. 		const size_t nGot = tcaTest.GetSize();. 		std::cerr << ""TestVar1.GetSize(): "" << nGot << ""\tn: "" << n << std::endl;. 		ROOT::RVec<ROOT::Math::PtEtaPhiMVector> vTest(n, ROOT::Math::PtEtaPhiMV",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10073,integrability,event,event,10073,"stVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10240,integrability,version,version,10240," file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10352,integrability,Version,Version,10352,"Size(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""gi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10625,integrability,version,version,10625,"GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11102,integrability,version,version,11102,"nate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUIL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11777,integrability,version,version,11777,"ld with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:14672,integrability,version,version,14672,"root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": ""root"",. ""rev"": ""24ea49d4702ba0aa9b1ea5521950520154ee151c"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""root-project"",. ""ref"": ""master"",. ""repo"": ""root"",. ""type"": ""github"". }. }. },. ""root"": ""root"",. ""version"": 7. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6340,interoperability,share,shared,6340,"< ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) . jEntry: 2	nVar: 5	size: 5. (0.703626, 0.856803, 0.459377, -1.173015) (0.139822, 0.454264, 0.202821, 0.301843) (0.179893, 0.588359, 0.249993, -0.615069) (0.447791, 0.098274, 0.098500, 0.540937) (0.816794, 0.558164, 0.023732, -0.985904) . jEntry: 3	nVar: 3	size: 3. (0.3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6391,interoperability,share,shared,6391,"ose();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) . jEntry: 2	nVar: 5	size: 5. (0.703626, 0.856803, 0.459377, -1.173015) (0.139822, 0.454264, 0.202821, 0.301843) (0.179893, 0.588359, 0.249993, -0.615069) (0.447791, 0.098274, 0.098500, 0.540937) (0.816794, 0.558164, 0.023732, -0.985904) . jEntry: 3	nVar: 3	size: 3. (0.325884, 0.328280, 0.233360, -0.045052) (0.356636, 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:8366,interoperability,share,shared,8366," -0.045052) (0.356636, 0.573315, 0.428329, -0.760415) (0.921959, 0.660601, 0.950840, -1.258582) . jEntry: 4	nVar: 0	size: 0. jEntry: 5	nVar: 1	size: 1. (0.918584, 0.574242, 0.407165, -1.035375) . jEntry: 6	nVar: 7	size: 7. (0.995525, 0.767034, 0.004563, -1.175969) (0.865308, 0.103064, 0.159200, -0.565209) (0.661228, 0.182932, 0.767290, -0.920826) (0.508816, 0.095570, 0.693251, -0.864872) (0.452207, 0.266567, 0.453281, 0.090425) (0.188525, 0.113883, 0.650261, 0.681392) (0.233861, 0.854605, 0.885871, -0.957485) . jEntry: 7	nVar: 5	size: 5. (0.402912, 0.562238, 0.257295, -0.718170) (0.566801, 0.700610, 0.035254, -0.603856) (0.859810, 0.717357, 0.331093, -1.166906) (0.484647, 0.790985, 0.551558, -0.910002) (0.484236, 0.576510, 0.032424, -0.064769) . jEntry: 8	nVar: 0	size: 0. jEntry: 9	nVar: 2	size: 2. (0.939328, 0.143674, 0.382106, -0.476480) (0.377535, 0.236711, 0.792486, -0.890021) . $ root -l -q 'reproduce.C++()'. Processing reproduce.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./reproduce_C.so. Defining TestVar2 from TestVar1: TLorentzVector -> LorentzVectorRedefining TestVar1: TLorentzVector -> LorentzVector. Creating a custom column TestVar2. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:8417,interoperability,share,shared,8417,"5) (0.921959, 0.660601, 0.950840, -1.258582) . jEntry: 4	nVar: 0	size: 0. jEntry: 5	nVar: 1	size: 1. (0.918584, 0.574242, 0.407165, -1.035375) . jEntry: 6	nVar: 7	size: 7. (0.995525, 0.767034, 0.004563, -1.175969) (0.865308, 0.103064, 0.159200, -0.565209) (0.661228, 0.182932, 0.767290, -0.920826) (0.508816, 0.095570, 0.693251, -0.864872) (0.452207, 0.266567, 0.453281, 0.090425) (0.188525, 0.113883, 0.650261, 0.681392) (0.233861, 0.854605, 0.885871, -0.957485) . jEntry: 7	nVar: 5	size: 5. (0.402912, 0.562238, 0.257295, -0.718170) (0.566801, 0.700610, 0.035254, -0.603856) (0.859810, 0.717357, 0.331093, -1.166906) (0.484647, 0.790985, 0.551558, -0.910002) (0.484236, 0.576510, 0.032424, -0.064769) . jEntry: 8	nVar: 0	size: 0. jEntry: 9	nVar: 2	size: 2. (0.939328, 0.143674, 0.382106, -0.476480) (0.377535, 0.236711, 0.792486, -0.890021) . $ root -l -q 'reproduce.C++()'. Processing reproduce.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./reproduce_C.so. Defining TestVar2 from TestVar1: TLorentzVector -> LorentzVectorRedefining TestVar1: TLorentzVector -> LorentzVector. Creating a custom column TestVar2. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:574,modifiability,variab,variable,574,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10240,modifiability,version,version,10240," file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10352,modifiability,Version,Version,10352,"Size(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""gi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10625,modifiability,version,version,10625,"GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10793,modifiability,pac,package,10793,"estVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11102,modifiability,version,version,11102,"nate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUIL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11684,modifiability,inherit,inherit,11684,"ix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11777,modifiability,version,version,11777,"ld with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12465,modifiability,pac,packagesSub,12465," false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12482,modifiability,inherit,inherit,12482,"s = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12527,modifiability,inherit,inherit,12527,"e-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12549,modifiability,inherit,inherit,12549,"...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12656,modifiability,pac,packagesSub,12656,"mport nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12864,modifiability,inherit,inherit,12864,"imt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12873,modifiability,pac,packagesSub,12873,"en ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12959,modifiability,inherit,inherit,12959,"""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13001,modifiability,pac,packages,13001,"ldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13012,modifiability,pac,packagesSub,13012,"xrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13046,modifiability,inherit,inherit,13046,"else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:14672,modifiability,version,version,14672,"root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": ""root"",. ""rev"": ""24ea49d4702ba0aa9b1ea5521950520154ee151c"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""root-project"",. ""ref"": ""master"",. ""repo"": ""root"",. ""type"": ""github"". }. }. },. ""root"": ""root"",. ""version"": 7. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:766,performance,error,errors,766,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:5679,performance,error,errors,5679,"::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6070,performance,error,error,6070,"ing df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6143,performance,error,error,6143,"pshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) . jEntry: 2	nVar: 5	size: 5. (0.703626, 0.856803, 0.459377, -1.173015) (0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:9651,performance,Error,Error,9651," a custom column TestVar2. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10699,performance,profil,profiles,10699,":VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. ov",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13088,performance,lock,lock,13088,"[. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13138,performance,lock,locked,13138,"puts = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13465,performance,lock,locked,13465,"kagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13808,performance,lock,locked,13808,"root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": ""root"",. ""rev"": ""24ea49d4702ba0aa9b1ea5521950520154ee151c"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""root-project"",. ""ref"": ""master"",. ""repo"": ""root"",. ""type"": ""github"". }. }. },. ""root"": ""root"",. ""version"": 7. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:14325,performance,lock,locked,14325,"root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": ""root"",. ""rev"": ""24ea49d4702ba0aa9b1ea5521950520154ee151c"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""root-project"",. ""ref"": ""master"",. ""repo"": ""root"",. ""type"": ""github"". }. }. },. ""root"": ""root"",. ""version"": 7. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:9846,reliability,doe,does,9846," in df3. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12,safety,manag,managing,12,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:766,safety,error,errors,766,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:829,safety,input,input,829,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:5358,safety,input,input,5358,"ROOT::Math::PtEtaPhiMVector lv){return lv.Pt();});. 	}, {""TestVar2""});. 	std::cerr << ""Columns: {"" << std::flush;. 	for (const auto nameCol: df3.GetColumnNames()) {. 		std::cerr << nameCol << "", "" << std::flush;. 	}. 	std::cerr << ""}"" << std::endl;. 	std::cerr << ""Generating histogram hTest3 with TestVar3 in df3"" << std::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:5417,safety,Compl,Complete,5417,"stVar2""});. 	std::cerr << ""Columns: {"" << std::flush;. 	for (const auto nameCol: df3.GetColumnNames()) {. 		std::cerr << nameCol << "", "" << std::flush;. 	}. 	std::cerr << ""}"" << std::endl;. 	std::cerr << ""Generating histogram hTest3 with TestVar3 in df3"" << std::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/cta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:5679,safety,error,errors,5679,"::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6070,safety,error,error,6070,"ing df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6143,safety,error,error,6143,"pshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) . jEntry: 2	nVar: 5	size: 5. (0.703626, 0.856803, 0.459377, -1.173015) (0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:9651,safety,Error,Error,9651," a custom column TestVar2. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10025,safety,avoid,avoid,10025,"(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10801,safety,manag,manager,10801," is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11203,safety,input,inputs,11203," address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for impl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11261,safety,input,inputs,11261,"against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11328,safety,input,inputs,11328,"er branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11384,safety,input,inputs,11384,"664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11445,safety,input,inputs,11445,"stem: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11490,safety,input,inputs,11490,"tem: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pk",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12742,safety,test,test,12742,"root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:14153,safety,input,inputs,14153,"root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": ""root"",. ""rev"": ""24ea49d4702ba0aa9b1ea5521950520154ee151c"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""root-project"",. ""ref"": ""master"",. ""repo"": ""root"",. ""type"": ""github"". }. }. },. ""root"": ""root"",. ""version"": 7. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:5417,security,Compl,Complete,5417,"stVar2""});. 	std::cerr << ""Columns: {"" << std::flush;. 	for (const auto nameCol: df3.GetColumnNames()) {. 		std::cerr << nameCol << "", "" << std::flush;. 	}. 	std::cerr << ""}"" << std::endl;. 	std::cerr << ""Generating histogram hTest3 with TestVar3 in df3"" << std::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/cta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10607,security,sandbox,sandbox,10607,"ut file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12241,security,ssl,ssl,12241,"gs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s=""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13088,security,lock,lock,13088,"[. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13138,security,lock,locked,13138,"puts = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13465,security,lock,locked,13465,"kagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:13808,security,lock,locked,13808,"root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": ""root"",. ""rev"": ""24ea49d4702ba0aa9b1ea5521950520154ee151c"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""root-project"",. ""ref"": ""master"",. ""repo"": ""root"",. ""type"": ""github"". }. }. },. ""root"": ""root"",. ""version"": 7. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:14325,security,lock,locked,14325,"root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": ""root"",. ""rev"": ""24ea49d4702ba0aa9b1ea5521950520154ee151c"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""root-project"",. ""ref"": ""master"",. ""repo"": ""root"",. ""type"": ""github"". }. }. },. ""root"": ""root"",. ""version"": 7. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11138,testability,context,context,11138,"ce of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12742,testability,test,test,12742,"root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. """,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:766,usability,error,errors,766,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:787,usability,behavi,behavior,787,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:829,usability,input,input,829,"[DF] Issues managing `TClonesArray` branches; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. * The `GetSize()` result of the `TClonesArray` fed to the (re)defining function are always 1000, not reflecting the correct value. * Redefining a variable that was the type `TClonesArray` causes `GetColumnNames()` method to return a column name vector with repeated column names, and trying to snapshot against related names causes fatal errors. ### Expected behavior. * The `GetSize()` method of the input `TClonesArray` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:1840,usability,Clear,Clear,1840,"Array` returns the correct size. * `GetColumnNames()` produces unique column names. * The redefined `TClonesArray` can be snapshot correctly. ### To Reproduce. 1. Place two ROOT macros in the same directory:. `gen_tree.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TClonesArray.h>. #include <TLorentzVector.h>. #include <string>. #include <cstdio>. #include <cstdlib>. #include <iostream>. Float_t gen_rand() {. 	return rand() / static_cast<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::endl;. 		for (size_t iVar = 0; iVar < nVar; ++iVar) {. 			const auto &pVar = new((*tcaTest)[iVar]) TLorentzVector(gen_rand(), gen_rand(), gen_rand(), gen_rand());. 			std::fprintf(stderr, ""(%F, %F, %F, %F) "", pVar->Px(), pVar->Py(), pVar->Pz(), pVar->M());. 		}. 		std::cerr << std::endl;. 		ttOut->Fill();. 	}. 	ttOut->Write();. 	tfOut->Close();. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		gen_tree(argv[1]);. 	} else {. 		gen_tree();. 	}. 	return 0;. }. ```. `reproduce.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TH1.h>. #include <TLorentzVector.h>. #include <ROOT/RDataFrame.hxx>. #include <Math/Vector4D.h>. #include <vector>. #include <string>. void reproduce(const std::string pathFileIn = ""file_tcatlv.root"", const std::string pathFileOut = ""file_out.root"") ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:2338,usability,Close,Close,2338,"t<Double_t>(RAND_MAX);. }. void gen_tree(const std::string pathFile = ""file_tcatlv.root"") {. 	TFile *tfOut = TFile::Open(pathFile.c_str(), ""RECREATE"");. 	tfOut->cd();. 	TTree *ttOut = new TTree(""Events"", ""Tree of TClonesArrays of TLorentzVectors"");. 	auto *tcaTest = new TClonesArray(""TLorentzVector"", 8);. 	size_t nVar;. 	ttOut->Branch(""TestVar1"", tcaTest);. 	ttOut->Branch(""nTestVar1"", &nVar);. 	constexpr size_t nEntries = 10;. 	for (size_t jEntry = 0; jEntry < nEntries; ++jEntry) {. 		tcaTest->Clear();. 		nVar = rand() % 8;. 		tcaTest->Expand(nVar);. 		std::cerr << ""jEntry: "" << jEntry << ""\tnVar: "" << nVar << ""\tsize: "" << tcaTest->GetSize() << std::endl;. 		for (size_t iVar = 0; iVar < nVar; ++iVar) {. 			const auto &pVar = new((*tcaTest)[iVar]) TLorentzVector(gen_rand(), gen_rand(), gen_rand(), gen_rand());. 			std::fprintf(stderr, ""(%F, %F, %F, %F) "", pVar->Px(), pVar->Py(), pVar->Pz(), pVar->M());. 		}. 		std::cerr << std::endl;. 		ttOut->Fill();. 	}. 	ttOut->Write();. 	tfOut->Close();. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		gen_tree(argv[1]);. 	} else {. 		gen_tree();. 	}. 	return 0;. }. ```. `reproduce.C`. ```C++. #include <Rtypes.h>. #include <TFile.h>. #include <TTree.h>. #include <TBranch.h>. #include <TH1.h>. #include <TLorentzVector.h>. #include <ROOT/RDataFrame.hxx>. #include <Math/Vector4D.h>. #include <vector>. #include <string>. void reproduce(const std::string pathFileIn = ""file_tcatlv.root"", const std::string pathFileOut = ""file_out.root"") {. 	TFile *tfIn = TFile::Open(pathFileIn.c_str());. 	TTree *ttIn = tfIn->Get<TTree>(""Events"");. 	ROOT::RDataFrame dfIn(*ttIn);. 	std::cerr << ""Defining TestVar2 from TestVar1: TLorentzVector -> LorentzVector"";. 	auto df1 = dfIn.Define(""TestVar2"", [](const TClonesArray &tcaTest, const size_t n) {. 		const size_t nGot = tcaTest.GetSize();. 		std::cerr << ""TestVar1.GetSize(): "" << nGot << ""\tn: "" << n << std::endl;. 		ROOT::RVec<ROOT::Math::PtEtaPhiMVector> vTest(n, ROOT::Math::PtEtaPhiMVector())",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:4191,usability,custom,custom,4191," << ""TestVar1.GetSize(): "" << nGot << ""\tn: "" << n << std::endl;. 		ROOT::RVec<ROOT::Math::PtEtaPhiMVector> vTest(n, ROOT::Math::PtEtaPhiMVector());. 		for (size_t i = 0; i < n; ++i) {. 			const auto &tlv = *static_cast<TLorentzVector *>(tcaTest[i]);. 			vTest[i].SetPxPyPzE(tlv.Px(), tlv.Py(), tlv.Pz(), tlv.E());. 		}. 		return vTest;. 	}, { ""TestVar1"", ""nTestVar1"" });. 	std::cerr << ""Redefining TestVar1: TLorentzVector -> LorentzVector"" << std::endl;. 	auto df2 = df1.Redefine(""TestVar1"", [](const TClonesArray &tcaTest, const size_t n) {. 		const size_t nGot = tcaTest.GetSize();. 		std::cerr << ""TestVar1.GetSize(): "" << nGot << ""\tn: "" << n << std::endl;. 		ROOT::RVec<ROOT::Math::PtEtaPhiMVector> vTest(n, ROOT::Math::PtEtaPhiMVector());. 		for (size_t i = 0; i < n; ++i) {. 			const auto &tlv = *static_cast<TLorentzVector *>(tcaTest[i]);. 			vTest[i].SetPxPyPzE(tlv.Px(), tlv.Py(), tlv.Pz(), tlv.E());. 		}. 		return vTest;. 	}, { ""TestVar1"", ""nTestVar1"" });. 	std::cerr << ""Creating a custom column TestVar2"" << std::endl;. 	auto df3 = df2.Define(""TestVar3"", [](ROOT::RVec<ROOT::Math::PtEtaPhiMVector> TestVar2) {. 		return ROOT::VecOps::Map(TestVar2, [](ROOT::Math::PtEtaPhiMVector lv){return lv.Pt();});. 	}, {""TestVar2""});. 	std::cerr << ""Columns: {"" << std::flush;. 	for (const auto nameCol: df3.GetColumnNames()) {. 		std::cerr << nameCol << "", "" << std::flush;. 	}. 	std::cerr << ""}"" << std::endl;. 	std::cerr << ""Generating histogram hTest3 with TestVar3 in df3"" << std::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:4898,usability,Close,Close,4898,"Test(n, ROOT::Math::PtEtaPhiMVector());. 		for (size_t i = 0; i < n; ++i) {. 			const auto &tlv = *static_cast<TLorentzVector *>(tcaTest[i]);. 			vTest[i].SetPxPyPzE(tlv.Px(), tlv.Py(), tlv.Pz(), tlv.E());. 		}. 		return vTest;. 	}, { ""TestVar1"", ""nTestVar1"" });. 	std::cerr << ""Creating a custom column TestVar2"" << std::endl;. 	auto df3 = df2.Define(""TestVar3"", [](ROOT::RVec<ROOT::Math::PtEtaPhiMVector> TestVar2) {. 		return ROOT::VecOps::Map(TestVar2, [](ROOT::Math::PtEtaPhiMVector lv){return lv.Pt();});. 	}, {""TestVar2""});. 	std::cerr << ""Columns: {"" << std::flush;. 	for (const auto nameCol: df3.GetColumnNames()) {. 		std::cerr << nameCol << "", "" << std::flush;. 	}. 	std::cerr << ""}"" << std::endl;. 	std::cerr << ""Generating histogram hTest3 with TestVar3 in df3"" << std::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:5358,usability,input,input,5358,"ROOT::Math::PtEtaPhiMVector lv){return lv.Pt();});. 	}, {""TestVar2""});. 	std::cerr << ""Columns: {"" << std::flush;. 	for (const auto nameCol: df3.GetColumnNames()) {. 		std::cerr << nameCol << "", "" << std::flush;. 	}. 	std::cerr << ""}"" << std::endl;. 	std::cerr << ""Generating histogram hTest3 with TestVar3 in df3"" << std::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:5392,usability,Close,Close,5392,"turn lv.Pt();});. 	}, {""TestVar2""});. 	std::cerr << ""Columns: {"" << std::flush;. 	for (const auto nameCol: df3.GetColumnNames()) {. 		std::cerr << nameCol << "", "" << std::flush;. 	}. 	std::cerr << ""}"" << std::endl;. 	std::cerr << ""Generating histogram hTest3 with TestVar3 in df3"" << std::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:5679,usability,error,errors,5679,"::endl;. 	TFile *tfOut = TFile::Open(pathFileOut.c_str(), ""RECREATE"");. 	tfOut->cd();. 	df3.Histo1D({ ""hTest3"", """", 30, 0., 3. }, ""TestVar3"")->Write();. 	std::cerr << ""Closing the output file"" << std::endl;. 	tfOut->Close();. 	std::cerr << ""Snapshotting df3 {TestVar3} as tree3 into the output file"" << std::endl;. 	df3.Snapshot(""tree3"", pathFileOut, {""TestVar3""});. 	std::cerr << ""Snapshotting df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6070,usability,error,error,6070,"ing df3 {TestVar2} as tree2 into the output file"" << std::endl;. 	df3.Snapshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6143,usability,error,error,6143,"pshot(""tree2"", pathFileOut, {""TestVar2""});. 	std::cerr << ""Snapshotting df3 {TestVar1} as tree1 into the output file"" << std::endl;. 	df3.Snapshot(""tree1"", pathFileOut, {""TestVar1""});. 	std::cerr << ""Closing the input file"" << std::endl;. 	tfIn->Close();. 	std::cerr << ""Complete!"" << std::endl;. }. int main(int argc, char* argv[]) {. 	if (argc > 1) {. 		reproduce(argv[1], argv[2]);. 	} else {. 		reproduce();. 	}. }. ```. 2. Run:. ```console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) . jEntry: 2	nVar: 5	size: 5. (0.703626, 0.856803, 0.459377, -1.173015) (0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:6580,usability,custom,custom,6580,"console. $ root -l -q 'gen_tree.C++()'. $ root -l -q 'reproduce.C++()'. ```. 3. See outputs and errors. * Duplicated column names. ```. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. ```. * Incorrect `GetSize()`. ```. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000 n: 5. TestVar1.GetSize(): 1000 n: 1. TestVar1.GetSize(): 1000 n: 7. TestVar1.GetSize(): 1000 n: 0. ```. * ~Snapsht error happens to `TestVar1`, but not `TestVar2` or `TestVar3`~. Snapshot error happens to both `TestVar1` and `TestVar2`, but not `TestVar3`. * Full outputs:. ```console. $ root -l -q 'gen_tree.C++()'. Processing gen_tree.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./gen_tree_C.so. Warning in <TTree::Bronch>: Using split mode on a class: TLorentzVector with a custom Streamer. jEntry: 0	nVar: 5	size: 5. (0.780836, 0.994304, 0.974700, -1.584510) (0.888099, 0.785263, 0.905259, -1.305239) (0.862221, 0.008688, 0.320079, -0.430004) (0.508159, 0.227104, 0.549878, -0.729431) (0.994887, 0.949317, 0.458636, -1.254915) . jEntry: 1	nVar: 5	size: 5. (0.651535, 0.070535, 0.859432, -0.669713) (0.848072, 0.268093, 0.718520, -1.046939) (0.307848, 0.268393, 0.240499, -0.365170) (0.243093, 0.434697, 0.190251, -0.532397) (0.339955, 0.912194, 0.890578, -1.272495) . jEntry: 2	nVar: 5	size: 5. (0.703626, 0.856803, 0.459377, -1.173015) (0.139822, 0.454264, 0.202821, 0.301843) (0.179893, 0.588359, 0.249993, -0.615069) (0.447791, 0.098274, 0.098500, 0.540937) (0.816794, 0.558164, 0.023732, -0.985904) . jEntry: 3	nVar: 3	size: 3. (0.325884, 0.328280, 0.233360, -0.045052) (0.356636, 0.573315, 0.428329, -0.760415) (0.921959, 0.660601, 0.950840, -1.258582) . jEntry: 4	nVar: 0	size: 0. jEntry: 5	nVar: 1	size: 1. (0.918584, 0.574242, 0.407165, -1.035375) . jEntry: 6	nVar: 7	",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:8657,usability,custom,custom,8657,"200, -0.565209) (0.661228, 0.182932, 0.767290, -0.920826) (0.508816, 0.095570, 0.693251, -0.864872) (0.452207, 0.266567, 0.453281, 0.090425) (0.188525, 0.113883, 0.650261, 0.681392) (0.233861, 0.854605, 0.885871, -0.957485) . jEntry: 7	nVar: 5	size: 5. (0.402912, 0.562238, 0.257295, -0.718170) (0.566801, 0.700610, 0.035254, -0.603856) (0.859810, 0.717357, 0.331093, -1.166906) (0.484647, 0.790985, 0.551558, -0.910002) (0.484236, 0.576510, 0.032424, -0.064769) . jEntry: 8	nVar: 0	size: 0. jEntry: 9	nVar: 2	size: 2. (0.939328, 0.143674, 0.382106, -0.476480) (0.377535, 0.236711, 0.792486, -0.890021) . $ root -l -q 'reproduce.C++()'. Processing reproduce.C++()... Info in <TUnixSystem::ACLiC>: creating shared library /run/media/root/data-btrfs/shamrock-shared/targets/Research_LL/ctau-proper/lxplus_HTcondor/preselect/redefine_custom_vector.root/./reproduce_C.so. Defining TestVar2 from TestVar1: TLorentzVector -> LorentzVectorRedefining TestVar1: TLorentzVector -> LorentzVector. Creating a custom column TestVar2. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:9651,usability,Error,Error,9651," a custom column TestVar2. Columns: {TestVar2, TestVar1, TestVar3, TestVar1.fUniqueID, TestVar1.fBits, TestVar1.fP, TestVar1.fE, TestVar1, nTestVar1, }. Generating histogram hTest3 with TestVar3 in df3. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Closing the output file. Snapshotting df3 {TestVar3} as tree3 into the output file. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 3. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 1. TestVar1.GetSize(): 1000	n: 7. TestVar1.GetSize(): 1000	n: 5. TestVar1.GetSize(): 1000	n: 0. TestVar1.GetSize(): 1000	n: 2. Snapshotting df3 {TestVar2} as tree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10591,usability,user,user,10591,"ree2 into the output file. TestVar1.GetSize(): 1000	n: 5. Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10712,usability,user,user,10712,"ec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10771,usability,Custom,Custom,10771," > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:10970,usability,custom,custom,10970,"rentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data. RDataFrame::Run: event loop was interrupted. terminate called after throwing an instance of 'std::logic_error'. what(): Trying to insert a null branch address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11203,usability,input,inputs,11203," address. ```. ### Setup. 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for impl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11261,usability,input,inputs,11261,"against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11328,usability,input,inputs,11328,"er branch. ```. ROOT Version: 6.25/01. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11384,usability,input,inputs,11384,"664gcc on Jan 01 1980, 00:00:00. From @. ```. 2. Operating system: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11445,usability,input,inputs,11445,"stem: NixOS. ```console. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:11490,usability,input,inputs,11490,"tem: `""x86_64-linux""`. - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.4pre20211006_53e4794`. - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`. ```. 3. How you obtained ROOT:. Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a custom fork against the master branch of [NixOS/Nixpkgs](https://github.com/NixOS/nixpkgs), with the root source overrided. The gcc version is `10.3.0`. ### Additional context. Nix Flake setup to build ROOT:. `flake.nix`. ```Nix. {. inputs.nixpkgs.url = ""github:NixOS/nixpkgs/nixos-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pk",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:12245,usability,support,support,12245,"os-21.05"";. inputs.nixpkgs-root.url = ""github:ShamrockLee/nixpkgs/root-6-25"";. inputs.flake-utils.url = ""github:numtide/flake-utils"";. inputs.root-source.url = ""github:root-project/root/master"";. inputs.root-source.flake = false;. outputs = inputs@{self, nixpkgs, nixpkgs-root, flake-utils, root-source, ...}: flake-utils.lib.eachDefaultSystem (system: let. pkgs = nixpkgs.legacyPackages.${system};. pkgs-root = import nixpkgs-root {. inherit system;. overlays = [. (final: prev: {. root = prev.root.overrideAttrs (oldAttrs: {. version = ""2021-09-01"";. src = root-source;. cmakeFlags = (map (oldFlag:. if oldFlag == ""-Dimt=OFF"" then ""-Dimt=ON"". else if oldFlag == ""-Dssl=OFF"" then ""-Dssl=ON"". # else if oldFlag == ""-Dgfal=OFF"" then ""-Dgfal=ON"". # else if oldFlag == ""-Dxrootd=OFF"" then ""-Dxrootd=ON"". else oldFlag. ) oldAttrs.cmakeFlags) ++ [. ""-DCMAKE_BUILD_TYPE=RelWithDebInfo"". ];. buildInputs = oldAttrs.buildInputs ++ (with pkgs-root; [. tbb # for implicit multithreading. openssl # for ssl support. ]);. });. }). ];. };. devShell = pkgs.mkShell {. buildInputs = (with pkgs-root; [. root. ]);. nativeBuildInputs = (with pkgs-root; [. gcc. gnumake. cmake. ]) ++ (with pkgs;[. gawk. gitAndTools.gitFull. ]);. };. packagesSub = {. inherit (pkgs-root) root gcc gnumake cmake;. inherit (pkgs) gawk;. inherit (pkgs.gitAndTools) git gitFull;. };. run = pkgs.writeShellScriptBin ""run"" ''. export PATH=""${ with packagesSub; pkgs.lib.makeBinPath [ root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""ow",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9240:14153,usability,input,inputs,14153,"root gcc gnumake cmake gawk gitFull ]}:$PATH"". if test -n ""${devShell.shellHook}""; then. . ""${devShell.shellHook}"";. fi. exec ""$@"". '';. ana = pkgs.callPackage ./ana.nix { inherit (packagesSub) root; };. in{. legacyPackages = pkgs;. legacyPackages-root = pkgs-root;. inherit devShell;. defaultPackage = run;. packages = packagesSub // {. srcRaw = self;. inherit run ana;. };. });. }. ```. `flake.lock`. ```json. {. ""nodes"": {. ""flake-utils"": {. ""locked"": {. ""lastModified"": 1623875721,. ""narHash"": ""sha256-A8BU7bjS5GirpAUv4QA+QnJ4CceLHkcXdRp4xITDB0s="",. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""rev"": ""f7e004a55b120c02ecb6219596820fcd32ca8772"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""numtide"",. ""repo"": ""flake-utils"",. ""type"": ""github"". }. },. ""nixpkgs"": {. ""locked"": {. ""lastModified"": 1628696776,. ""narHash"": ""sha256-K8+/IQNZDZltIu/KSf+Tz01OwNzTGgTch0ktMOWcxLg="",. ""owner"": ""NixOS"",. ""repo"": ""nixpkgs"",. ""rev"": ""927ce1afc1db40869a463a37ea2738c27d425f80"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""NixOS"",. ""ref"": ""nixos-21.05"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""nixpkgs-root"": {. ""locked"": {. ""lastModified"": 1628672385,. ""narHash"": ""sha256-Xb/yIAo1OK8OEwrtd5SP3bjAD06PLXsrWG3WTLKqme0="",. ""owner"": ""ShamrockLee"",. ""repo"": ""nixpkgs"",. ""rev"": ""60e709069fa2fbcfca943d8f6df8dc6d33c67025"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""ShamrockLee"",. ""ref"": ""root-6-25"",. ""repo"": ""nixpkgs"",. ""type"": ""github"". }. },. ""root"": {. ""inputs"": {. ""flake-utils"": ""flake-utils"",. ""nixpkgs"": ""nixpkgs"",. ""nixpkgs-root"": ""nixpkgs-root"",. ""root-source"": ""root-source"". }. },. ""root-source"": {. ""flake"": false,. ""locked"": {. ""lastModified"": 1630489941,. ""narHash"": ""sha256-HCUYlIz479asnYAD9wwKtFXJILKn/PrbT4mro6DoRMo="",. ""owner"": ""root-project"",. ""repo"": ""root"",. ""rev"": ""24ea49d4702ba0aa9b1ea5521950520154ee151c"",. ""type"": ""github"". },. ""original"": {. ""owner"": ""root-project"",. ""ref"": ""master"",. ""repo"": ""root"",. ""type"": ""github"". }. }. },. ""root"": ""root"",. ""version"": 7. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9240
https://github.com/root-project/root/issues/9241:83,integrability,inject,inject,83,[SOFIE] Provide signature with one input variable per feature; This is required to inject SOFIE's inference functions into RDataFrame's event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9241
https://github.com/root-project/root/issues/9241:136,integrability,event,event,136,[SOFIE] Provide signature with one input variable per feature; This is required to inject SOFIE's inference functions into RDataFrame's event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9241
https://github.com/root-project/root/issues/9241:41,modifiability,variab,variable,41,[SOFIE] Provide signature with one input variable per feature; This is required to inject SOFIE's inference functions into RDataFrame's event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9241
https://github.com/root-project/root/issues/9241:35,safety,input,input,35,[SOFIE] Provide signature with one input variable per feature; This is required to inject SOFIE's inference functions into RDataFrame's event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9241
https://github.com/root-project/root/issues/9241:16,security,sign,signature,16,[SOFIE] Provide signature with one input variable per feature; This is required to inject SOFIE's inference functions into RDataFrame's event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9241
https://github.com/root-project/root/issues/9241:83,security,inject,inject,83,[SOFIE] Provide signature with one input variable per feature; This is required to inject SOFIE's inference functions into RDataFrame's event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9241
https://github.com/root-project/root/issues/9241:35,usability,input,input,35,[SOFIE] Provide signature with one input variable per feature; This is required to inject SOFIE's inference functions into RDataFrame's event loops.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9241
https://github.com/root-project/root/issues/9242:146,integrability,interfac,interfaces,146,[TMVA][RDF] Tutorials for ML inference in RDF; We should provide tutorials that show how to perform NN and BDT inference with TMVA's experimental interfaces (SOFIE and the fast BDT inference engine).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9242
https://github.com/root-project/root/issues/9242:146,interoperability,interfac,interfaces,146,[TMVA][RDF] Tutorials for ML inference in RDF; We should provide tutorials that show how to perform NN and BDT inference with TMVA's experimental interfaces (SOFIE and the fast BDT inference engine).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9242
https://github.com/root-project/root/issues/9242:146,modifiability,interfac,interfaces,146,[TMVA][RDF] Tutorials for ML inference in RDF; We should provide tutorials that show how to perform NN and BDT inference with TMVA's experimental interfaces (SOFIE and the fast BDT inference engine).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9242
https://github.com/root-project/root/issues/9242:92,performance,perform,perform,92,[TMVA][RDF] Tutorials for ML inference in RDF; We should provide tutorials that show how to perform NN and BDT inference with TMVA's experimental interfaces (SOFIE and the fast BDT inference engine).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9242
https://github.com/root-project/root/issues/9242:92,usability,perform,perform,92,[TMVA][RDF] Tutorials for ML inference in RDF; We should provide tutorials that show how to perform NN and BDT inference with TMVA's experimental interfaces (SOFIE and the fast BDT inference engine).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9242
https://github.com/root-project/root/issues/9243:1862,availability,echo,echo,1862,"gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/inc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:250,deployability,build,build,250,"ROOT.gSystem.GetIncludePath() adds extra locations on ARM64; ### Describe the bug. With ROOT 6.24/06 on aarch64 we get additional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:351,deployability,fail,fails,351,"ROOT.gSystem.GetIncludePath() adds extra locations on ARM64; ### Describe the bug. With ROOT 6.24/06 on aarch64 we get additional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:635,deployability,releas,releases,635,"ROOT.gSystem.GetIncludePath() adds extra locations on ARM64; ### Describe the bug. With ROOT 6.24/06 on aarch64 we get additional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:734,deployability,releas,releases,734,"ROOT.gSystem.GetIncludePath() adds extra locations on ARM64; ### Describe the bug. With ROOT 6.24/06 on aarch64 we get additional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:820,deployability,releas,releases,820,"ROOT.gSystem.GetIncludePath() adds extra locations on ARM64; ### Describe the bug. With ROOT 6.24/06 on aarch64 we get additional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:912,deployability,releas,releases,912,"ROOT.gSystem.GetIncludePath() adds extra locations on ARM64; ### Describe the bug. With ROOT 6.24/06 on aarch64 we get additional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1002,deployability,releas,releases,1002,"System.GetIncludePath() adds extra locations on ARM64; ### Describe the bug. With ROOT 6.24/06 on aarch64 we get additional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1083,deployability,build,build,1083,"h ROOT 6.24/06 on aarch64 we get additional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1120,deployability,build,build,1120,"tional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1165,deployability,build,build,1165,"tem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1199,deployability,build,build,1199," directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ sourc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1236,deployability,instal,install,1236,"where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1306,deployability,build,build,1306,"ons in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1343,deployability,instal,install,1343,"and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1416,deployability,build,build,1416,". ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1453,deployability,instal,install,1453,"ft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1529,deployability,build,build,1529,"I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/incl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1566,deployability,build,build,1566,"1arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1611,deployability,build,build,1611,"vmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1646,deployability,build,build,1646,"n/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1683,deployability,instal,install,1683,"/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-cento",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:2063,deployability,releas,releases,2063,"""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInsid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:2571,deployability,releas,releases,2571,"jects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include"". ```. Again the first 8 elements are dir",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:2809,deployability,releas,releases,2809,"ild/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include"". ```. Again the first 8 elements are directly related to `$ROOT_INCLUDE_PATH`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:2907,deployability,releas,releases,2907,"ild/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include"". ```. Again the first 8 elements are directly related to `$ROOT_INCLUDE_PATH`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:2998,deployability,releas,releases,2998,"ild/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include"". ```. Again the first 8 elements are directly related to `$ROOT_INCLUDE_PATH`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:3105,deployability,releas,releases,3105,"ild/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include"". ```. Again the first 8 elements are directly related to `$ROOT_INCLUDE_PATH`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:3209,deployability,releas,releases,3209,"ild/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include"". ```. Again the first 8 elements are directly related to `$ROOT_INCLUDE_PATH`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:3294,deployability,releas,releases,3294,"ild/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include"". ```. Again the first 8 elements are directly related to `$ROOT_INCLUDE_PATH`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:3385,deployability,releas,releases,3385,"ild/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include"". ```. Again the first 8 elements are directly related to `$ROOT_INCLUDE_PATH`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:3474,deployability,releas,releases,3474,"ild/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include"". ```. Again the first 8 elements are directly related to `$ROOT_INCLUDE_PATH`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:1786,performance,content,contents,1786,"/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:351,reliability,fail,fails,351,"ROOT.gSystem.GetIncludePath() adds extra locations on ARM64; ### Describe the bug. With ROOT 6.24/06 on aarch64 we get additional locations for include files with `TSystem::GetIncludePath()` pointing to directories exiting only in the node where the build was done. The problem is that ACliC uses these locations in the invocation of the compiler and fails because they do not exists or wrong protections at the runtime. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/etc//cling"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-f0308/aarch64-centos7-gcc8-opt/include/"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/Vc/1.4.2/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/zlib/1.2.11/aarch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/issues/9243:2362,usability,behavi,behavior,2362,"ch64-centos7-gcc8-opt/include"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/jsonmcpp/3.9.1/aarch64-centos7-gcc8-opt/include"". -I""/home/sftnight/build/workspace/lcg_release_pipeline/build/projects/ROOT-6.24.06/src/ROOT-6.24.06-build/include/"". -I""/data/sftnight/build/workspace/lcg_release_pipeline/install/tbb/2020_U2/aarch64-centos7-gcc8-opt/include""'. ```. The first three elements are directly the contents of `$ROOT_INCLUDE_PATH` which in the that setup, which is . ```. $ echo $ROOT_INCLUDE_PATH. /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include/Geant4:/cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/include:/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/aarch64-centos7-gcc8-opt/include/python3.9. ```. ### To Reproduce. On an ARM64 system with CVMFS . ```. $ source /cvmfs/sft.cern.ch/lcg/views/LCG_101arm/aarch64-centos7-gcc8-opt/setup.sh. $ python -c 'import ROOT; print(ROOT.gSystem.GetIncludePath())'. ```. ### Expected behavior. On a Centos7 system (e.g. lxplus.cern.ch), then list is different. ```. -I$ROOTSYS/include. -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include/Geant4"". -I""/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/src/cpp"". -I""/cvmfs/sft.cern.ch/lcg/views/LCG_101/x86_64-centos7-gcc8-opt/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/Python/3.9.6-b0f98/x86_64-centos7-gcc8-opt/include/python3.9"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/RInside/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/R/3.6.3-dfb24/x86_64-centos7-gcc8-opt/lib64/R/library/Rcpp/include"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc/"". -I""/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.24.06-3455f/x86_64-centos7-gcc8-opt/etc//cling"". -I""/cvm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9243
https://github.com/root-project/root/pull/9244:51,integrability,wrap,wrappers,51,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
https://github.com/root-project/root/pull/9244:152,integrability,wrap,wrapper,152,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
https://github.com/root-project/root/pull/9244:228,integrability,wrap,wrapper,228,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
https://github.com/root-project/root/pull/9244:1105,integrability,wrap,wrapper,1105,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
https://github.com/root-project/root/pull/9244:51,interoperability,wrapper,wrappers,51,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
https://github.com/root-project/root/pull/9244:152,interoperability,wrapper,wrapper,152,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
https://github.com/root-project/root/pull/9244:228,interoperability,wrapper,wrapper,228,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
https://github.com/root-project/root/pull/9244:1105,interoperability,wrapper,wrapper,1105,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
https://github.com/root-project/root/pull/9244:36,reliability,diagno,diagnostics,36,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
https://github.com/root-project/root/pull/9244:136,reliability,diagno,diagnostics,136,"[tcling] Suppress `-Wunused-result` diagnostics in wrappers generated by TClingCallFunc; This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused. ```c++. extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {. if (ret) {. new (ret) (return_type) ((class_name*)obj)->func(args...);. }. else {. ((class_name*)obj)->func(args...);. }. }. ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g. ```python. >>> import ROOT. >>> v = ROOT.std.vector(int)(). >>> v.empty(). input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute. [-Wunused-result]. ((const vector<int>*)obj)->empty();. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. True. >>>. ```. ## Changes or fixes:. - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:. - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9244
