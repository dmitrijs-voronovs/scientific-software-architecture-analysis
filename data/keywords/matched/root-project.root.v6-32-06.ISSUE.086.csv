id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/12803:68,testability,test,test,68,"TString: Enable spaceship operator with libc++ [v6.28]; The feature test __cpp_lib_three_way_comparison is for library support of the three-way comparison. libc++ doesn't expose this yet, presumably because the operator has not been added yet for all classes. However, some classes already use it, which requires us to implement the operator as discussed in https://github.com/root-project/root/pull/12525. (cherry picked from commit b85231d2ad62645f0fe7291a64284f61bb8a83c2)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12803
https://github.com/root-project/root/pull/12803:119,usability,support,support,119,"TString: Enable spaceship operator with libc++ [v6.28]; The feature test __cpp_lib_three_way_comparison is for library support of the three-way comparison. libc++ doesn't expose this yet, presumably because the operator has not been added yet for all classes. However, some classes already use it, which requires us to implement the operator as discussed in https://github.com/root-project/root/pull/12525. (cherry picked from commit b85231d2ad62645f0fe7291a64284f61bb8a83c2)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12803
https://github.com/root-project/root/pull/12808:15,energy efficiency,Reduc,Reduce,15,"[RF] RooCurve: Reduce last x by relative value; Subtracting a constant `1e-15` might not result in a representation that is different from the previous value. Instead subtract the relative value `1e-9 * dx`, with `dx` being the equidistant step size between points. This fixes `stressRooFit` on mac13arm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12808
https://github.com/root-project/root/pull/12808:48,integrability,Sub,Subtracting,48,"[RF] RooCurve: Reduce last x by relative value; Subtracting a constant `1e-15` might not result in a representation that is different from the previous value. Instead subtract the relative value `1e-9 * dx`, with `dx` being the equidistant step size between points. This fixes `stressRooFit` on mac13arm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12808
https://github.com/root-project/root/pull/12808:167,integrability,sub,subtract,167,"[RF] RooCurve: Reduce last x by relative value; Subtracting a constant `1e-15` might not result in a representation that is different from the previous value. Instead subtract the relative value `1e-9 * dx`, with `dx` being the equidistant step size between points. This fixes `stressRooFit` on mac13arm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12808
https://github.com/root-project/root/pull/12809:24,deployability,contain,contain,24,"[RF] Make datasets that contain strings cloneable; I discovered that RooDataSets that contain RooStringVar aren't cloneable, because the SetBranchAddress method of TTree expects the address of a string pointer, not the address of the string. I added a test that would crash before I implemented the fix in RooStringVar. Should be backported to 6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12809
https://github.com/root-project/root/pull/12809:86,deployability,contain,contain,86,"[RF] Make datasets that contain strings cloneable; I discovered that RooDataSets that contain RooStringVar aren't cloneable, because the SetBranchAddress method of TTree expects the address of a string pointer, not the address of the string. I added a test that would crash before I implemented the fix in RooStringVar. Should be backported to 6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12809
https://github.com/root-project/root/pull/12809:53,integrability,discover,discovered,53,"[RF] Make datasets that contain strings cloneable; I discovered that RooDataSets that contain RooStringVar aren't cloneable, because the SetBranchAddress method of TTree expects the address of a string pointer, not the address of the string. I added a test that would crash before I implemented the fix in RooStringVar. Should be backported to 6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12809
https://github.com/root-project/root/pull/12809:53,interoperability,discover,discovered,53,"[RF] Make datasets that contain strings cloneable; I discovered that RooDataSets that contain RooStringVar aren't cloneable, because the SetBranchAddress method of TTree expects the address of a string pointer, not the address of the string. I added a test that would crash before I implemented the fix in RooStringVar. Should be backported to 6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12809
https://github.com/root-project/root/pull/12809:252,safety,test,test,252,"[RF] Make datasets that contain strings cloneable; I discovered that RooDataSets that contain RooStringVar aren't cloneable, because the SetBranchAddress method of TTree expects the address of a string pointer, not the address of the string. I added a test that would crash before I implemented the fix in RooStringVar. Should be backported to 6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12809
https://github.com/root-project/root/pull/12809:252,testability,test,test,252,"[RF] Make datasets that contain strings cloneable; I discovered that RooDataSets that contain RooStringVar aren't cloneable, because the SetBranchAddress method of TTree expects the address of a string pointer, not the address of the string. I added a test that would crash before I implemented the fix in RooStringVar. Should be backported to 6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12809
https://github.com/root-project/root/pull/12809:53,usability,discov,discovered,53,"[RF] Make datasets that contain strings cloneable; I discovered that RooDataSets that contain RooStringVar aren't cloneable, because the SetBranchAddress method of TTree expects the address of a string pointer, not the address of the string. I added a test that would crash before I implemented the fix in RooStringVar. Should be backported to 6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12809
https://github.com/root-project/root/pull/12810:8,deployability,build,build,8,Fix the build of TBB in Debug mode on Windows; Only build in Debug mode if we build against the Debug runtime libraries,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12810
https://github.com/root-project/root/pull/12810:52,deployability,build,build,52,Fix the build of TBB in Debug mode on Windows; Only build in Debug mode if we build against the Debug runtime libraries,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12810
https://github.com/root-project/root/pull/12810:78,deployability,build,build,78,Fix the build of TBB in Debug mode on Windows; Only build in Debug mode if we build against the Debug runtime libraries,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12810
https://github.com/root-project/root/pull/12811:629,availability,error,error,629,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:779,availability,error,error,779,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:825,availability,operat,operator,825,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:1035,availability,operat,operator,1035,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:1189,availability,operat,operator,1189,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:521,deployability,modul,module,521,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:842,deployability,modul,module,842,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:966,deployability,modul,module,966,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:521,modifiability,modul,module,521,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:842,modifiability,modul,module,842,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:966,modifiability,modul,module,966,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:629,performance,error,error,629,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:779,performance,error,error,779,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:1201,reliability,doe,does,1201,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:521,safety,modul,module,521,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:629,safety,error,error,629,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:779,safety,error,error,779,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:842,safety,modul,module,842,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:966,safety,modul,module,966,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:629,usability,error,error,629,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:689,usability,Command,CommandLineTools,689,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:779,usability,error,error,779,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12811:1077,usability,Command,CommandLineTools,1077,"Partial backport of D144626 to fix Decl merging with constraints; This is a partial backport of the changes to `isSameEntity` from commit https://github.com/llvm/llvm-project/commit/2408f97652caadf733a879e1d7d9c0702a80d609 (which lives in a different file in LLVM 13 and was moved to `ASTContext` at a later point). The gist of the change is that during template instantiation, the constraint / requires clause also gets instantiated and potentially changed. This means that if a function with constraints is used in one module, but included as-is in another, the two of them could not be merged. This change fixes the following error seen on macOS 13 with C++20:. ```. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: error: 'std::reverse_iterator<std::string *>::operator->' from module 'std.iterator.__iterator.reverse_iterator' is not present in definition of 'std::reverse_iterator<std::string *>' in module 'std.iterator.__iterator.reverse_iterator'. constexpr pointer operator->() const. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:141:23: note: declaration of 'operator->' does not match. ```. Note that this particular code was recently reverted in commit https://github.com/llvm/llvm-project/commit/aeee4ebd689171c963aa5d973e14cb6e731eb147 However, as far as I can tell, this relies on the implementation of deferred concept instantiation which solves the problem from a different angle, but cannot be easily backported to our copy of LLVM: https://github.com/llvm/llvm-project/commit/babdef27c503c0bbbcc017e9f88affddda90ea4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12811
https://github.com/root-project/root/pull/12812:26,availability,error,error,26,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:7,deployability,fail,failing,7,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:136,deployability,fail,fail,136,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:151,deployability,fail,failing,151,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:347,deployability,updat,updated,347,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:126,interoperability,platform,platforms,126,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:26,performance,error,error,26,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:7,reliability,fail,failing,7,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:136,reliability,fail,fail,136,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:151,reliability,fail,failing,151,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:15,safety,test,test,15,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:26,safety,error,error,26,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:56,safety,test,test,56,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:159,safety,test,tests,159,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:317,safety,test,tested,317,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:347,safety,updat,updated,347,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:347,security,updat,updated,347,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:15,testability,test,test,15,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:56,testability,test,test,56,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:159,testability,test,tests,159,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:317,testability,test,tested,317,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12812:26,usability,error,error,26,"[ci] A failing test is an error: [skip-ci]; Even if the test collection comment is conveying it, it's important to make those platforms fail that have failing tests, for visibility reasons. This fixes https://github.com/root-project/root/issues/12307. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12812
https://github.com/root-project/root/pull/12813:185,deployability,modul,modules,185,[http] fix custom JSROOT usage with `THttpServer`; With JSROOT v7 URL links to JSROOT sources are changed for THttpServer. Now syntax is like:. ```. import { redraw } from './jsrootsys/modules/main.mjs';. ```. One need to handle also these links for custom JSROOT locations,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12813
https://github.com/root-project/root/pull/12813:185,modifiability,modul,modules,185,[http] fix custom JSROOT usage with `THttpServer`; With JSROOT v7 URL links to JSROOT sources are changed for THttpServer. Now syntax is like:. ```. import { redraw } from './jsrootsys/modules/main.mjs';. ```. One need to handle also these links for custom JSROOT locations,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12813
https://github.com/root-project/root/pull/12813:185,safety,modul,modules,185,[http] fix custom JSROOT usage with `THttpServer`; With JSROOT v7 URL links to JSROOT sources are changed for THttpServer. Now syntax is like:. ```. import { redraw } from './jsrootsys/modules/main.mjs';. ```. One need to handle also these links for custom JSROOT locations,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12813
https://github.com/root-project/root/pull/12813:11,usability,custom,custom,11,[http] fix custom JSROOT usage with `THttpServer`; With JSROOT v7 URL links to JSROOT sources are changed for THttpServer. Now syntax is like:. ```. import { redraw } from './jsrootsys/modules/main.mjs';. ```. One need to handle also these links for custom JSROOT locations,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12813
https://github.com/root-project/root/pull/12813:250,usability,custom,custom,250,[http] fix custom JSROOT usage with `THttpServer`; With JSROOT v7 URL links to JSROOT sources are changed for THttpServer. Now syntax is like:. ```. import { redraw } from './jsrootsys/modules/main.mjs';. ```. One need to handle also these links for custom JSROOT locations,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12813
https://github.com/root-project/root/pull/12814:4,usability,custom,custom,4,Fix custom JSROOT usage with `THttpServer`; Backport of #12813,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12814
https://github.com/root-project/root/pull/12815:174,performance,disk,disk,174,"[ntuple] Distinguish between 32bit and 64bit cardinality fields; Provides support for both 32bit and 64bit cardinality fields. This has no implication on the width of the on-disk offsets but the cardinality field width (32bit or 64bit) is for the width of the collection sizes that are computed from the offsets. For converted TTree files with leaf count arrays, 32bit widths cardinality fields must be used because the count leaf is 32bit. This makes sure that the (projected) leaf count field in the RNTuple (e.g., `nJets`) can be accessed with the same type than the TTree branch, e.g. in RDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12815
https://github.com/root-project/root/pull/12815:533,security,access,accessed,533,"[ntuple] Distinguish between 32bit and 64bit cardinality fields; Provides support for both 32bit and 64bit cardinality fields. This has no implication on the width of the on-disk offsets but the cardinality field width (32bit or 64bit) is for the width of the collection sizes that are computed from the offsets. For converted TTree files with leaf count arrays, 32bit widths cardinality fields must be used because the count leaf is 32bit. This makes sure that the (projected) leaf count field in the RNTuple (e.g., `nJets`) can be accessed with the same type than the TTree branch, e.g. in RDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12815
https://github.com/root-project/root/pull/12815:74,usability,support,support,74,"[ntuple] Distinguish between 32bit and 64bit cardinality fields; Provides support for both 32bit and 64bit cardinality fields. This has no implication on the width of the on-disk offsets but the cardinality field width (32bit or 64bit) is for the width of the collection sizes that are computed from the offsets. For converted TTree files with leaf count arrays, 32bit widths cardinality fields must be used because the count leaf is 32bit. This makes sure that the (projected) leaf count field in the RNTuple (e.g., `nJets`) can be accessed with the same type than the TTree branch, e.g. in RDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12815
https://github.com/root-project/root/pull/12816:18,reliability,diagno,diagnostics,18,"[DF] Re-introduce diagnostics for Define expr returning void (v6.28); The fallback DefineImpl overload that was supposed to fire an helpful static_assert in this case was out of sync with the main overload, so it could not do its job.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12816
https://github.com/root-project/root/pull/12816:18,testability,diagno,diagnostics,18,"[DF] Re-introduce diagnostics for Define expr returning void (v6.28); The fallback DefineImpl overload that was supposed to fire an helpful static_assert in this case was out of sync with the main overload, so it could not do its job.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12816
https://github.com/root-project/root/pull/12816:132,usability,help,helpful,132,"[DF] Re-introduce diagnostics for Define expr returning void (v6.28); The fallback DefineImpl overload that was supposed to fire an helpful static_assert in this case was out of sync with the main overload, so it could not do its job.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12816
https://github.com/root-project/root/issues/12817:422,availability,error,errors,422,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:461,availability,error,error,461,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:492,availability,Error,Error,492,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:656,availability,error,error,656,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:687,availability,Error,Error,687,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:851,availability,error,error,851,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:332,deployability,patch,patches,332,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:1007,deployability,releas,releases,1007,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:475,energy efficiency,alloc,allocate,475,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:670,energy efficiency,alloc,allocate,670,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:865,energy efficiency,alloc,allocate,865,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:0,performance,Perform,Performance,0,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:422,performance,error,errors,422,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:461,performance,error,error,461,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:484,performance,memor,memory,484,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:492,performance,Error,Error,492,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:656,performance,error,error,656,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:679,performance,memor,memory,679,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:687,performance,Error,Error,687,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:851,performance,error,error,851,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:874,performance,memor,memory,874,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:332,safety,patch,patches,332,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:422,safety,error,errors,422,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:461,safety,error,error,461,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:492,safety,Error,Error,492,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:528,safety,input,input,528,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:656,safety,error,error,656,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:687,safety,Error,Error,687,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:723,safety,input,input,723,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:851,safety,error,error,851,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:1089,safety,compl,completes,1089,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:332,security,patch,patches,332,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:453,security,session,session,453,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:648,security,session,session,648,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:843,security,session,session,843,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:1089,security,compl,completes,1089,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:12,testability,regress,regression,12,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:0,usability,Perform,Performance,0,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:422,usability,error,errors,422,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:461,usability,error,error,461,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:484,usability,memor,memory,484,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:492,usability,Error,Error,492,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:528,usability,input,input,528,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:656,usability,error,error,656,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:679,usability,memor,memory,679,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:687,usability,Error,Error,687,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:723,usability,input,input,723,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:851,usability,error,error,851,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/issues/12817:874,usability,memor,memory,874,"Performance regression with repr for pyroot objects in root 6.28 nightlies.; Consider this python script:. ```. import ROOT. v = ROOT.vector(float)(). for i in range(50000):. s = repr(v). if i%1000 == 0:. print (i, flush=True). ```. Using ROOT from a dev4 nightly:. /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-opt. This runs for about 12 minutes and then starts printing errors:. ```. 21000. cling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. Error in Interpreter::toString: the input *((std::string*)0x7ffed5ef1580) = cling::printValue((std::vector<float>*)0x9c5a040); cannot be evaluatedcling JIT session error: Cannot allocate memory. ... ```. Meanwhile, with root 6.26.08:. /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/sw/lcg/releases/LCG_102b_ATLAS_19/ROOT/6.26.08/x86_64-centos7-gcc11-opt. The same script completes normally in about two seconds. See also ATEAM-885.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12817
https://github.com/root-project/root/pull/12819:172,availability,avail,available,172,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:12,deployability,Updat,Update,12,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:62,deployability,updat,updates,62,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:155,interoperability,plug,plugins,155,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:172,reliability,availab,available,172,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:12,safety,Updat,Update,12,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:62,safety,updat,updates,62,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:172,safety,avail,available,172,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:12,security,Updat,Update,12,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:62,security,updat,updates,62,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:172,security,availab,available,172,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:19,usability,Minim,Minimizer,19,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:29,usability,document,documentation,29,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:86,usability,Minim,Minimizer,86,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:106,usability,document,documentation,106,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/pull/12819:145,usability,Minim,Minimizer,145,[doc][math] Update Minimizer documentation; This Pull request updates the ROOT::Math::Minimizer reference documentation and adds the list of all Minimizer plugins that are available in ROOT. . This PR fixes the JIRA issue [3452](https://sft.its.cern.ch/jira/browse/ROOT-3452).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12819
https://github.com/root-project/root/issues/12820:216,availability,error,error,216,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:330,availability,Error,Error,330,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:390,availability,Error,Error,390,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:415,availability,Error,Error,415,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1888,availability,Operat,Operating,1888,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1963,availability,down,download,1963,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:0,deployability,build,build,0,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:66,deployability,build,build,66,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:238,deployability,fail,failed,238,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:673,deployability,version,version,673,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:785,deployability,build,build,785,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:983,deployability,build,build,983,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1809,deployability,build,build,1809,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1876,deployability,version,version,1876,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1945,deployability,instal,install,1945,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:673,integrability,version,version,673,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1876,integrability,version,version,1876,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:136,interoperability,share,shared,136,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:593,interoperability,Platform,Platforms,593,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:610,interoperability,platform,platform,610,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:673,modifiability,version,version,673,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1876,modifiability,version,version,1876,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:216,performance,error,error,216,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:330,performance,Error,Error,330,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:390,performance,Error,Error,390,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:415,performance,Error,Error,415,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:574,performance,Content,Contents,574,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:711,performance,time,time,711,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:238,reliability,fail,failed,238,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:216,safety,error,error,216,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:330,safety,Error,Error,330,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:390,safety,Error,Error,390,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:415,safety,Error,Error,415,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:919,safety,compl,completed,919,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1763,safety,input,input,1763,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:707,security,one-tim,one-time,707,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:919,security,compl,completed,919,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:2017,testability,context,context,2017,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:2046,testability,context,context,2046,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:216,usability,error,error,216,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:230,usability,command,command,230,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:330,usability,Error,Error,330,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:390,usability,Error,Error,390,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:415,usability,Error,Error,415,"build problem with 6.28.04 on macos 13.3 ; At the very end of the build, there is a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1407,usability,clear,clear,1407,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1455,usability,behavi,behavior,1455,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1486,usability,behavi,behavior,1486,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1504,usability,clear,clear,1504,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1618,usability,behavi,behavior,1618,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/issues/12820:1763,usability,input,input,1763,"a problem with linking libraries:. [100%] Linking CXX shared library ../../lib/libRMySQL.so. ld: library not found for -lzlib. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libRMySQL.6.28.04.so] Error 1. make[1]: *** [sql/mysql/CMakeFiles/RMySQL.dir/all] Error 2. make: *** [all] Error 2. However, this library is present in the system and during the cmake it is found:. cmake:. -- Looking for ZLib. -- Found ZLIB: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/lib/libz.tbd (found version ""1.2.11""). The temporary, one-time solution that worked for me was to edit the file created by cmake:. [build directory]/sql/mysql/CMakeFiles/RMySQL.dir/link.txt. I removed the ""-lzlib -lzstd"" part from the list of libraries and the link completed without problems. It looks like the problem is in the build system. Best regards. Yury. - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12820
https://github.com/root-project/root/pull/12822:106,availability,error,error,106,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:83,deployability,fail,fail,83,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:106,performance,error,error,106,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:83,reliability,fail,fail,83,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:12,safety,test,test,12,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:101,safety,test,test,101,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:106,safety,error,error,106,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:12,testability,test,test,12,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:101,testability,test,test,101,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:32,usability,cancel,cancelled,32,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12822:106,usability,error,error,106,[ci] Upload test results unless cancelled; Commit c8c0ea7c59 made the step and job fail in case of a test error. We still want the results to be uploaded to show them on GitHub.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12822
https://github.com/root-project/root/pull/12823:17,availability,failur,failures,17,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:17,deployability,fail,failures,17,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:35,deployability,fail,failed,35,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:69,deployability,fail,failed,69,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:116,deployability,fail,fail,116,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:168,deployability,fail,failed,168,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:317,deployability,updat,updated,317,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:17,performance,failur,failures,17,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:17,reliability,fail,failures,17,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:35,reliability,fail,failed,35,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:69,reliability,fail,failed,69,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:116,reliability,fail,fail,116,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:168,reliability,fail,failed,168,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:12,safety,test,test,12,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:42,safety,test,tests,42,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:202,safety,test,tests,202,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:287,safety,test,tested,287,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:317,safety,updat,updated,317,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:317,security,updat,updated,317,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:12,testability,test,test,12,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:42,testability,test,tests,42,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:202,testability,test,tests,202,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:287,testability,test,tested,287,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:104,usability,workflow,workflow,104,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12823:159,usability,workflow,workflow,159,"[ci] Report test failures also for failed tests: [skip-ci]; now that failed roottest causes the ROOT CI workflow to fail, reporing needs to happen also if the workflow failed, otherwise only successful tests are reported. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12823
https://github.com/root-project/root/pull/12824:485,deployability,updat,updated,485,"[ntuple] Make sure that all tasks have finished in `~RPageStorage`; In the `RPageStorage` destructor: wait for unterminated tasks, if any, as they may still hold a reference to `this`. This is known to happen, e.g. in `RPageSinkBuf` if `CommitClusterImpl()` is not called after committing some pages via `CommitPageImpl()` and the `RPageSinkBuf` is immediately destructed. This fixes the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12824
https://github.com/root-project/root/pull/12824:428,safety,test,test,428,"[ntuple] Make sure that all tasks have finished in `~RPageStorage`; In the `RPageStorage` destructor: wait for unterminated tasks, if any, as they may still hold a reference to `this`. This is known to happen, e.g. in `RPageSinkBuf` if `CommitClusterImpl()` is not called after committing some pages via `CommitPageImpl()` and the `RPageSinkBuf` is immediately destructed. This fixes the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12824
https://github.com/root-project/root/pull/12824:455,safety,test,tested,455,"[ntuple] Make sure that all tasks have finished in `~RPageStorage`; In the `RPageStorage` destructor: wait for unterminated tasks, if any, as they may still hold a reference to `this`. This is known to happen, e.g. in `RPageSinkBuf` if `CommitClusterImpl()` is not called after committing some pages via `CommitPageImpl()` and the `RPageSinkBuf` is immediately destructed. This fixes the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12824
https://github.com/root-project/root/pull/12824:485,safety,updat,updated,485,"[ntuple] Make sure that all tasks have finished in `~RPageStorage`; In the `RPageStorage` destructor: wait for unterminated tasks, if any, as they may still hold a reference to `this`. This is known to happen, e.g. in `RPageSinkBuf` if `CommitClusterImpl()` is not called after committing some pages via `CommitPageImpl()` and the `RPageSinkBuf` is immediately destructed. This fixes the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12824
https://github.com/root-project/root/pull/12824:485,security,updat,updated,485,"[ntuple] Make sure that all tasks have finished in `~RPageStorage`; In the `RPageStorage` destructor: wait for unterminated tasks, if any, as they may still hold a reference to `this`. This is known to happen, e.g. in `RPageSinkBuf` if `CommitClusterImpl()` is not called after committing some pages via `CommitPageImpl()` and the `RPageSinkBuf` is immediately destructed. This fixes the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12824
https://github.com/root-project/root/pull/12824:428,testability,test,test,428,"[ntuple] Make sure that all tasks have finished in `~RPageStorage`; In the `RPageStorage` destructor: wait for unterminated tasks, if any, as they may still hold a reference to `this`. This is known to happen, e.g. in `RPageSinkBuf` if `CommitClusterImpl()` is not called after committing some pages via `CommitPageImpl()` and the `RPageSinkBuf` is immediately destructed. This fixes the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12824
https://github.com/root-project/root/pull/12824:455,testability,test,tested,455,"[ntuple] Make sure that all tasks have finished in `~RPageStorage`; In the `RPageStorage` destructor: wait for unterminated tasks, if any, as they may still hold a reference to `this`. This is known to happen, e.g. in `RPageSinkBuf` if `CommitClusterImpl()` is not called after committing some pages via `CommitPageImpl()` and the `RPageSinkBuf` is immediately destructed. This fixes the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12824
https://github.com/root-project/root/pull/12825:25,energy efficiency,Draw,Draw,25,[skip-ci] Improve TTree::Draw help; as requested here: https://root-forum.cern.ch/t/problem-with-the-function-tree1-draw/54866/5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12825
https://github.com/root-project/root/pull/12825:116,energy efficiency,draw,draw,116,[skip-ci] Improve TTree::Draw help; as requested here: https://root-forum.cern.ch/t/problem-with-the-function-tree1-draw/54866/5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12825
https://github.com/root-project/root/pull/12825:30,usability,help,help,30,[skip-ci] Improve TTree::Draw help; as requested here: https://root-forum.cern.ch/t/problem-with-the-function-tree1-draw/54866/5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12825
https://github.com/root-project/root/pull/12826:388,availability,unavail,unavailable,388,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:1346,availability,error,errors,1346,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:452,deployability,depend,depends,452,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:642,deployability,depend,dependents,642,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:795,deployability,contain,containing,795,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:169,integrability,pub,public,169,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:182,integrability,interfac,interface,182,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:331,integrability,interfac,interface,331,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:452,integrability,depend,depends,452,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:568,integrability,interfac,interface,568,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:642,integrability,depend,dependents,642,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:182,interoperability,interfac,interface,182,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:331,interoperability,interfac,interface,331,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:568,interoperability,interfac,interface,568,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:182,modifiability,interfac,interface,182,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:331,modifiability,interfac,interface,331,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:425,modifiability,variab,variables,425,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:452,modifiability,depend,depends,452,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:568,modifiability,interfac,interface,568,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:592,modifiability,variab,variables,592,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:642,modifiability,depend,dependents,642,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:729,modifiability,paramet,parameters,729,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:814,modifiability,variab,variables,814,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:841,modifiability,variab,variables,841,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:1346,performance,error,errors,1346,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:452,safety,depend,depends,452,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:642,safety,depend,dependents,642,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:1346,safety,error,errors,1346,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:345,security,access,access,345,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:905,security,access,access,905,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:452,testability,depend,depends,452,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:642,testability,depend,dependents,642,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:176,usability,user,user,176,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:1261,usability,support,supported,1261,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12826:1346,usability,error,errors,1346,"[RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; With PR https://github.com/root-project/root/pull/12800, the `RooFormula` was taken out of the public user. interface, because it is an implementation detail of the RooFormulaVar. and RooGenericPdf. However, there are cases where people used the RooFormula interface to. access some information that was otherwise unavailable, like the set of. actual variables that the formula depends on. There is some code in RooFormulaVar and RooGenericPdf that makes it seem. like these classes provide an interface to the actual variables. themselves:. ```c++. const RooArgList& dependents() const { return _actualVars; }. ... RooListProxy _actualVars ; ///< Actual parameters used by formula engine. ```. However, `_actualVars` is containing **all** variables, not the actual. variables as the name suggests! Fixing this removes the need to access the actual vars via the. `RooFormula`. This connects to a discussion that was held on GitHub:. https://github.com/root-project/root/commit/a470a3d85e8b5c93917d3e84c39e9d5f0066da97#commitcomment-113514331. Furthermore, a second commit in this PR suggests to remove the possibility to reset the formula in a `RooFormula`, because this i not correctly supported anyway, untested, and greatly increases the possibility for implementation errors. It was only every used in `RooGenericPdf::readFromStream()`, which is not used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12826
https://github.com/root-project/root/pull/12827:154,deployability,releas,release,154,[PyROOT] Replace deprecated np.bool by plain bool; The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:. https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12827
https://github.com/root-project/root/pull/12827:220,deployability,releas,release,220,[PyROOT] Replace deprecated np.bool by plain bool; The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:. https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12827
https://github.com/root-project/root/pull/12827:302,deployability,version,versions,302,[PyROOT] Replace deprecated np.bool by plain bool; The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:. https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12827
https://github.com/root-project/root/pull/12827:302,integrability,version,versions,302,[PyROOT] Replace deprecated np.bool by plain bool; The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:. https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12827
https://github.com/root-project/root/pull/12827:302,modifiability,version,versions,302,[PyROOT] Replace deprecated np.bool by plain bool; The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:. https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12827
https://github.com/root-project/root/pull/12827:312,safety,test,tested,312,[PyROOT] Replace deprecated np.bool by plain bool; The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:. https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12827
https://github.com/root-project/root/pull/12827:102,security,expir,expired,102,[PyROOT] Replace deprecated np.bool by plain bool; The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:. https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12827
https://github.com/root-project/root/pull/12827:246,security,expir,expired-deprecations,246,[PyROOT] Replace deprecated np.bool by plain bool; The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:. https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12827
https://github.com/root-project/root/pull/12827:312,testability,test,tested,312,[PyROOT] Replace deprecated np.bool by plain bool; The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:. https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12827
https://github.com/root-project/root/issues/12828:149,deployability,build,build,149,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:471,deployability,fail,fail,471,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:594,deployability,fail,failing,594,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:605,deployability,configurat,configurations,605,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:1053,deployability,instal,install,1053,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:584,energy efficiency,current,currently,584,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:62,integrability,discover,discovered,62,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:605,integrability,configur,configurations,605,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:62,interoperability,discover,discovered,62,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:605,modifiability,configur,configurations,605,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:98,reliability,doe,does,98,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:471,reliability,fail,fail,471,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:511,reliability,diagno,diagnostic,511,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:594,reliability,fail,failing,594,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:709,reliability,doe,doesn,709,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:7,safety,Test,TestSupport,7,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:85,safety,Test,TestSupport,85,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:181,safety,test,tests,181,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:203,safety,test,test,203,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:245,safety,test,test,245,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:367,safety,Test,TestSupport,367,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:480,safety,test,test,480,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:748,safety,Test,TestSupport,748,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:1141,safety,Test,TestSupport,1141,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:605,security,configur,configurations,605,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:7,testability,Test,TestSupport,7,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:85,testability,Test,TestSupport,85,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:176,testability,unit,unit,176,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:181,testability,test,tests,181,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:203,testability,test,test,203,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:245,testability,test,test,245,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:367,testability,Test,TestSupport,367,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:480,testability,test,test,480,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:511,testability,diagno,diagnostic,511,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:748,testability,Test,TestSupport,748,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:1141,testability,Test,TestSupport,1141,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/issues/12828:62,usability,discov,discovered,62,"`ROOT::TestSupport` library not working as intended; Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12828
https://github.com/root-project/root/pull/12829:84,availability,error,error,84,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:84,performance,error,error,84,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:208,reliability,doe,doesn,208,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:18,safety,test,tests,18,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:84,safety,error,error,84,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:129,safety,test,test,129,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:173,safety,Test,TestSupport,173,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:18,testability,test,tests,18,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:129,testability,test,test,129,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:173,testability,Test,TestSupport,173,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12829:84,usability,error,error,84,"Solve warnings in tests; * Protect `EnableImplicitMT()` with `R__USE_IMT`. * Expect error about non existent file in `readspeed` test. Those should have been caught by the `TestSupport` library, but that one doesn't work at the moment (see https://github.com/root-project/root/issues/12828).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12829
https://github.com/root-project/root/pull/12830:12,deployability,build,build,12,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:18,deployability,artifact,artifacts,18,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:77,deployability,build,build,77,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:95,deployability,fail,fails,95,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:139,deployability,fail,fail,139,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:95,reliability,fail,fails,95,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:139,reliability,fail,fail,139,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:35,safety,test,testing,35,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:101,safety,test,testing,101,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:35,testability,test,testing,35,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12830:101,testability,test,testing,101,"[ci] Upload build artifacts before testing; We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12830
https://github.com/root-project/root/pull/12831:208,deployability,updat,updated,208,"Revert ""[llvm] Override llvm-visibility-default:""; This reverts commit 0363aed. Use llvm-upstream commit instead!# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12831
https://github.com/root-project/root/pull/12831:178,safety,test,tested,178,"Revert ""[llvm] Override llvm-visibility-default:""; This reverts commit 0363aed. Use llvm-upstream commit instead!# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12831
https://github.com/root-project/root/pull/12831:208,safety,updat,updated,208,"Revert ""[llvm] Override llvm-visibility-default:""; This reverts commit 0363aed. Use llvm-upstream commit instead!# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12831
https://github.com/root-project/root/pull/12831:208,security,updat,updated,208,"Revert ""[llvm] Override llvm-visibility-default:""; This reverts commit 0363aed. Use llvm-upstream commit instead!# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12831
https://github.com/root-project/root/pull/12831:178,testability,test,tested,178,"Revert ""[llvm] Override llvm-visibility-default:""; This reverts commit 0363aed. Use llvm-upstream commit instead!# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12831
https://github.com/root-project/root/issues/12832:420,availability,operat,operations,420,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:515,availability,error,errors,515,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:533,energy efficiency,CPU,CPU,533,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:33,integrability,Event,EventSections,33,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:123,integrability,Event,EventSections,123,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:580,integrability,event,events,580,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:515,performance,error,errors,515,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:533,performance,CPU,CPU,533,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:47,safety,test,tests,47,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:138,safety,test,test,138,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:153,safety,test,testRooAbsL,153,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:283,safety,test,tests,283,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:327,safety,test,test,327,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:515,safety,error,errors,515,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:47,testability,test,tests,47,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:138,testability,test,test,138,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:153,testability,test,testRooAbsL,153,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:283,testability,test,tests,283,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:327,testability,test,test,327,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/issues/12832:515,usability,error,errors,515,"[RF] Change precision of RooAbsL EventSections tests; Following #12389, we should also change the `EXPECT_EQ`s in the two `EventSections` test cases in `testRooAbsL` to `EXPECT_DOUBLE_EQ`. The same explanation as for that case applies to them and should be added as a comment to the tests:. ```. // We cannot EXPECT_EQ in this test, because we compare actually different. // calculations. The multiple additions and FMA operations involved in the. // calculation of the multiple parts introduces different rounding errors. // on the CPU level than the single calculation over all events at once. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12832
https://github.com/root-project/root/pull/12833:79,availability,error,error,79,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:19,deployability,patch,patch,19,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:73,deployability,patch,patch,73,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:79,performance,error,error,79,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:19,safety,patch,patch,19,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:73,safety,patch,patch,73,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:79,safety,error,error,79,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:19,security,patch,patch,19,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:73,security,patch,patch,73,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:48,testability,context,context,48,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12833:79,usability,error,error,79,[clad] Fix corrupt patch file (missing space in context).; Fixes Windows patch error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12833
https://github.com/root-project/root/pull/12834:72,availability,failur,failures,72,[llvm] Bump to tag ROOT-llvm13-20230517-01.; Should fix the out-of-sync failures :crossed_fingers: .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12834
https://github.com/root-project/root/pull/12834:72,deployability,fail,failures,72,[llvm] Bump to tag ROOT-llvm13-20230517-01.; Should fix the out-of-sync failures :crossed_fingers: .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12834
https://github.com/root-project/root/pull/12834:72,performance,failur,failures,72,[llvm] Bump to tag ROOT-llvm13-20230517-01.; Should fix the out-of-sync failures :crossed_fingers: .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12834
https://github.com/root-project/root/pull/12834:72,reliability,fail,failures,72,[llvm] Bump to tag ROOT-llvm13-20230517-01.; Should fix the out-of-sync failures :crossed_fingers: .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12834
https://github.com/root-project/root/pull/12835:426,deployability,build,buildLikelihood,426,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:482,deployability,build,builder,482,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:528,deployability,manag,manage,528,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:528,energy efficiency,manag,manage,528,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:23,integrability,Batch,BatchMode,23,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:90,integrability,Batch,BatchMode,90,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:172,integrability,Batch,BatchMode,172,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:234,integrability,Batch,BatchMode,234,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:377,integrability,batch,batch,377,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:456,modifiability,refact,refactored,456,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:23,performance,Batch,BatchMode,23,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:90,performance,Batch,BatchMode,90,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:130,performance,time,time,130,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:172,performance,Batch,BatchMode,172,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:234,performance,Batch,BatchMode,234,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:377,performance,batch,batch,377,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:456,performance,refactor,refactored,456,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:60,safety,test,test,60,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:75,safety,test,tests,75,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:302,safety,test,tests,302,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:528,safety,manag,manage,528,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:60,testability,test,test,60,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:75,testability,test,tests,75,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:302,testability,test,tests,302,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:5,usability,Support,Support,5,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:156,usability,support,support,156,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12835:218,usability,support,support,218,"[RF] Support again the BatchMode in `RooUnbinnedL`; The new test statistic tests with the BatchMode were disabled for quite. some time, because they didn't support the new BatchMode with the. RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this. commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12835
https://github.com/root-project/root/pull/12836:18,safety,test,test,18,[ntuple] Add more test coverage for RNTuple+RVec ; Replaces #10665,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12836
https://github.com/root-project/root/pull/12836:18,testability,test,test,18,[ntuple] Add more test coverage for RNTuple+RVec ; Replaces #10665,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12836
https://github.com/root-project/root/pull/12836:23,testability,coverag,coverage,23,[ntuple] Add more test coverage for RNTuple+RVec ; Replaces #10665,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12836
https://github.com/root-project/root/pull/12837:85,deployability,fail,failing,85,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:118,deployability,build,builds,118,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:278,deployability,updat,updated,278,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:125,energy efficiency,green,green,125,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:85,reliability,fail,failing,85,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:97,safety,test,test,97,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:248,safety,test,tested,248,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:278,safety,updat,updated,278,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:278,security,updat,updated,278,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:97,testability,test,test,97,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:248,testability,test,tested,248,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12837:147,usability,support,support,147,"[ci] mac13, fed38: switch from C++20 to default or 17: [skip-ci]; We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12837
https://github.com/root-project/root/pull/12838:82,availability,error,error,82,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:169,availability,sli,slipping,169,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:209,availability,error,error,209,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:62,modifiability,paramet,parameter,62,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:138,modifiability,paramet,parameter,138,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:82,performance,error,error,82,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:209,performance,error,error,209,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:169,reliability,sli,slipping,169,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:82,safety,error,error,82,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:209,safety,error,error,209,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:82,usability,error,error,82,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12838:209,usability,error,error,209,"[RF] RooAbsReal::getPropagatedError: fix for case of negative parameter with zero error; A one-line fix, but should be backported! If the parameter was negative, it was slipping past this line and causing nan error to come back from the function!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12838
https://github.com/root-project/root/pull/12839:37,safety,test,test,37,[RF] Add the CHEP'23 AD results as a test.; Turn the benchmark used to obtain results for CHEP 2023 into a roofit test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12839
https://github.com/root-project/root/pull/12839:114,safety,test,test,114,[RF] Add the CHEP'23 AD results as a test.; Turn the benchmark used to obtain results for CHEP 2023 into a roofit test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12839
https://github.com/root-project/root/pull/12839:37,testability,test,test,37,[RF] Add the CHEP'23 AD results as a test.; Turn the benchmark used to obtain results for CHEP 2023 into a roofit test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12839
https://github.com/root-project/root/pull/12839:114,testability,test,test,114,[RF] Add the CHEP'23 AD results as a test.; Turn the benchmark used to obtain results for CHEP 2023 into a roofit test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12839
https://github.com/root-project/root/issues/12840:1129,availability,Operat,Operating,1129,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1255,availability,down,download,1255,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1085,deployability,version,version,1085,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1094,deployability,Version,Version,1094,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1172,deployability,VERSION,VERSION,1172,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1237,deployability,instal,install,1237,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1289,deployability,Instal,Installed,1289,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1085,integrability,version,version,1085,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1094,integrability,Version,Version,1094,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1172,integrability,VERSION,VERSION,1172,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:563,interoperability,specif,specified,563,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:13,modifiability,Paramet,Parameter,13,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:446,modifiability,paramet,parameter,446,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:543,modifiability,paramet,parameter,543,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:652,modifiability,paramet,parameters,652,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1085,modifiability,version,version,1085,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1094,modifiability,Version,Version,1094,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1172,modifiability,VERSION,VERSION,1172,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:766,reliability,doe,does,766,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1302,reliability,rca,rcas,1302,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:914,safety,input,input,914,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:957,safety,input,input,957,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1355,testability,context,context,1355,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:1384,testability,context,context,1384,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:0,usability,Command,Command,0,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:582,usability,command,command,582,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:637,usability,behavi,behavior,637,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:673,usability,usab,usable,673,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:914,usability,input,input,914,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12840:957,usability,input,input,957,"Command Line Parameter Passing trailing comma problem; - [ √ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. If the parameter list of a function has a trailing comma (e.g. funct(int a, int b,){} ) then the second parameter cannot be specified from the command line (e.g. root 'funct.C(1,2)' ). ### Expected behavior. Both parameters should be usable. ### To Reproduce. /* Bug Report. * This works:. * root -b -q 'bug.C(""asdf"")'. * This does not:. * root -b -q 'bug.C(""asdf"",""xyzzy"")'. *. * You must remove the comma after param2 to fix this. */. void bug(. 		 const Char_t *param1 = ""input Text 1"",. 		 const Char_t *param2 = ""input Text 2"", // The comma here breaks the code. ). {. cout << param1 << endl;. cout << param2 << endl;. }. ### Setup. 1. ROOT version. Version 5.34/38 12 March 2018 . 3. Operating system. NAME=""Scientific Linux"". VERSION=""7.3 (Nitrogen)"". 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. Installed on rcas node at Brookhaven National Lab. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12840
https://github.com/root-project/root/issues/12841:253,performance,I/O,I/O,253,"[ntuple] prefer IO constructor in RField<user class>::GenerateValue(); As per [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1197143847), the `RField` template specialization for user-defned classes should prefer the I/O constructor over the default constructor, if an I/O constructor exists.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12841
https://github.com/root-project/root/issues/12841:305,performance,I/O,I/O,305,"[ntuple] prefer IO constructor in RField<user class>::GenerateValue(); As per [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1197143847), the `RField` template specialization for user-defned classes should prefer the I/O constructor over the default constructor, if an I/O constructor exists.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12841
https://github.com/root-project/root/issues/12841:9,usability,prefer,prefer,9,"[ntuple] prefer IO constructor in RField<user class>::GenerateValue(); As per [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1197143847), the `RField` template specialization for user-defned classes should prefer the I/O constructor over the default constructor, if an I/O constructor exists.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12841
https://github.com/root-project/root/issues/12841:41,usability,user,user,41,"[ntuple] prefer IO constructor in RField<user class>::GenerateValue(); As per [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1197143847), the `RField` template specialization for user-defned classes should prefer the I/O constructor over the default constructor, if an I/O constructor exists.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12841
https://github.com/root-project/root/issues/12841:215,usability,user,user-defned,215,"[ntuple] prefer IO constructor in RField<user class>::GenerateValue(); As per [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1197143847), the `RField` template specialization for user-defned classes should prefer the I/O constructor over the default constructor, if an I/O constructor exists.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12841
https://github.com/root-project/root/issues/12841:242,usability,prefer,prefer,242,"[ntuple] prefer IO constructor in RField<user class>::GenerateValue(); As per [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1197143847), the `RField` template specialization for user-defned classes should prefer the I/O constructor over the default constructor, if an I/O constructor exists.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12841
https://github.com/root-project/root/issues/12842:286,availability,avail,available,286,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:513,availability,unavail,unavailable,513,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:596,availability,cluster,cluster,596,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:596,deployability,cluster,cluster,596,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:1152,interoperability,distribut,distribution,1152,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:286,reliability,availab,available,286,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:408,reliability,Doe,Does,408,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:9,safety,Review,Review,9,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:286,safety,avail,available,286,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:544,safety,avoid,avoid,544,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:840,safety,test,tests,840,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:286,security,availab,available,286,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:416,security,modif,modified,416,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:463,security,modif,modified,463,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:1020,security,modif,modified,1020,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:9,testability,Review,Review,9,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:840,testability,test,tests,840,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/issues/12842:755,usability,help,help,755,"[ntuple] Review the column representation of nullable fields; A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed. 2. Where is the break-even for the dense representation vs. the sparse representation. 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes. - Fill levels 0%, 10%, 50%, 90%, 100%. - Using sparse, dense, modified dense representation. - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12842
https://github.com/root-project/root/pull/12843:104,deployability,releas,release,104,Add numba compatible with Python 3.11 to requirements.txt; Python 3.11 is supported by the latest Numba release https://numba.readthedocs.io/en/stable/release-notes.html#version-0-57-0-1-may-2023,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12843
https://github.com/root-project/root/pull/12843:151,deployability,releas,release-notes,151,Add numba compatible with Python 3.11 to requirements.txt; Python 3.11 is supported by the latest Numba release https://numba.readthedocs.io/en/stable/release-notes.html#version-0-57-0-1-may-2023,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12843
https://github.com/root-project/root/pull/12843:170,deployability,version,version-,170,Add numba compatible with Python 3.11 to requirements.txt; Python 3.11 is supported by the latest Numba release https://numba.readthedocs.io/en/stable/release-notes.html#version-0-57-0-1-may-2023,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12843
https://github.com/root-project/root/pull/12843:170,integrability,version,version-,170,Add numba compatible with Python 3.11 to requirements.txt; Python 3.11 is supported by the latest Numba release https://numba.readthedocs.io/en/stable/release-notes.html#version-0-57-0-1-may-2023,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12843
https://github.com/root-project/root/pull/12843:10,interoperability,compatib,compatible,10,Add numba compatible with Python 3.11 to requirements.txt; Python 3.11 is supported by the latest Numba release https://numba.readthedocs.io/en/stable/release-notes.html#version-0-57-0-1-may-2023,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12843
https://github.com/root-project/root/pull/12843:170,modifiability,version,version-,170,Add numba compatible with Python 3.11 to requirements.txt; Python 3.11 is supported by the latest Numba release https://numba.readthedocs.io/en/stable/release-notes.html#version-0-57-0-1-may-2023,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12843
https://github.com/root-project/root/pull/12843:74,usability,support,supported,74,Add numba compatible with Python 3.11 to requirements.txt; Python 3.11 is supported by the latest Numba release https://numba.readthedocs.io/en/stable/release-notes.html#version-0-57-0-1-may-2023,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12843
https://github.com/root-project/root/pull/12844:198,deployability,updat,updated,198,Hadd improve help message and Doxygen documentation; # This Pull request:. ## Changes or fixes:. https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12844
https://github.com/root-project/root/pull/12844:18,integrability,messag,message,18,Hadd improve help message and Doxygen documentation; # This Pull request:. ## Changes or fixes:. https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12844
https://github.com/root-project/root/pull/12844:18,interoperability,messag,message,18,Hadd improve help message and Doxygen documentation; # This Pull request:. ## Changes or fixes:. https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12844
https://github.com/root-project/root/pull/12844:168,safety,test,tested,168,Hadd improve help message and Doxygen documentation; # This Pull request:. ## Changes or fixes:. https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12844
https://github.com/root-project/root/pull/12844:198,safety,updat,updated,198,Hadd improve help message and Doxygen documentation; # This Pull request:. ## Changes or fixes:. https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12844
https://github.com/root-project/root/pull/12844:198,security,updat,updated,198,Hadd improve help message and Doxygen documentation; # This Pull request:. ## Changes or fixes:. https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12844
https://github.com/root-project/root/pull/12844:168,testability,test,tested,168,Hadd improve help message and Doxygen documentation; # This Pull request:. ## Changes or fixes:. https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12844
https://github.com/root-project/root/pull/12844:13,usability,help,help,13,Hadd improve help message and Doxygen documentation; # This Pull request:. ## Changes or fixes:. https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12844
https://github.com/root-project/root/pull/12844:38,usability,document,documentation,38,Hadd improve help message and Doxygen documentation; # This Pull request:. ## Changes or fixes:. https://github.com/root-project/root/issues/6438. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12844
https://github.com/root-project/root/pull/12845:195,availability,error,error,195,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:221,availability,Error,Error,221,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:339,availability,failur,failure,339,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:112,deployability,version,version,112,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:339,deployability,fail,failure,339,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:112,integrability,version,version,112,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:201,integrability,messag,message,201,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:12,interoperability,compatib,compatibility,12,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:201,interoperability,messag,message,201,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:112,modifiability,version,version,112,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:195,performance,error,error,195,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:221,performance,Error,Error,221,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:339,performance,failur,failure,339,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:339,reliability,fail,failure,339,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:195,safety,error,error,195,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:221,safety,Error,Error,221,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:256,security,access,accessing,256,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:195,usability,error,error,195,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:221,usability,Error,Error,221,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12845:238,usability,Clear,Clear,238,"Fix forward compatibility with v6-30; In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```. Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList). ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12845
https://github.com/root-project/root/pull/12846:46,deployability,updat,update,46,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:274,deployability,updat,update,274,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:543,deployability,updat,update,543,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:942,deployability,updat,update,942,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:975,integrability,coupl,couple,975,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:184,modifiability,exten,extended,184,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:975,modifiability,coupl,couple,975,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:651,performance,content,content,651,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:46,safety,updat,update,46,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:274,safety,updat,update,274,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:543,safety,updat,update,543,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:864,safety,compl,complete,864,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:942,safety,updat,update,942,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:46,security,updat,update,46,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:223,security,hash,hashing,223,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:274,security,updat,update,274,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:348,security,ident,identical,348,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:543,security,updat,update,543,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:864,security,compl,complete,864,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:942,security,updat,update,942,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:975,testability,coupl,couple,975,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:679,usability,ui,uid,679,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:880,usability,behavi,behavior,880,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12846:935,usability,close,close,935,"IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12846
https://github.com/root-project/root/pull/12847:52,deployability,updat,update,52,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:280,deployability,updat,update,280,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:549,deployability,updat,update,549,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:948,deployability,updat,update,948,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:981,integrability,coupl,couple,981,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:190,modifiability,exten,extended,190,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:981,modifiability,coupl,couple,981,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:657,performance,content,content,657,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:52,safety,updat,update,52,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:280,safety,updat,update,280,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:549,safety,updat,update,549,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:870,safety,compl,complete,870,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:948,safety,updat,update,948,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:52,security,updat,update,52,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:229,security,hash,hashing,229,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:280,security,updat,update,280,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:354,security,ident,identical,354,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:549,security,updat,update,549,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:870,security,compl,complete,870,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:948,security,updat,update,948,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:981,testability,coupl,couple,981,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:685,usability,ui,uid,685,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:886,usability,behavi,behavior,886,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12847:941,usability,close,close,941,"v628: IO: Fix StreamerInfo record write during file update.; Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read"". which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but. an identical record was already read) *and* some data is stored in the file, the new. `StreamerInfo` record written was missing all the classes in the original record that. were not used during the update. To resolve this we record not only the fact that the record has been read and process. but also its content (via a collectin of uid of the `TStreamerInfo` objects). Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has. been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle. for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12847
https://github.com/root-project/root/pull/12848:314,deployability,updat,updating,314,HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12848
https://github.com/root-project/root/pull/12848:314,safety,updat,updating,314,HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12848
https://github.com/root-project/root/pull/12848:314,security,updat,updating,314,HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12848
https://github.com/root-project/root/pull/12848:260,usability,efficien,efficient,260,HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12848
https://github.com/root-project/root/pull/12849:320,deployability,updat,updating,320,v628: HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12849
https://github.com/root-project/root/pull/12849:320,safety,updat,updating,320,v628: HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12849
https://github.com/root-project/root/pull/12849:320,security,updat,updating,320,v628: HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12849
https://github.com/root-project/root/pull/12849:266,usability,efficien,efficient,266,v628: HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12849
https://github.com/root-project/root/issues/12852:232,availability,error,error,232,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1629,availability,Operat,Operating,1629,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:173,deployability,contain,contains,173,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1609,deployability,version,version,1609,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1060,energy efficiency,model,model,1060,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1113,energy efficiency,model,model,1113,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1203,energy efficiency,model,model,1203,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:238,integrability,messag,message,238,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1609,integrability,version,version,1609,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:238,interoperability,messag,message,238,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:416,interoperability,specif,specifying,416,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1609,modifiability,version,version,1609,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:232,performance,error,error,232,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:253,performance,disk,disk,253,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:232,safety,error,error,232,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1060,security,model,model,1060,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1113,security,model,model,1113,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:1203,security,model,model,1203,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:41,usability,custom,custom,41,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:182,usability,user,user-defined,182,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:232,usability,error,error,232,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:512,usability,behavi,behavior,512,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/issues/12852:594,usability,Minim,Minimal,594,"[ntuple] RDataFrame `Display` crashes on custom classes; - [x] Checked for duplicates. ### Describe the bug. Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior. Nothing crashes and an `RDisplay` object is returned. ### To Reproduce. Minimal reproducer:. ```c++. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleDS.hxx>. #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleWriteOptions;. using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";. const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {. float pt = 0;. };. void write() {. auto model = RNTupleModel::Create();. auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;. ntuple->Fill();. }. void read() {. auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);. auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();. dfDisp->Print();. }. void ntuple_rdf_custom_class() {. write();. read();. }. ``` . ### Setup. 1. ROOT version: master. 2. Operating system: Ubuntu 22.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12852
https://github.com/root-project/root/pull/12853:549,deployability,updat,updated,549,"[cling] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12853
https://github.com/root-project/root/pull/12853:519,safety,test,tested,519,"[cling] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12853
https://github.com/root-project/root/pull/12853:549,safety,updat,updated,549,"[cling] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12853
https://github.com/root-project/root/pull/12853:174,security,access,access,174,"[cling] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12853
https://github.com/root-project/root/pull/12853:549,security,updat,updated,549,"[cling] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12853
https://github.com/root-project/root/pull/12853:519,testability,test,tested,519,"[cling] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12853
https://github.com/root-project/root/pull/12854:639,deployability,updat,updated,639,"[cling][v6-28] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. This PR is a backport of https://github.com/root-project/root/pull/12853 to v6.28. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12854
https://github.com/root-project/root/pull/12854:609,safety,test,tested,609,"[cling][v6-28] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. This PR is a backport of https://github.com/root-project/root/pull/12853 to v6.28. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12854
https://github.com/root-project/root/pull/12854:639,safety,updat,updated,639,"[cling][v6-28] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. This PR is a backport of https://github.com/root-project/root/pull/12853 to v6.28. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12854
https://github.com/root-project/root/pull/12854:181,security,access,access,181,"[cling][v6-28] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. This PR is a backport of https://github.com/root-project/root/pull/12853 to v6.28. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12854
https://github.com/root-project/root/pull/12854:639,security,updat,updated,639,"[cling][v6-28] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. This PR is a backport of https://github.com/root-project/root/pull/12853 to v6.28. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12854
https://github.com/root-project/root/pull/12854:609,testability,test,tested,609,"[cling][v6-28] DeclUnloader: remove `TagDecl`s after all other decls; The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. This PR is a backport of https://github.com/root-project/root/pull/12853 to v6.28. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12854
https://github.com/root-project/root/pull/12855:24,availability,failur,failures,24,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:85,availability,failur,failures,85,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:615,availability,Error,ErrorMacro,615,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:633,availability,failur,failure,633,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:729,availability,error,error,729,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:791,availability,state,state,791,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:829,availability,failur,failure,829,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1089,availability,state,state,1089,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:24,deployability,fail,failures,24,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:85,deployability,fail,failures,85,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:268,deployability,fail,fail,268,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:286,deployability,Fail,Failed,286,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:633,deployability,fail,failure,633,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:829,deployability,fail,failure,829,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1261,deployability,toolchain,toolchains,1261,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1494,deployability,fail,failed,1494,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1635,deployability,updat,updated,1635,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:791,integrability,state,state,791,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:801,integrability,Filter,FilteringDiagConsumer,801,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1089,integrability,state,state,1089,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:128,interoperability,specif,specific,128,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:24,performance,failur,failures,24,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:85,performance,failur,failures,85,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:557,performance,time,time,557,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:615,performance,Error,ErrorMacro,615,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:633,performance,failur,failure,633,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:729,performance,error,error,729,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:829,performance,failur,failure,829,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:24,reliability,fail,failures,24,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:85,reliability,fail,failures,85,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:268,reliability,fail,fail,268,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:286,reliability,Fail,Failed,286,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:633,reliability,fail,failure,633,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:829,reliability,fail,failure,829,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1035,reliability,diagno,diagnostic,1035,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1494,reliability,fail,failed,1494,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:42,safety,test,tests,42,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:103,safety,test,tests,103,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:137,safety,test,tests,137,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:251,safety,test,tests,251,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:293,safety,Test,Tests,293,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:615,safety,Error,ErrorMacro,615,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:729,safety,error,error,729,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1605,safety,test,tested,1605,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1635,safety,updat,updated,1635,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1635,security,updat,updated,1635,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:42,testability,test,tests,42,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:103,testability,test,tests,103,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:137,testability,test,tests,137,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:251,testability,test,tests,251,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:293,testability,Test,Tests,293,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1035,testability,diagno,diagnostic,1035,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1046,testability,verif,verification,1046,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1605,testability,test,tested,1605,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:615,usability,Error,ErrorMacro,615,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:729,usability,error,error,729,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12855:1261,usability,tool,toolchains,1261,"[cling] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are. ```. 1: Failed Tests (2):. 1: Cling :: CodeUnloading/AtExit.C. 1: Cling :: MultipleInterpreters/MultipleInterpreters.C. ```. , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look? . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12855
https://github.com/root-project/root/pull/12856:31,availability,failur,failures,31,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:92,availability,failur,failures,92,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:247,availability,Error,ErrorMacro,247,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:265,availability,failur,failure,265,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:361,availability,error,error,361,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:423,availability,state,state,423,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:461,availability,failur,failure,461,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:721,availability,state,state,721,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:31,deployability,fail,failures,31,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:92,deployability,fail,failures,92,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:265,deployability,fail,failure,265,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:461,deployability,fail,failure,461,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:893,deployability,toolchain,toolchains,893,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:1126,deployability,fail,failed,1126,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:1267,deployability,updat,updated,1267,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:423,integrability,state,state,423,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:433,integrability,Filter,FilteringDiagConsumer,433,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:721,integrability,state,state,721,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:135,interoperability,specif,specific,135,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:31,performance,failur,failures,31,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:92,performance,failur,failures,92,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:247,performance,Error,ErrorMacro,247,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:265,performance,failur,failure,265,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:361,performance,error,error,361,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:461,performance,failur,failure,461,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:31,reliability,fail,failures,31,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:92,reliability,fail,failures,92,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:265,reliability,fail,failure,265,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:461,reliability,fail,failure,461,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:667,reliability,diagno,diagnostic,667,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:1126,reliability,fail,failed,1126,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:49,safety,test,tests,49,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:110,safety,test,tests,110,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:144,safety,test,tests,144,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:247,safety,Error,ErrorMacro,247,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:361,safety,error,error,361,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:1237,safety,test,tested,1237,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:1267,safety,updat,updated,1267,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:1267,security,updat,updated,1267,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:49,testability,test,tests,49,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:110,testability,test,tests,110,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:144,testability,test,tests,144,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:667,testability,diagno,diagnostic,667,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:678,testability,verif,verification,678,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:1237,testability,test,tested,1237,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:247,usability,Error,ErrorMacro,247,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:361,usability,error,error,361,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12856:893,usability,tool,toolchains,893,"[cling][v6-28] Fix a number of failures in cling tests; This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855. . ## Changes or fixes:. - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`. The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`. now defaults to 0 in `makeDefaultCompilationOptions()`. - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`. - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH. Per ld(1) manual page: `By default, the new dynamic tags are not created.`. - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to. `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12856
https://github.com/root-project/root/pull/12857:278,availability,failur,failures,278,"[PyROOT] Only forward some tp_flags; The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12857
https://github.com/root-project/root/pull/12857:278,deployability,fail,failures,278,"[PyROOT] Only forward some tp_flags; The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12857
https://github.com/root-project/root/pull/12857:305,deployability,build,build,305,"[PyROOT] Only forward some tp_flags; The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12857
https://github.com/root-project/root/pull/12857:350,deployability,build,builds,350,"[PyROOT] Only forward some tp_flags; The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12857
https://github.com/root-project/root/pull/12857:278,performance,failur,failures,278,"[PyROOT] Only forward some tp_flags; The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12857
https://github.com/root-project/root/pull/12857:278,reliability,fail,failures,278,"[PyROOT] Only forward some tp_flags; The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12857
https://github.com/root-project/root/pull/12857:273,safety,test,test,273,"[PyROOT] Only forward some tp_flags; The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12857
https://github.com/root-project/root/pull/12857:273,testability,test,test,273,"[PyROOT] Only forward some tp_flags; The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12857
https://github.com/root-project/root/pull/12858:114,deployability,updat,updated,114,RDataSetSpec docs; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12858
https://github.com/root-project/root/pull/12858:84,safety,test,tested,84,RDataSetSpec docs; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12858
https://github.com/root-project/root/pull/12858:114,safety,updat,updated,114,RDataSetSpec docs; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12858
https://github.com/root-project/root/pull/12858:114,security,updat,updated,114,RDataSetSpec docs; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12858
https://github.com/root-project/root/pull/12858:84,testability,test,tested,84,RDataSetSpec docs; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12858
https://github.com/root-project/root/pull/12859:0,deployability,Updat,Updating,0,Updating RDatasetSpec docs with Cpp MWE; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12859
https://github.com/root-project/root/pull/12859:136,deployability,updat,updated,136,Updating RDatasetSpec docs with Cpp MWE; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12859
https://github.com/root-project/root/pull/12859:0,safety,Updat,Updating,0,Updating RDatasetSpec docs with Cpp MWE; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12859
https://github.com/root-project/root/pull/12859:106,safety,test,tested,106,Updating RDatasetSpec docs with Cpp MWE; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12859
https://github.com/root-project/root/pull/12859:136,safety,updat,updated,136,Updating RDatasetSpec docs with Cpp MWE; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12859
https://github.com/root-project/root/pull/12859:0,security,Updat,Updating,0,Updating RDatasetSpec docs with Cpp MWE; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12859
https://github.com/root-project/root/pull/12859:136,security,updat,updated,136,Updating RDatasetSpec docs with Cpp MWE; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12859
https://github.com/root-project/root/pull/12859:106,testability,test,tested,106,Updating RDatasetSpec docs with Cpp MWE; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12859
https://github.com/root-project/root/pull/12860:230,availability,error,error,230,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:312,availability,fault,faults,312,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:339,availability,error,error,339,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:379,availability,error,error,379,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:458,deployability,updat,updated,458,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:312,energy efficiency,fault,faults,312,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:236,integrability,messag,message,236,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:345,integrability,messag,message,345,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:236,interoperability,messag,message,236,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:345,interoperability,messag,message,345,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:230,performance,error,error,230,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:312,performance,fault,faults,312,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:339,performance,error,error,339,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:379,performance,error,error,379,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:248,reliability,doe,doesn,248,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:312,reliability,fault,faults,312,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:9,safety,except,exceptions,9,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:92,safety,except,exception,92,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:230,safety,error,error,230,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:312,safety,fault,faults,312,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:339,safety,error,error,339,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:379,safety,error,error,379,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:428,safety,test,tested,428,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:458,safety,updat,updated,458,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:458,security,updat,updated,458,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:428,testability,test,tested,428,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:230,usability,error,error,230,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:339,usability,error,error,339,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12860:379,usability,error,error,379,"[RF] Add exceptions to set methods for non-existing objects; # This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12860
https://github.com/root-project/root/pull/12861:90,performance,disk,disk,90,"[ntuple] Add basic support for Double32_t; Enables support for doubles stored as float on disk (`Double32_t`). The field has `double` as its type with a `kReal32` column representation. The field's type alias is set to `Double32_t`. This PR only implements basic support, i.e. storing a `double` in memory as `float` on disk. Custom bit lengths and value ranges are for a future PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12861
https://github.com/root-project/root/pull/12861:299,performance,memor,memory,299,"[ntuple] Add basic support for Double32_t; Enables support for doubles stored as float on disk (`Double32_t`). The field has `double` as its type with a `kReal32` column representation. The field's type alias is set to `Double32_t`. This PR only implements basic support, i.e. storing a `double` in memory as `float` on disk. Custom bit lengths and value ranges are for a future PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12861
https://github.com/root-project/root/pull/12861:320,performance,disk,disk,320,"[ntuple] Add basic support for Double32_t; Enables support for doubles stored as float on disk (`Double32_t`). The field has `double` as its type with a `kReal32` column representation. The field's type alias is set to `Double32_t`. This PR only implements basic support, i.e. storing a `double` in memory as `float` on disk. Custom bit lengths and value ranges are for a future PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12861
https://github.com/root-project/root/pull/12861:19,usability,support,support,19,"[ntuple] Add basic support for Double32_t; Enables support for doubles stored as float on disk (`Double32_t`). The field has `double` as its type with a `kReal32` column representation. The field's type alias is set to `Double32_t`. This PR only implements basic support, i.e. storing a `double` in memory as `float` on disk. Custom bit lengths and value ranges are for a future PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12861
https://github.com/root-project/root/pull/12861:51,usability,support,support,51,"[ntuple] Add basic support for Double32_t; Enables support for doubles stored as float on disk (`Double32_t`). The field has `double` as its type with a `kReal32` column representation. The field's type alias is set to `Double32_t`. This PR only implements basic support, i.e. storing a `double` in memory as `float` on disk. Custom bit lengths and value ranges are for a future PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12861
https://github.com/root-project/root/pull/12861:263,usability,support,support,263,"[ntuple] Add basic support for Double32_t; Enables support for doubles stored as float on disk (`Double32_t`). The field has `double` as its type with a `kReal32` column representation. The field's type alias is set to `Double32_t`. This PR only implements basic support, i.e. storing a `double` in memory as `float` on disk. Custom bit lengths and value ranges are for a future PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12861
https://github.com/root-project/root/pull/12861:299,usability,memor,memory,299,"[ntuple] Add basic support for Double32_t; Enables support for doubles stored as float on disk (`Double32_t`). The field has `double` as its type with a `kReal32` column representation. The field's type alias is set to `Double32_t`. This PR only implements basic support, i.e. storing a `double` in memory as `float` on disk. Custom bit lengths and value ranges are for a future PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12861
https://github.com/root-project/root/pull/12861:326,usability,Custom,Custom,326,"[ntuple] Add basic support for Double32_t; Enables support for doubles stored as float on disk (`Double32_t`). The field has `double` as its type with a `kReal32` column representation. The field's type alias is set to `Double32_t`. This PR only implements basic support, i.e. storing a `double` in memory as `float` on disk. Custom bit lengths and value ranges are for a future PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12861
https://github.com/root-project/root/pull/12862:9,usability,support,support,9,[webgui] support multiple connections for embed web window; In GeometryViewer hierarchy is displayed using embed window. . One need to support multiple connections for such embed window.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12862
https://github.com/root-project/root/pull/12862:135,usability,support,support,135,[webgui] support multiple connections for embed web window; In GeometryViewer hierarchy is displayed using embed window. . One need to support multiple connections for such embed window.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12862
https://github.com/root-project/root/pull/12863:1043,availability,operat,operation,1043,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1651,availability,restor,restore,1651,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:27,deployability,unload,unloading,27,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:172,deployability,depend,dependent,172,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:348,deployability,unload,unloaded,348,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:414,deployability,unload,unloaded,414,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:650,deployability,Unload,Unload,650,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:699,deployability,unload,unloaded,699,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1183,deployability,unload,unload,1183,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1338,deployability,unload,unloaded,1338,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1435,deployability,modul,module,1435,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1506,deployability,modul,module,1506,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1797,deployability,unload,unloading,1797,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:337,energy efficiency,load,loaded,337,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:403,energy efficiency,load,loaded,403,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:603,energy efficiency,load,loading,603,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1058,energy efficiency,load,load,1058,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1077,energy efficiency,load,load,1077,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1395,energy efficiency,load,loaded,1395,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1484,energy efficiency,load,loaded,1484,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1600,energy efficiency,load,loaded,1600,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:172,integrability,depend,dependent,172,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:445,interoperability,share,share,445,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1104,interoperability,registr,registration,1104,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:172,modifiability,depend,dependent,172,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1435,modifiability,modul,module,1435,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1506,modifiability,modul,module,1506,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:337,performance,load,loaded,337,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:403,performance,load,loaded,403,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:603,performance,load,loading,603,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1058,performance,load,load,1058,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1077,performance,load,load,1077,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1395,performance,load,loaded,1395,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1469,performance,memor,memory,1469,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1484,performance,load,loaded,1484,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1531,performance,memor,memory,1531,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1600,performance,load,loaded,1600,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1651,reliability,restor,restore,1651,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:172,safety,depend,dependent,172,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:872,safety,avoid,avoid,872,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1435,safety,modul,module,1435,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1506,safety,modul,module,1506,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:172,testability,depend,dependent,172,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:994,usability,support,supported,994,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1469,usability,memor,memory,1469,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1531,usability,memor,memory,1531,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12863:1579,usability,close,closed,1579,"Fix dictionary issues when unloading/reloading the same libraries; This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12863
https://github.com/root-project/root/pull/12864:70,deployability,build,builds,70,Disable call to diagnoseOdrViolations(); This is a hack to make C++17 builds on macOS pass all tests. Fixes #12003,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12864
https://github.com/root-project/root/pull/12864:16,reliability,diagno,diagnoseOdrViolations,16,Disable call to diagnoseOdrViolations(); This is a hack to make C++17 builds on macOS pass all tests. Fixes #12003,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12864
https://github.com/root-project/root/pull/12864:95,safety,test,tests,95,Disable call to diagnoseOdrViolations(); This is a hack to make C++17 builds on macOS pass all tests. Fixes #12003,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12864
https://github.com/root-project/root/pull/12864:51,security,hack,hack,51,Disable call to diagnoseOdrViolations(); This is a hack to make C++17 builds on macOS pass all tests. Fixes #12003,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12864
https://github.com/root-project/root/pull/12864:16,testability,diagno,diagnoseOdrViolations,16,Disable call to diagnoseOdrViolations(); This is a hack to make C++17 builds on macOS pass all tests. Fixes #12003,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12864
https://github.com/root-project/root/pull/12864:95,testability,test,tests,95,Disable call to diagnoseOdrViolations(); This is a hack to make C++17 builds on macOS pass all tests. Fixes #12003,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12864
https://github.com/root-project/root/pull/12865:5,deployability,Updat,Update,5,[io] Update TFile spec to follow MIME magic bytes (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12865
https://github.com/root-project/root/pull/12865:163,deployability,updat,updated,163,[io] Update TFile spec to follow MIME magic bytes (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12865
https://github.com/root-project/root/pull/12865:5,safety,Updat,Update,5,[io] Update TFile spec to follow MIME magic bytes (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12865
https://github.com/root-project/root/pull/12865:133,safety,test,tested,133,[io] Update TFile spec to follow MIME magic bytes (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12865
https://github.com/root-project/root/pull/12865:163,safety,updat,updated,163,[io] Update TFile spec to follow MIME magic bytes (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12865
https://github.com/root-project/root/pull/12865:5,security,Updat,Update,5,[io] Update TFile spec to follow MIME magic bytes (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12865
https://github.com/root-project/root/pull/12865:163,security,updat,updated,163,[io] Update TFile spec to follow MIME magic bytes (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12865
https://github.com/root-project/root/pull/12865:133,testability,test,tested,133,[io] Update TFile spec to follow MIME magic bytes (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12865
https://github.com/root-project/root/pull/12866:585,deployability,instal,installation,585,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:726,energy efficiency,current,currentdir,726,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:11,integrability,configur,configure,11,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:11,modifiability,configur,configure,11,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:11,security,configur,configure,11,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:22,security,Access,Access-Control-Allow-Credentials,22,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:74,security,access,access,74,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:140,security,password,password,140,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:360,security,auth,auth,360,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:498,security,Access,Access-Control-Allow-Credentials,498,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:29,testability,Control,Control-Allow-Credentials,29,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12866:505,testability,Control,Control-Allow-Credentials,505,"[http] Let configure `Access-Control-Allow-Credentials` header; Allows to access files from `THttpServer` when it protected with `htdigest` password. Addresses issue discussed here:. https://root-forum.cern.ch/t/localhost-jsroot-server/54607/60. Example of starting such server on localhost:8011:. ```. THttpServer* serv = new THttpServer(""http:8011?auth_file=auth.txt&auth_domain=root&cred_cors&cors=http://localhost:8000"");. ```. Here crucial exact CORS url and `cred_cors` option which enables `Access-Control-Allow-Credentials` header. Server `localhost:8000` is just plain JSROOT installation with python3. To open ROOT file on such server:. ```. http://localhost:8000/jsroot/?with_credentials&file=http://localhost:8011/currentdir/hsimple.root. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12866
https://github.com/root-project/root/pull/12867:319,deployability,updat,updating,319,v626 HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12867
https://github.com/root-project/root/pull/12867:319,safety,updat,updating,319,v626 HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12867
https://github.com/root-project/root/pull/12867:319,security,updat,updating,319,v626 HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12867
https://github.com/root-project/root/pull/12867:265,usability,efficien,efficient,265,v626 HistFactory: open channel and combined files only once; This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12867
https://github.com/root-project/root/issues/12868:5,deployability,unload,unloading,5,"When unloading a library the altername class name are not unloaded.; To support inline namespace and opaque typedefs without needing interpreter information the dictionary for class template often load a alternate spelling of the class name (beside the normalized name) by using `ROOT::AddClassAlternate`. However when unloading the library, those aliases are not removed. In practice this means that you can define a class inside an inlined namespace in one iteration of the library and in a distinct inlined namespace the next one (Since inline namespace are mostly only used by the STD libraries, this should be a very are occasion). . Possibly more common (but still, it has never been reported so far), you can not change the number or order a class template for which one of the instance is using any opaque typedef (`Double32_t` etc...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12868
https://github.com/root-project/root/issues/12868:58,deployability,unload,unloaded,58,"When unloading a library the altername class name are not unloaded.; To support inline namespace and opaque typedefs without needing interpreter information the dictionary for class template often load a alternate spelling of the class name (beside the normalized name) by using `ROOT::AddClassAlternate`. However when unloading the library, those aliases are not removed. In practice this means that you can define a class inside an inlined namespace in one iteration of the library and in a distinct inlined namespace the next one (Since inline namespace are mostly only used by the STD libraries, this should be a very are occasion). . Possibly more common (but still, it has never been reported so far), you can not change the number or order a class template for which one of the instance is using any opaque typedef (`Double32_t` etc...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12868
https://github.com/root-project/root/issues/12868:319,deployability,unload,unloading,319,"When unloading a library the altername class name are not unloaded.; To support inline namespace and opaque typedefs without needing interpreter information the dictionary for class template often load a alternate spelling of the class name (beside the normalized name) by using `ROOT::AddClassAlternate`. However when unloading the library, those aliases are not removed. In practice this means that you can define a class inside an inlined namespace in one iteration of the library and in a distinct inlined namespace the next one (Since inline namespace are mostly only used by the STD libraries, this should be a very are occasion). . Possibly more common (but still, it has never been reported so far), you can not change the number or order a class template for which one of the instance is using any opaque typedef (`Double32_t` etc...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12868
https://github.com/root-project/root/issues/12868:197,energy efficiency,load,load,197,"When unloading a library the altername class name are not unloaded.; To support inline namespace and opaque typedefs without needing interpreter information the dictionary for class template often load a alternate spelling of the class name (beside the normalized name) by using `ROOT::AddClassAlternate`. However when unloading the library, those aliases are not removed. In practice this means that you can define a class inside an inlined namespace in one iteration of the library and in a distinct inlined namespace the next one (Since inline namespace are mostly only used by the STD libraries, this should be a very are occasion). . Possibly more common (but still, it has never been reported so far), you can not change the number or order a class template for which one of the instance is using any opaque typedef (`Double32_t` etc...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12868
https://github.com/root-project/root/issues/12868:197,performance,load,load,197,"When unloading a library the altername class name are not unloaded.; To support inline namespace and opaque typedefs without needing interpreter information the dictionary for class template often load a alternate spelling of the class name (beside the normalized name) by using `ROOT::AddClassAlternate`. However when unloading the library, those aliases are not removed. In practice this means that you can define a class inside an inlined namespace in one iteration of the library and in a distinct inlined namespace the next one (Since inline namespace are mostly only used by the STD libraries, this should be a very are occasion). . Possibly more common (but still, it has never been reported so far), you can not change the number or order a class template for which one of the instance is using any opaque typedef (`Double32_t` etc...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12868
https://github.com/root-project/root/issues/12868:376,reliability,pra,practice,376,"When unloading a library the altername class name are not unloaded.; To support inline namespace and opaque typedefs without needing interpreter information the dictionary for class template often load a alternate spelling of the class name (beside the normalized name) by using `ROOT::AddClassAlternate`. However when unloading the library, those aliases are not removed. In practice this means that you can define a class inside an inlined namespace in one iteration of the library and in a distinct inlined namespace the next one (Since inline namespace are mostly only used by the STD libraries, this should be a very are occasion). . Possibly more common (but still, it has never been reported so far), you can not change the number or order a class template for which one of the instance is using any opaque typedef (`Double32_t` etc...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12868
https://github.com/root-project/root/issues/12868:72,usability,support,support,72,"When unloading a library the altername class name are not unloaded.; To support inline namespace and opaque typedefs without needing interpreter information the dictionary for class template often load a alternate spelling of the class name (beside the normalized name) by using `ROOT::AddClassAlternate`. However when unloading the library, those aliases are not removed. In practice this means that you can define a class inside an inlined namespace in one iteration of the library and in a distinct inlined namespace the next one (Since inline namespace are mostly only used by the STD libraries, this should be a very are occasion). . Possibly more common (but still, it has never been reported so far), you can not change the number or order a class template for which one of the instance is using any opaque typedef (`Double32_t` etc...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12868
https://github.com/root-project/root/issues/12869:170,availability,error,errors,170,"quotes around class name in ClassDef in /manual/io_custom_classes/; Hi,. The example in https://root.cern/manual/io_custom_classes/ has MyClass inside quotes. That gives errors and misleads people trying to follow the manual. BR, . Jan.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12869
https://github.com/root-project/root/issues/12869:170,performance,error,errors,170,"quotes around class name in ClassDef in /manual/io_custom_classes/; Hi,. The example in https://root.cern/manual/io_custom_classes/ has MyClass inside quotes. That gives errors and misleads people trying to follow the manual. BR, . Jan.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12869
https://github.com/root-project/root/issues/12869:170,safety,error,errors,170,"quotes around class name in ClassDef in /manual/io_custom_classes/; Hi,. The example in https://root.cern/manual/io_custom_classes/ has MyClass inside quotes. That gives errors and misleads people trying to follow the manual. BR, . Jan.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12869
https://github.com/root-project/root/issues/12869:170,usability,error,errors,170,"quotes around class name in ClassDef in /manual/io_custom_classes/; Hi,. The example in https://root.cern/manual/io_custom_classes/ has MyClass inside quotes. That gives errors and misleads people trying to follow the manual. BR, . Jan.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12869
https://github.com/root-project/root/issues/12870:104,deployability,automat,automatically,104,RDF `Graph()` title: x vs y; From John Charles Hakala:. > I noticed that the `RDataFrame::Graph` method automatically gives a title on the `TGraphs` that it makes. that’s very nice! however it gives a title that is basically “(x-axis variable) vs. (y-axis variable)”. i think this is the opposite of what is conventional terminology; typically the variable of the x-axis is what comes after the “vs.”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12870
https://github.com/root-project/root/issues/12870:234,modifiability,variab,variable,234,RDF `Graph()` title: x vs y; From John Charles Hakala:. > I noticed that the `RDataFrame::Graph` method automatically gives a title on the `TGraphs` that it makes. that’s very nice! however it gives a title that is basically “(x-axis variable) vs. (y-axis variable)”. i think this is the opposite of what is conventional terminology; typically the variable of the x-axis is what comes after the “vs.”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12870
https://github.com/root-project/root/issues/12870:256,modifiability,variab,variable,256,RDF `Graph()` title: x vs y; From John Charles Hakala:. > I noticed that the `RDataFrame::Graph` method automatically gives a title on the `TGraphs` that it makes. that’s very nice! however it gives a title that is basically “(x-axis variable) vs. (y-axis variable)”. i think this is the opposite of what is conventional terminology; typically the variable of the x-axis is what comes after the “vs.”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12870
https://github.com/root-project/root/issues/12870:348,modifiability,variab,variable,348,RDF `Graph()` title: x vs y; From John Charles Hakala:. > I noticed that the `RDataFrame::Graph` method automatically gives a title on the `TGraphs` that it makes. that’s very nice! however it gives a title that is basically “(x-axis variable) vs. (y-axis variable)”. i think this is the opposite of what is conventional terminology; typically the variable of the x-axis is what comes after the “vs.”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12870
https://github.com/root-project/root/issues/12870:104,testability,automat,automatically,104,RDF `Graph()` title: x vs y; From John Charles Hakala:. > I noticed that the `RDataFrame::Graph` method automatically gives a title on the `TGraphs` that it makes. that’s very nice! however it gives a title that is basically “(x-axis variable) vs. (y-axis variable)”. i think this is the opposite of what is conventional terminology; typically the variable of the x-axis is what comes after the “vs.”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12870
https://github.com/root-project/root/pull/12871:10,usability,Support,Support,10,[webgeom] Support orhographic cameras; Support same kinds of cameras as in GL-based viewer. Also support different overlays for such camera. Fix problem with widget initialization. Many other new features in the JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12871
https://github.com/root-project/root/pull/12871:39,usability,Support,Support,39,[webgeom] Support orhographic cameras; Support same kinds of cameras as in GL-based viewer. Also support different overlays for such camera. Fix problem with widget initialization. Many other new features in the JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12871
https://github.com/root-project/root/pull/12871:97,usability,support,support,97,[webgeom] Support orhographic cameras; Support same kinds of cameras as in GL-based viewer. Also support different overlays for such camera. Fix problem with widget initialization. Many other new features in the JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12871
https://github.com/root-project/root/pull/12871:158,usability,widget,widget,158,[webgeom] Support orhographic cameras; Support same kinds of cameras as in GL-based viewer. Also support different overlays for such camera. Fix problem with widget initialization. Many other new features in the JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12871
https://github.com/root-project/root/pull/12872:113,deployability,depend,depend,113,[cmake] disable qt5web option when webgui is not enabled; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12872
https://github.com/root-project/root/pull/12872:139,deployability,build,build,139,[cmake] disable qt5web option when webgui is not enabled; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12872
https://github.com/root-project/root/pull/12872:113,integrability,depend,depend,113,[cmake] disable qt5web option when webgui is not enabled; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12872
https://github.com/root-project/root/pull/12872:68,modifiability,variab,variable,68,[cmake] disable qt5web option when webgui is not enabled; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12872
https://github.com/root-project/root/pull/12872:113,modifiability,depend,depend,113,[cmake] disable qt5web option when webgui is not enabled; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12872
https://github.com/root-project/root/pull/12872:113,safety,depend,depend,113,[cmake] disable qt5web option when webgui is not enabled; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12872
https://github.com/root-project/root/pull/12872:113,testability,depend,depend,113,[cmake] disable qt5web option when webgui is not enabled; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12872
https://github.com/root-project/root/pull/12873:120,deployability,depend,depend,120,[cmake] disable qt5web option when webgui is not enabled [6.28]; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12873
https://github.com/root-project/root/pull/12873:146,deployability,build,build,146,[cmake] disable qt5web option when webgui is not enabled [6.28]; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12873
https://github.com/root-project/root/pull/12873:120,integrability,depend,depend,120,[cmake] disable qt5web option when webgui is not enabled [6.28]; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12873
https://github.com/root-project/root/pull/12873:75,modifiability,variab,variable,75,[cmake] disable qt5web option when webgui is not enabled [6.28]; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12873
https://github.com/root-project/root/pull/12873:120,modifiability,depend,depend,120,[cmake] disable qt5web option when webgui is not enabled [6.28]; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12873
https://github.com/root-project/root/pull/12873:120,safety,depend,depend,120,[cmake] disable qt5web option when webgui is not enabled [6.28]; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12873
https://github.com/root-project/root/pull/12873:120,testability,depend,depend,120,[cmake] disable qt5web option when webgui is not enabled [6.28]; Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12873
https://github.com/root-project/root/issues/12874:71,availability,error,error,71,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:230,availability,error,error,230,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:688,availability,Operat,Operating,688,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:666,deployability,version,version,666,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:762,deployability,Build,Build,762,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:666,integrability,version,version,666,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:666,modifiability,version,version,666,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:71,performance,error,error,71,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:230,performance,error,error,230,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:71,safety,error,error,71,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:230,safety,error,error,230,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:71,usability,error,error,71,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:230,usability,error,error,230,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/issues/12874:561,usability,behavi,behavior,561,"Importing NumPy in python after importing ROOT results in segmentation error on Python 3.11.2; - [x] Checked for duplicates. ### Describe the bug. When importing NumPy in Python 3.11.2 after ROOT has been imported, a segmentation error is returned. . ![image](https://github.com/root-project/root/assets/25668305/47651cbe-5113-410f-844c-17fd97ce4f03). There are no problems when importing numpy before importing ROOT:. ![image](https://github.com/root-project/root/assets/25668305/6d0baf18-2ada-4f94-91bd-c000c4bebdc7). ### To Reproduce. Steps to reproduce the behavior:. 1. Run the following code in Python 3.11.2. `import ROOT`. `import numpy`. ### Setup. 1. ROOT version: 6.29/01 . 2. Operating system: Ubuntu 23.04, Python 3.11.2 . 3. How you obtained ROOT: Build from source, pulled from the github today.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12874
https://github.com/root-project/root/pull/12875:131,modifiability,variab,variable,131,"RDF:Graph() fix graph title to y-axis vs. x-axis; Following up on github issue #12870, fixing RDataFrame::Graph SetTitle to y-axis-variable vs. x-axis-variable (was the opposite before). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12875
https://github.com/root-project/root/pull/12875:151,modifiability,variab,variable,151,"RDF:Graph() fix graph title to y-axis vs. x-axis; Following up on github issue #12870, fixing RDataFrame::Graph SetTitle to y-axis-variable vs. x-axis-variable (was the opposite before). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12875
https://github.com/root-project/root/pull/12876:81,performance,content,content,81,Make PaintInitH and PaintInit similar; PaintInit and PaintInitH differed for the content axis definition. This problem was mentionned here: https://github.com/root-project/root/issues/12567.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12876
https://github.com/root-project/root/pull/12877:59,energy efficiency,Model,ModelConfig,59,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:121,energy efficiency,model,model,121,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:288,energy efficiency,Model,ModelConfig,288,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:417,energy efficiency,Model,ModelConfig,417,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:479,energy efficiency,Model,ModelConfig,479,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:358,reliability,doe,doesn,358,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:544,safety,test,test,544,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:59,security,Model,ModelConfig,59,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:121,security,model,model,121,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:288,security,Model,ModelConfig,288,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:417,security,Model,ModelConfig,417,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:479,security,Model,ModelConfig,479,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:544,testability,test,test,544,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:549,testability,coverag,coverage,549,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12877:353,usability,user,user,353,"[RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; * Add a new `ExternalConstraints()` field to the model config, to be directly passed to `createNLL`. This follows exactly the same pattern as the fields for `GlobalObservables()` and `ProjectedObservables()`. * New `ModelConfig::createNLL()` and `fitTo()` functions, such that the user doesn't need to manually transfer the information from the ModelConfig to `RooAbsPdf::createNLL/fitTo()`. * Use the new `ModelConfig::createNLL()` in RooStats to give it a little bit of test coverage. FYI @cburgard",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12877
https://github.com/root-project/root/pull/12878:27,usability,support,support,27,[webgui] add `TAnnotation` support; Also add `SetZ`/ `GetZ` methods for `TAnnotation`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12878
https://github.com/root-project/root/pull/12880:11,availability,redund,redundant,11,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:87,availability,failur,failure,87,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:161,availability,servic,services,161,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:11,deployability,redundan,redundant,11,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:87,deployability,fail,failure,87,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:161,deployability,servic,services,161,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:32,energy efficiency,model,model,32,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:161,integrability,servic,services,161,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:161,modifiability,servic,services,161,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:87,performance,failur,failure,87,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:11,reliability,redundan,redundant,11,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:87,reliability,fail,failure,87,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:5,safety,Avoid,Avoid,5,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:11,safety,redund,redundant,11,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:82,safety,test,test,82,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:99,safety,test,testLikelihoodSerial,99,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:273,safety,test,testReport,273,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:320,safety,test,test,320,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:32,security,model,model,32,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:82,testability,test,test,82,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:99,testability,test,testLikelihoodSerial,99,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:273,testability,test,testReport,273,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12880:320,testability,test,test,320,"[RF] Avoid redundant copying of model in RooAbsL constructor; This fixes the ASAN test failure of `testLikelihoodSerial` seen in the. nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12880
https://github.com/root-project/root/pull/12881:31,deployability,build,build,31,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:55,deployability,build,build,55,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:71,deployability,build,build,71,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:337,deployability,build,build,337,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:423,deployability,build,build,423,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:571,deployability,build,build,571,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:648,deployability,build,build-foo,648,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:797,deployability,build,build,797,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:608,energy efficiency,current,current,608,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:330,testability,simpl,simple,330,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:143,usability,help,helps,143,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:163,usability,tool,tools,163,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:330,usability,simpl,simple,330,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12881:389,usability,close,closed,389,"[NFC] Tell git to ignore cmake-build* instead of cmake-build-*; ROOT's build directory (or any project's) should be included in .gitignore (it helps with a lot of tools as well as IDE/code editor file switchers). Now, 2 years ago [I proposed to reserve ""_build""](https://github.com/root-project/root/pull/8009) in .gitignore as a simple build directory name that we could use. That PR was closed in favor of [removing the ""build"" directory](https://github.com/root-project/root/issues/8031) from ROOT's sources and use that name instead. Since then I have been naming my build directories something that the current .gitignore would ignore: `cmake-build-foo` or similar. I realize it might seem silly, but it would be a non-negligible quality of life improvement for me if I could just use `cmake-build` instead, hence this PR (while we wait for #8031).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12881
https://github.com/root-project/root/pull/12882:4,deployability,fail,failing,4,Fix failing patch on Windows; Fix `fatal: corrupt patch at line 28` on Windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12882
https://github.com/root-project/root/pull/12882:12,deployability,patch,patch,12,Fix failing patch on Windows; Fix `fatal: corrupt patch at line 28` on Windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12882
https://github.com/root-project/root/pull/12882:50,deployability,patch,patch,50,Fix failing patch on Windows; Fix `fatal: corrupt patch at line 28` on Windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12882
https://github.com/root-project/root/pull/12882:4,reliability,fail,failing,4,Fix failing patch on Windows; Fix `fatal: corrupt patch at line 28` on Windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12882
https://github.com/root-project/root/pull/12882:12,safety,patch,patch,12,Fix failing patch on Windows; Fix `fatal: corrupt patch at line 28` on Windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12882
https://github.com/root-project/root/pull/12882:50,safety,patch,patch,50,Fix failing patch on Windows; Fix `fatal: corrupt patch at line 28` on Windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12882
https://github.com/root-project/root/pull/12882:12,security,patch,patch,12,Fix failing patch on Windows; Fix `fatal: corrupt patch at line 28` on Windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12882
https://github.com/root-project/root/pull/12882:50,security,patch,patch,50,Fix failing patch on Windows; Fix `fatal: corrupt patch at line 28` on Windows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12882
https://github.com/root-project/root/pull/12883:155,deployability,version,version,155,"[math] Fix fitting for variable bins histograms ; This Pull request fixes some issues when fitting variable bins histograms. In addition it provides a new version of the fitting test, stressHistoFit.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12883
https://github.com/root-project/root/pull/12883:155,integrability,version,version,155,"[math] Fix fitting for variable bins histograms ; This Pull request fixes some issues when fitting variable bins histograms. In addition it provides a new version of the fitting test, stressHistoFit.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12883
https://github.com/root-project/root/pull/12883:23,modifiability,variab,variable,23,"[math] Fix fitting for variable bins histograms ; This Pull request fixes some issues when fitting variable bins histograms. In addition it provides a new version of the fitting test, stressHistoFit.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12883
https://github.com/root-project/root/pull/12883:99,modifiability,variab,variable,99,"[math] Fix fitting for variable bins histograms ; This Pull request fixes some issues when fitting variable bins histograms. In addition it provides a new version of the fitting test, stressHistoFit.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12883
https://github.com/root-project/root/pull/12883:155,modifiability,version,version,155,"[math] Fix fitting for variable bins histograms ; This Pull request fixes some issues when fitting variable bins histograms. In addition it provides a new version of the fitting test, stressHistoFit.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12883
https://github.com/root-project/root/pull/12883:178,safety,test,test,178,"[math] Fix fitting for variable bins histograms ; This Pull request fixes some issues when fitting variable bins histograms. In addition it provides a new version of the fitting test, stressHistoFit.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12883
https://github.com/root-project/root/pull/12883:178,testability,test,test,178,"[math] Fix fitting for variable bins histograms ; This Pull request fixes some issues when fitting variable bins histograms. In addition it provides a new version of the fitting test, stressHistoFit.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12883
https://github.com/root-project/root/pull/12884:0,deployability,Automat,Automatically,0,"Automatically add `override` to graf2d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12884
https://github.com/root-project/root/pull/12884:73,deployability,contain,contains,73,"Automatically add `override` to graf2d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12884
https://github.com/root-project/root/pull/12884:100,deployability,automat,automatically,100,"Automatically add `override` to graf2d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12884
https://github.com/root-project/root/pull/12884:0,testability,Automat,Automatically,0,"Automatically add `override` to graf2d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12884
https://github.com/root-project/root/pull/12884:100,testability,automat,automatically,100,"Automatically add `override` to graf2d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12884
https://github.com/root-project/root/pull/12885:65,deployability,log,logo,65,[skip-ci] with the new doxygen the doc footer was corrupted; The logo size in the footer was wrong.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12885
https://github.com/root-project/root/pull/12885:65,safety,log,logo,65,[skip-ci] with the new doxygen the doc footer was corrupted; The logo size in the footer was wrong.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12885
https://github.com/root-project/root/pull/12885:65,security,log,logo,65,[skip-ci] with the new doxygen the doc footer was corrupted; The logo size in the footer was wrong.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12885
https://github.com/root-project/root/pull/12885:65,testability,log,logo,65,[skip-ci] with the new doxygen the doc footer was corrupted; The logo size in the footer was wrong.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12885
https://github.com/root-project/root/pull/12886:0,deployability,Automat,Automatically,0,"Automatically add `override` to graf3d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12886
https://github.com/root-project/root/pull/12886:73,deployability,contain,contains,73,"Automatically add `override` to graf3d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12886
https://github.com/root-project/root/pull/12886:100,deployability,automat,automatically,100,"Automatically add `override` to graf3d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12886
https://github.com/root-project/root/pull/12886:0,testability,Automat,Automatically,0,"Automatically add `override` to graf3d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12886
https://github.com/root-project/root/pull/12886:100,testability,automat,automatically,100,"Automatically add `override` to graf3d with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12886
https://github.com/root-project/root/pull/12887:162,availability,error,error,162,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:0,deployability,Build,Build,0,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:248,deployability,build,building,248,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:374,deployability,build,building-application-using-externalproject-add-on-,374,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:427,energy efficiency,cpu,cpu,427,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:168,integrability,messag,message,168,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:115,interoperability,compatib,compatible,115,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:168,interoperability,messag,message,168,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:162,performance,error,error,162,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:427,performance,cpu,cpu,427,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:7,safety,Prevent,Prevent,7,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:162,safety,error,error,162,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:7,security,Preven,Prevent,7,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12887:162,usability,error,error,162,"Build: Prevent using of x86_64 Ninja on MacOS/arm64.; Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:. ```. ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64. ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12887
https://github.com/root-project/root/pull/12888:204,integrability,configur,configuring-issue-templates-for-your-repository,204,[github] Add new github form for bug report; Testing the addition of the new github issue template form https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12888
https://github.com/root-project/root/pull/12888:241,interoperability,repositor,repository,241,[github] Add new github form for bug report; Testing the addition of the new github issue template form https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12888
https://github.com/root-project/root/pull/12888:204,modifiability,configur,configuring-issue-templates-for-your-repository,204,[github] Add new github form for bug report; Testing the addition of the new github issue template form https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12888
https://github.com/root-project/root/pull/12888:45,safety,Test,Testing,45,[github] Add new github form for bug report; Testing the addition of the new github issue template form https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12888
https://github.com/root-project/root/pull/12888:204,security,configur,configuring-issue-templates-for-your-repository,204,[github] Add new github form for bug report; Testing the addition of the new github issue template form https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12888
https://github.com/root-project/root/pull/12888:45,testability,Test,Testing,45,[github] Add new github form for bug report; Testing the addition of the new github issue template form https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12888
https://github.com/root-project/root/pull/12889:102,integrability,configur,configures,102,Add comments for CORS usage of THttpServert [skip-ci]; Add commented code to httpsccess.C macro which configures authentication. And server can be used with external JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12889
https://github.com/root-project/root/pull/12889:102,modifiability,configur,configures,102,Add comments for CORS usage of THttpServert [skip-ci]; Add commented code to httpsccess.C macro which configures authentication. And server can be used with external JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12889
https://github.com/root-project/root/pull/12889:102,security,configur,configures,102,Add comments for CORS usage of THttpServert [skip-ci]; Add commented code to httpsccess.C macro which configures authentication. And server can be used with external JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12889
https://github.com/root-project/root/pull/12889:113,security,authenticat,authentication,113,Add comments for CORS usage of THttpServert [skip-ci]; Add commented code to httpsccess.C macro which configures authentication. And server can be used with external JSROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12889
https://github.com/root-project/root/pull/12890:155,interoperability,prox,proxy,155,"TTreeGeneratorBase::AddHeader: Move special case for pair before custom file; This makes the test `roottest-root-treeproxy-make` pass on macOS 13, where a proxy pulling in `pair<int,int>` was trying to include the (private) header `__bit_reference`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12890
https://github.com/root-project/root/pull/12890:93,safety,test,test,93,"TTreeGeneratorBase::AddHeader: Move special case for pair before custom file; This makes the test `roottest-root-treeproxy-make` pass on macOS 13, where a proxy pulling in `pair<int,int>` was trying to include the (private) header `__bit_reference`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12890
https://github.com/root-project/root/pull/12890:93,testability,test,test,93,"TTreeGeneratorBase::AddHeader: Move special case for pair before custom file; This makes the test `roottest-root-treeproxy-make` pass on macOS 13, where a proxy pulling in `pair<int,int>` was trying to include the (private) header `__bit_reference`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12890
https://github.com/root-project/root/pull/12890:65,usability,custom,custom,65,"TTreeGeneratorBase::AddHeader: Move special case for pair before custom file; This makes the test `roottest-root-treeproxy-make` pass on macOS 13, where a proxy pulling in `pair<int,int>` was trying to include the (private) header `__bit_reference`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12890
https://github.com/root-project/root/pull/12891:245,availability,error,errors,245,"[RF] Add missing declarations for JSONInterface template specializations; In the RooFit `JSONInterface` there are some template specializations that are defined in the translation unit but are not declared in the header file. This causes linker errors, because the compiler doesn't know that it has to look for the specializations, as explained here: https://stackoverflow.com/questions/11773960/do-template-specialisations-belong-into-the-header-or-source-file. To solve this problem, these small one-line functions are just inlined in the header. Needs to be backported to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12891
https://github.com/root-project/root/pull/12891:359,deployability,stack,stackoverflow,359,"[RF] Add missing declarations for JSONInterface template specializations; In the RooFit `JSONInterface` there are some template specializations that are defined in the translation unit but are not declared in the header file. This causes linker errors, because the compiler doesn't know that it has to look for the specializations, as explained here: https://stackoverflow.com/questions/11773960/do-template-specialisations-belong-into-the-header-or-source-file. To solve this problem, these small one-line functions are just inlined in the header. Needs to be backported to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12891
https://github.com/root-project/root/pull/12891:168,integrability,translat,translation,168,"[RF] Add missing declarations for JSONInterface template specializations; In the RooFit `JSONInterface` there are some template specializations that are defined in the translation unit but are not declared in the header file. This causes linker errors, because the compiler doesn't know that it has to look for the specializations, as explained here: https://stackoverflow.com/questions/11773960/do-template-specialisations-belong-into-the-header-or-source-file. To solve this problem, these small one-line functions are just inlined in the header. Needs to be backported to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12891
https://github.com/root-project/root/pull/12891:168,interoperability,translat,translation,168,"[RF] Add missing declarations for JSONInterface template specializations; In the RooFit `JSONInterface` there are some template specializations that are defined in the translation unit but are not declared in the header file. This causes linker errors, because the compiler doesn't know that it has to look for the specializations, as explained here: https://stackoverflow.com/questions/11773960/do-template-specialisations-belong-into-the-header-or-source-file. To solve this problem, these small one-line functions are just inlined in the header. Needs to be backported to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12891
https://github.com/root-project/root/pull/12891:245,performance,error,errors,245,"[RF] Add missing declarations for JSONInterface template specializations; In the RooFit `JSONInterface` there are some template specializations that are defined in the translation unit but are not declared in the header file. This causes linker errors, because the compiler doesn't know that it has to look for the specializations, as explained here: https://stackoverflow.com/questions/11773960/do-template-specialisations-belong-into-the-header-or-source-file. To solve this problem, these small one-line functions are just inlined in the header. Needs to be backported to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12891
https://github.com/root-project/root/pull/12891:274,reliability,doe,doesn,274,"[RF] Add missing declarations for JSONInterface template specializations; In the RooFit `JSONInterface` there are some template specializations that are defined in the translation unit but are not declared in the header file. This causes linker errors, because the compiler doesn't know that it has to look for the specializations, as explained here: https://stackoverflow.com/questions/11773960/do-template-specialisations-belong-into-the-header-or-source-file. To solve this problem, these small one-line functions are just inlined in the header. Needs to be backported to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12891
https://github.com/root-project/root/pull/12891:245,safety,error,errors,245,"[RF] Add missing declarations for JSONInterface template specializations; In the RooFit `JSONInterface` there are some template specializations that are defined in the translation unit but are not declared in the header file. This causes linker errors, because the compiler doesn't know that it has to look for the specializations, as explained here: https://stackoverflow.com/questions/11773960/do-template-specialisations-belong-into-the-header-or-source-file. To solve this problem, these small one-line functions are just inlined in the header. Needs to be backported to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12891
https://github.com/root-project/root/pull/12891:180,testability,unit,unit,180,"[RF] Add missing declarations for JSONInterface template specializations; In the RooFit `JSONInterface` there are some template specializations that are defined in the translation unit but are not declared in the header file. This causes linker errors, because the compiler doesn't know that it has to look for the specializations, as explained here: https://stackoverflow.com/questions/11773960/do-template-specialisations-belong-into-the-header-or-source-file. To solve this problem, these small one-line functions are just inlined in the header. Needs to be backported to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12891
https://github.com/root-project/root/pull/12891:245,usability,error,errors,245,"[RF] Add missing declarations for JSONInterface template specializations; In the RooFit `JSONInterface` there are some template specializations that are defined in the translation unit but are not declared in the header file. This causes linker errors, because the compiler doesn't know that it has to look for the specializations, as explained here: https://stackoverflow.com/questions/11773960/do-template-specialisations-belong-into-the-header-or-source-file. To solve this problem, these small one-line functions are just inlined in the header. Needs to be backported to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12891
https://github.com/root-project/root/pull/12892:3,availability,down,download,3,Re-download all Clad patches from GitHub; This guarantees valid patch files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12892
https://github.com/root-project/root/pull/12892:21,deployability,patch,patches,21,Re-download all Clad patches from GitHub; This guarantees valid patch files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12892
https://github.com/root-project/root/pull/12892:64,deployability,patch,patch,64,Re-download all Clad patches from GitHub; This guarantees valid patch files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12892
https://github.com/root-project/root/pull/12892:21,safety,patch,patches,21,Re-download all Clad patches from GitHub; This guarantees valid patch files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12892
https://github.com/root-project/root/pull/12892:58,safety,valid,valid,58,Re-download all Clad patches from GitHub; This guarantees valid patch files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12892
https://github.com/root-project/root/pull/12892:64,safety,patch,patch,64,Re-download all Clad patches from GitHub; This guarantees valid patch files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12892
https://github.com/root-project/root/pull/12892:21,security,patch,patches,21,Re-download all Clad patches from GitHub; This guarantees valid patch files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12892
https://github.com/root-project/root/pull/12892:64,security,patch,patch,64,Re-download all Clad patches from GitHub; This guarantees valid patch files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12892
https://github.com/root-project/root/pull/12893:32,availability,avail,available,32,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:484,availability,consist,consistent,484,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:153,deployability,log,logical,153,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:595,deployability,log,logical,595,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:809,deployability,toggl,toggle,809,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:620,integrability,filter,filter,620,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:761,integrability,sub,sub-fields,761,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:840,integrability,sub,sub-fields,840,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:204,interoperability,specif,specify,204,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:710,interoperability,specif,specified,710,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:32,reliability,availab,available,32,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:32,safety,avail,available,32,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:153,safety,log,logical,153,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:595,safety,log,logical,595,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:32,security,availab,available,32,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:153,security,log,logical,153,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:595,security,log,logical,595,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:153,testability,log,logical,153,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:595,testability,log,logical,595,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12893:484,usability,consist,consistent,484,"[ntuple] Add iteration over all available columns; This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:. 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones. 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12893
https://github.com/root-project/root/pull/12894:56,availability,operat,operator,56,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12894:88,availability,Operat,Operator,88,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12894:214,availability,operat,operator,214,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12894:275,deployability,updat,updated,275,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12894:245,safety,test,tested,245,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12894:275,safety,updat,updated,275,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12894:275,security,updat,updated,275,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12894:245,testability,test,tested,245,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12894:26,usability,support,support,26,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12894:197,usability,support,support,197,[GSOC][TMVA][SOFIE] Added support for standalone MatMul operator to be accepted by Gemm Operator; # This Pull request: . 1) Adds the Swish Activation function in Keras Parser. 2) Standalone Matmul support for Gemm operator. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12894
https://github.com/root-project/root/pull/12895:0,deployability,Automat,Automatically,0,"Automatically add `override` to gui with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12895
https://github.com/root-project/root/pull/12895:70,deployability,contain,contains,70,"Automatically add `override` to gui with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12895
https://github.com/root-project/root/pull/12895:97,deployability,automat,automatically,97,"Automatically add `override` to gui with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12895
https://github.com/root-project/root/pull/12895:0,testability,Automat,Automatically,0,"Automatically add `override` to gui with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12895
https://github.com/root-project/root/pull/12895:97,testability,automat,automatically,97,"Automatically add `override` to gui with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, and replaces `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, the last one was `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12895
https://github.com/root-project/root/pull/12896:101,deployability,manag,management,101,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/pull/12896:120,deployability,automat,automatically,120,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/pull/12896:101,energy efficiency,manag,management,101,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/pull/12896:94,performance,memor,memory,94,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/pull/12896:141,performance,memor,memory,141,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/pull/12896:73,reliability,pra,practice,73,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/pull/12896:101,safety,manag,management,101,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/pull/12896:120,testability,automat,automatically,120,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/pull/12896:94,usability,memor,memory,94,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/pull/12896:141,usability,memor,memory,141,"[RF] Always use `addOwned()` overload that takes `unique_ptr`; This good practice to have the memory management handled automatically. A few memory leaks were also found and fixed like this. Also, use the `RooFit::OwningPtr<>` for `RooAbsArg::getComponents()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12896
https://github.com/root-project/root/issues/12897:1136,availability,error,error,1136,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1569,availability,error,error,1569,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:13,deployability,fail,fails,13,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:106,deployability,patch,patch,106,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:498,deployability,Build,Building,498,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:831,deployability,build,building,831,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:840,deployability,modul,module,840,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:862,deployability,build,building,862,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:871,deployability,modul,module,871,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:938,deployability,modul,module-includes,938,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1433,deployability,modul,module,1433,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1667,deployability,patch,patch,1667,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:518,energy efficiency,core,core,518,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:788,energy efficiency,Core,Core,788,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:848,energy efficiency,Core,Core,848,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1575,integrability,messag,message,1575,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:619,interoperability,share,shared,619,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1575,interoperability,messag,message,1575,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:840,modifiability,modul,module,840,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:871,modifiability,modul,module,871,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:938,modifiability,modul,module-includes,938,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1433,modifiability,modul,module,1433,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1136,performance,error,error,1136,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1387,performance,time,times,1387,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1569,performance,error,error,1569,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:13,reliability,fail,fails,13,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:106,safety,patch,patch,106,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:840,safety,modul,module,840,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:871,safety,modul,module,871,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:938,safety,modul,module-includes,938,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1136,safety,error,error,1136,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1433,safety,modul,module,1433,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1569,safety,error,error,1569,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1667,safety,patch,patch,1667,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:106,security,patch,patch,106,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1667,security,patch,patch,1667,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1136,usability,error,error,1136,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1569,usability,error,error,1569,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/issues/12897:1613,usability,close,close,1613,"root-6.28.04 fails to compile with gcc-13 under linux TW; Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):. ```. git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src. mkdir root_build. cd root_build. cmake ../root_src -j4. ```. and this produced:. ```. ... [ 76%] Built target ClingUtils. [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o. [ 76%] Linking CXX shared library ../../../lib/libCling.so. [ 76%] Linking CXX executable src/rootcling_stage1. [ 76%] Built target rootcling_stage1. [ 76%] Generating G__Core.cxx, ../lib/Core.pcm. [ 76%] Built target Cling. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:52:. In file included from /usr/include/c++/13/memory_resource:60:. In file included from /usr/include/c++/13/bits/memory_resource.h:46:. /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'. inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;. ^. ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'. # include <bits/utility.h> // for std::tuple_element, std::tuple_size. ^. .. ```. It's not the exact same error message as in #12659 but seems rather close in nature ... Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12897
https://github.com/root-project/root/pull/12898:55,deployability,build,build,55,"[win64] Correct TGWin32VirtualXProxy signatures to fix build; It wasn't building anymore after commit afd316bbb9, and potentially never worked because of the mismatching argument types on win64.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12898
https://github.com/root-project/root/pull/12898:72,deployability,build,building,72,"[win64] Correct TGWin32VirtualXProxy signatures to fix build; It wasn't building anymore after commit afd316bbb9, and potentially never worked because of the mismatching argument types on win64.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12898
https://github.com/root-project/root/pull/12898:158,interoperability,mismatch,mismatching,158,"[win64] Correct TGWin32VirtualXProxy signatures to fix build; It wasn't building anymore after commit afd316bbb9, and potentially never worked because of the mismatching argument types on win64.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12898
https://github.com/root-project/root/pull/12898:37,security,sign,signatures,37,"[win64] Correct TGWin32VirtualXProxy signatures to fix build; It wasn't building anymore after commit afd316bbb9, and potentially never worked because of the mismatching argument types on win64.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12898
https://github.com/root-project/root/pull/12900:27,availability,failur,failures,27,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:242,availability,Restor,Restore,242,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:508,availability,restor,restores,508,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:27,deployability,fail,failures,27,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:75,deployability,fail,failing,75,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:300,deployability,upgrad,upgrade,300,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:850,deployability,Build,BuildReturnStmt,850,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:1817,deployability,updat,updated,1817,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:1656,integrability,Transform,Transform,1656,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:1656,interoperability,Transform,Transform,1656,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:300,modifiability,upgrad,upgrade,300,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:27,performance,failur,failures,27,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:27,reliability,fail,failures,27,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:75,reliability,fail,failing,75,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:242,reliability,Restor,Restore,242,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:508,reliability,restor,restores,508,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:22,safety,test,test,22,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:89,safety,test,tests,89,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:199,safety,test,tests,199,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:567,safety,test,tests,567,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:1787,safety,test,tested,1787,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:1817,safety,updat,updated,1817,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:1817,security,updat,updated,1817,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:22,testability,test,test,22,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:89,testability,test,tests,89,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:199,testability,test,tests,199,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:567,testability,test,tests,567,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:1787,testability,test,tested,1787,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12900:525,usability,behavi,behavior,525,"[cling] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12900
https://github.com/root-project/root/pull/12901:8,deployability,modul,modulemap,8,Fix std.modulemap for gcc13; This is needed also in v6-28-00-patches for building with GCC 13 since adding the `memory_resource` header in commit f7adbd2b04. (cherry picked from commit e9a8c48e4f207d7015bbd212116486bbecbac066 and commit aae1cd064679f440ad80f39e4ee56bb0c1d9d396). Backport of the following two PRs:. * https://github.com/root-project/root/pull/12765. * https://github.com/root-project/root/pull/12793,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12901
https://github.com/root-project/root/pull/12901:61,deployability,patch,patches,61,Fix std.modulemap for gcc13; This is needed also in v6-28-00-patches for building with GCC 13 since adding the `memory_resource` header in commit f7adbd2b04. (cherry picked from commit e9a8c48e4f207d7015bbd212116486bbecbac066 and commit aae1cd064679f440ad80f39e4ee56bb0c1d9d396). Backport of the following two PRs:. * https://github.com/root-project/root/pull/12765. * https://github.com/root-project/root/pull/12793,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12901
https://github.com/root-project/root/pull/12901:73,deployability,build,building,73,Fix std.modulemap for gcc13; This is needed also in v6-28-00-patches for building with GCC 13 since adding the `memory_resource` header in commit f7adbd2b04. (cherry picked from commit e9a8c48e4f207d7015bbd212116486bbecbac066 and commit aae1cd064679f440ad80f39e4ee56bb0c1d9d396). Backport of the following two PRs:. * https://github.com/root-project/root/pull/12765. * https://github.com/root-project/root/pull/12793,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12901
https://github.com/root-project/root/pull/12901:8,modifiability,modul,modulemap,8,Fix std.modulemap for gcc13; This is needed also in v6-28-00-patches for building with GCC 13 since adding the `memory_resource` header in commit f7adbd2b04. (cherry picked from commit e9a8c48e4f207d7015bbd212116486bbecbac066 and commit aae1cd064679f440ad80f39e4ee56bb0c1d9d396). Backport of the following two PRs:. * https://github.com/root-project/root/pull/12765. * https://github.com/root-project/root/pull/12793,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12901
https://github.com/root-project/root/pull/12901:8,safety,modul,modulemap,8,Fix std.modulemap for gcc13; This is needed also in v6-28-00-patches for building with GCC 13 since adding the `memory_resource` header in commit f7adbd2b04. (cherry picked from commit e9a8c48e4f207d7015bbd212116486bbecbac066 and commit aae1cd064679f440ad80f39e4ee56bb0c1d9d396). Backport of the following two PRs:. * https://github.com/root-project/root/pull/12765. * https://github.com/root-project/root/pull/12793,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12901
https://github.com/root-project/root/pull/12901:61,safety,patch,patches,61,Fix std.modulemap for gcc13; This is needed also in v6-28-00-patches for building with GCC 13 since adding the `memory_resource` header in commit f7adbd2b04. (cherry picked from commit e9a8c48e4f207d7015bbd212116486bbecbac066 and commit aae1cd064679f440ad80f39e4ee56bb0c1d9d396). Backport of the following two PRs:. * https://github.com/root-project/root/pull/12765. * https://github.com/root-project/root/pull/12793,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12901
https://github.com/root-project/root/pull/12901:61,security,patch,patches,61,Fix std.modulemap for gcc13; This is needed also in v6-28-00-patches for building with GCC 13 since adding the `memory_resource` header in commit f7adbd2b04. (cherry picked from commit e9a8c48e4f207d7015bbd212116486bbecbac066 and commit aae1cd064679f440ad80f39e4ee56bb0c1d9d396). Backport of the following two PRs:. * https://github.com/root-project/root/pull/12765. * https://github.com/root-project/root/pull/12793,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12901
https://github.com/root-project/root/pull/12902:34,availability,failur,failures,34,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:196,availability,Restor,Restore,196,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:462,availability,restor,restores,462,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:34,deployability,fail,failures,34,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:82,deployability,fail,failing,82,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:254,deployability,upgrad,upgrade,254,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:804,deployability,Build,BuildReturnStmt,804,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:1771,deployability,updat,updated,1771,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:1610,integrability,Transform,Transform,1610,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:1610,interoperability,Transform,Transform,1610,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:254,modifiability,upgrad,upgrade,254,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:34,performance,failur,failures,34,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:34,reliability,fail,failures,34,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:82,reliability,fail,failing,82,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:196,reliability,Restor,Restore,196,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:462,reliability,restor,restores,462,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:29,safety,test,test,29,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:96,safety,test,tests,96,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:521,safety,test,tests,521,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:1741,safety,test,tested,1741,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:1771,safety,updat,updated,1771,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:1771,security,updat,updated,1771,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:29,testability,test,test,29,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:96,testability,test,tests,96,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:521,testability,test,tests,521,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:1741,testability,test,tested,1741,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12902:479,usability,behavi,behavior,479,"[cling][v6-28] Fix remaining test failures; This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:. - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols. in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior. This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C. - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead. This fixes the following crash:. ```. 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e). 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56). 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788). 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75). ```. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12902
https://github.com/root-project/root/pull/12903:227,performance,time,time,227,"[ntuple] Move the `WaitForAllTasks()` call to `~RPageSinkBuf`; This pull request is a follow-up from PR #12824. This cannot be in the base class destructor (`~RPageStorage`), given non-static members have been destroyed by the time the base class destructor is invoked. Second try at fixing the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12903
https://github.com/root-project/root/pull/12903:335,safety,test,test,335,"[ntuple] Move the `WaitForAllTasks()` call to `~RPageSinkBuf`; This pull request is a follow-up from PR #12824. This cannot be in the base class destructor (`~RPageStorage`), given non-static members have been destroyed by the time the base class destructor is invoked. Second try at fixing the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12903
https://github.com/root-project/root/pull/12903:362,safety,test,tested,362,"[ntuple] Move the `WaitForAllTasks()` call to `~RPageSinkBuf`; This pull request is a follow-up from PR #12824. This cannot be in the base class destructor (`~RPageStorage`), given non-static members have been destroyed by the time the base class destructor is invoked. Second try at fixing the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12903
https://github.com/root-project/root/pull/12903:335,testability,test,test,335,"[ntuple] Move the `WaitForAllTasks()` call to `~RPageSinkBuf`; This pull request is a follow-up from PR #12824. This cannot be in the base class destructor (`~RPageStorage`), given non-static members have been destroyed by the time the base class destructor is invoked. Second try at fixing the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12903
https://github.com/root-project/root/pull/12903:362,testability,test,tested,362,"[ntuple] Move the `WaitForAllTasks()` call to `~RPageSinkBuf`; This pull request is a follow-up from PR #12824. This cannot be in the base class destructor (`~RPageStorage`), given non-static members have been destroyed by the time the base class destructor is invoked. Second try at fixing the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12903
https://github.com/root-project/root/pull/12904:15,deployability,releas,release,15,[jsroot] 7.3.2 release with several fixes [skip-ci]; - fix normal_cdf function. - JavaScript stack limitation in TTree::Draw. - object status drawing,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12904
https://github.com/root-project/root/pull/12904:93,deployability,stack,stack,93,[jsroot] 7.3.2 release with several fixes [skip-ci]; - fix normal_cdf function. - JavaScript stack limitation in TTree::Draw. - object status drawing,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12904
https://github.com/root-project/root/pull/12904:120,energy efficiency,Draw,Draw,120,[jsroot] 7.3.2 release with several fixes [skip-ci]; - fix normal_cdf function. - JavaScript stack limitation in TTree::Draw. - object status drawing,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12904
https://github.com/root-project/root/pull/12904:142,energy efficiency,draw,drawing,142,[jsroot] 7.3.2 release with several fixes [skip-ci]; - fix normal_cdf function. - JavaScript stack limitation in TTree::Draw. - object status drawing,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12904
https://github.com/root-project/root/pull/12904:135,usability,statu,status,135,[jsroot] 7.3.2 release with several fixes [skip-ci]; - fix normal_cdf function. - JavaScript stack limitation in TTree::Draw. - object status drawing,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12904
https://github.com/root-project/root/pull/12905:913,availability,Consist,Consistent,913,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2403,availability,error,error,2403,"t. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore Link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3633,availability,error,errors,3633,"delConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6236,availability,state,stateless,6236,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7940,availability,error,error,7940,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:153,deployability,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:716,deployability,patch,patches,716,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2248,deployability,manag,management,2248,"istFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2303,deployability,manag,management,2303,"ts after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3663,deployability,build,buildArg,3663,"exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4680,deployability,observ,observables,4680,"05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5100,deployability,version,version,5100,"ation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5330,deployability,manag,management,5330,"RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5416,deployability,build,buildLoopBegin,5416,"ut scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last no",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5842,deployability,depend,dependency,5842,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6073,deployability,integr,integrals,6073,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6144,deployability,integr,integrals,6144,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6302,deployability,integr,integration,6302,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6774,deployability,manag,management,6774," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7071,deployability,Compos,Composition,7071,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7218,deployability,modul,modules,7218,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7230,deployability,modul,modules,7230,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7287,deployability,modul,modules,7287,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7488,deployability,observ,observables,7488,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7714,deployability,modul,modules,7714,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7828,deployability,build,building,7828,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1171,energy efficiency,Model,ModelConfig,1171,"ub.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `bin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2248,energy efficiency,manag,management,2248,"istFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2303,energy efficiency,manag,management,2303,"ts after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2634,energy efficiency,Model,ModelConfig,2634,"rs`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4892,energy efficiency,Optim,Optimize,4892,"r. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interfa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5330,energy efficiency,manag,management,5330,"RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6774,energy efficiency,manag,management,6774," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1687,integrability,Batch,BatchMode,1687,"at are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter meth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1820,integrability,Batch,BatchMode,1820,"Components. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3094,integrability,pub,public,3094,"ry leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3108,integrability,interfac,interface,3108,"ProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3501,integrability,pub,public,3501,"] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3861,integrability,Batch,BatchMode,3861,"] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4533,integrability,Batch,BatchMode,4533,"2a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4657,integrability,Batch,BatchMode,4657,":buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper te",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5100,integrability,version,version,5100,"ation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5455,integrability,translat,translate,5455,"oops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5489,integrability,translat,translate,5489," [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5842,integrability,depend,dependency,5842,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5853,integrability,pub,public,5853,"e()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5889,integrability,interfac,interface,5889,"timize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6073,integrability,integr,integrals,6073,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6144,integrability,integr,integrals,6144,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6236,integrability,state,stateless,6236,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6302,integrability,integr,integration,6302,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6625,integrability,interfac,interface,6625,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6909,integrability,interfac,interface,6909,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7880,integrability,wrap,wrapper,7880,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:924,interoperability,prox,proxy,924,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3108,interoperability,interfac,interface,3108,"ProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4190,interoperability,Format,Format,4190,"AbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5260,interoperability,Format,Format,5260,"] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation de",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5455,interoperability,translat,translate,5455,"oops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5489,interoperability,translat,translate,5489," [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5889,interoperability,interfac,interface,5889,"timize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6073,interoperability,integr,integrals,6073,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6144,interoperability,integr,integrals,6144,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6302,interoperability,integr,integration,6302,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6625,interoperability,interfac,interface,6625,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6657,interoperability,format,format,6657,"test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6909,interoperability,interfac,interface,6909,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7880,interoperability,wrapper,wrapper,7880,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1811,modifiability,Refact,Refactor,1811,"bsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as ser",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2180,modifiability,variab,variable,2180,"2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2379,modifiability,paramet,parameter,2379,"uctor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class ru",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3108,modifiability,interfac,interface,3108,"ProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4049,modifiability,variab,variable,4049,"e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Rem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4426,modifiability,scal,scalar,4426,"Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4433,modifiability,interm,intermediate,4433,"ate specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by rec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4515,modifiability,reu,reuse,4515,"e` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4651,modifiability,Reu,Reuse,4651,"Context::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5100,modifiability,version,version,5100,"ation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5842,modifiability,depend,dependency,5842,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5889,modifiability,interfac,interface,5889,"timize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6073,modifiability,integr,integrals,6073,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6144,modifiability,integr,integrals,6144,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6302,modifiability,integr,integration,6302,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6625,modifiability,interfac,interface,6625,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6909,modifiability,interfac,interface,6909,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7071,modifiability,Compos,Composition,7071,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7088,modifiability,inherit,inheritance,7088,"his commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7218,modifiability,modul,modules,7218,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7230,modifiability,modul,modules,7230,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7287,modifiability,modul,modules,7287,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7511,modifiability,paramet,parameter,7511,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7714,modifiability,modul,modules,7714,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:8237,modifiability,paramet,parameter,8237,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:778,performance,memor,memory,778,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1687,performance,Batch,BatchMode,1687,"at are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter meth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1718,performance,time,time,1718,"hes` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1811,performance,Refactor,Refactor,1811,"bsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as ser",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1820,performance,Batch,BatchMode,1820,"Components. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2093,performance,memor,memory,2093,"dyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from pu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2241,performance,memor,memory,2241,"sses in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2296,performance,memor,memory,2296,"axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2403,performance,error,error,2403,"t. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore Link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3633,performance,error,errors,3633,"delConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3861,performance,Batch,BatchMode,3861,"] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4533,performance,Batch,BatchMode,4533,"2a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4657,performance,Batch,BatchMode,4657,":buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper te",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4892,performance,Optimiz,Optimize,4892,"r. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interfa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6767,performance,memor,memory,6767,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7940,performance,error,error,7940,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6073,reliability,integr,integrals,6073,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6144,reliability,integr,integrals,6144,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6302,reliability,integr,integration,6302,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:153,safety,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:716,safety,patch,patches,716,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1075,safety,test,tests,1075,"ackport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1744,safety,except,exception,1744,"txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid rese",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1913,safety,test,test,1913,"nsistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2248,safety,manag,management,2248,"istFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2303,safety,manag,management,2303,"ts after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2403,safety,error,error,2403,"t. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore Link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2667,safety,except,exceptions,2667,"tiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2907,safety,test,test,2907,"mer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3633,safety,error,errors,3633,"delConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3702,safety,Avoid,Avoid,3702,"xisting objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3729,safety,test,testRooFuncWrapper,3729,"Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Impro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4008,safety,test,testRooFuncWrapper,4008,"ts in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementatio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5205,safety,test,testRooFuncWrapper,5205,") and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5330,safety,manag,management,5330,"RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5401,safety,Avoid,Avoid,5401,"bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5660,safety,test,test,5660,"Mode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5842,safety,depend,dependency,5842,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6183,safety,test,test,6183,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6665,safety,test,testRooDataHist,6665,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6722,safety,test,test,6722,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6774,safety,manag,management,6774," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7025,safety,test,tests,7025,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7039,safety,Test,TestStatistics,7039,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7218,safety,modul,modules,7218,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7230,safety,modul,modules,7230,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7287,safety,modul,modules,7287,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7556,safety,Test,Test,7556,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7600,safety,test,testRooFuncWrapper,7600,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7714,safety,modul,modules,7714,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7940,safety,error,error,7940,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:153,security,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:716,security,patch,patches,716,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1171,security,Model,ModelConfig,1171,"ub.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `bin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2634,security,Model,ModelConfig,2634,"rs`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6073,security,integr,integrals,6073,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6144,security,integr,integrals,6144,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6302,security,integr,integration,6302,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1075,testability,test,tests,1075,"ackport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1913,testability,test,test,1913,"nsistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2907,testability,test,test,2907,"mer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3002,testability,simul,simultaneous,3002,"Fit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3729,testability,test,testRooFuncWrapper,3729,"Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Impro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4008,testability,test,testRooFuncWrapper,4008,"ts in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementatio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4680,testability,observ,observables,4680,"05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5205,testability,test,testRooFuncWrapper,5205,") and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5660,testability,test,test,5660,"Mode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5842,testability,depend,dependency,5842,":cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6073,testability,integr,integrals,6073,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6144,testability,integr,integrals,6144,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6163,testability,mock,mock,6163,"wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6183,testability,test,test,6183,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6302,testability,integr,integration,6302,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6665,testability,test,testRooDataHist,6665,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6722,testability,test,test,6722,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7025,testability,test,tests,7025,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7039,testability,Test,TestStatistics,7039,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7488,testability,observ,observables,7488,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7556,testability,Test,Test,7556,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7600,testability,test,testRooFuncWrapper,7600,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:778,usability,memor,memory,778,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:858,usability,Support,Support,858,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:913,usability,Consist,Consistent,913,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:974,usability,efficien,efficient,974,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 20; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12768. Only the first commit that fixes a compiler warning. 2. https://github.com/root-project/root/pull/12809. 3. https://github.com/root-project/root/pull/12835. 4. https://github.com/root-project/root/pull/12741. 5. https://github.com/root-project/root/pull/12880. 6. https://github.com/root-project/root/pull/12891. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of 21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:1661,usability,Support,Support,1661,"21f97bd1ee) are the ones that are not in `v6-28-00-patches` (as of `tofillout`). ```txt. 21f97bd1ee [RF][HF] Fix memory leaks in HistFactory from RooAbsArg::getComponents. 70535a7426 [RF][HS3] Support a few more pdfs in RooFit HS3. d10b28bfbb [RF] Consistent proxy names in RooGamma. b9cfff2e71 [RF][HF] More efficient creation of combined dataset in HistFactory. 8ca8d848ae [RF][HS3] Necessary tweaks to pass tests also with `rapidyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Ad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2093,usability,memor,memory,2093,"dyaml` backend. 66615833e5 [RF][HS3] Add IO of external constrains from/to ModelConfig. 2607947ee3 [RF][HF] Add missing LinkDefs for systematics classes in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from pu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2241,usability,memor,memory,2241,"sses in HistFactory. f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2296,usability,memor,memory,2296,"axis limits after `RooCurve::shiftCurveToZero()`. 1b886c3e77 [RF] Improve Copy Constructor of HypoTestResult. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2403,usability,error,error,2403,"t. 2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes. d5ca98077e [RF] New function for server changing without setting attributes. 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`. 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time. 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted. ef69ad7633 [RF] Refactor BatchMode likelihood creation code. 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test. e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro. 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore Link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:2994,usability,Support,Support,2994,"] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(). 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`. ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext. 81fbc904d4 [RF] Less manual memory management in RooFit. ff32c33446 [RF] Modernize memory management in RooStats. d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error. 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer. c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`. f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWork",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3633,usability,error,errors,3633,"delConfig. cf98956266 [RF] Add exceptions to setter methods for non-existing objects. 1cc5ec46c8 [RF] Forbid resetting RooFormula. b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3773,usability,support,support,3773," [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`. b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test. 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Deta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:3935,usability,support,support,3935,"eneration issues with RooAdd* classes. 3dcea7036a [RF] Support simultaneous fits in NLL code generation. a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface. 3d01cd2e8f [RF] Remove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSamePa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4134,usability,support,support,4134,"ove deprecated RooAbsString. 059af6d55a [RF] Remove RooAbsRootFinder. bdc19e090e [RF] Get rid of RooScaledFunc. 88dbb6ad17 [RF] Make RooGenProdProj private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:4281,usability,support,support,4281," private. 94ee158ddc [RF] Remove deprecated RooCatType. d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h. f78558eb0a [RF] Mark template specialization as inline. ca29ccf161 [RF] Some cleanup of public `roofitcore` classes. 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code. 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads. 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`. 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum]. 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar. 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma. f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`. b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation. 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf. 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files. 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:5286,usability,command,command,5286,"or RooPolyVar and RooPolynomial. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enab",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6036,usability,support,support,6036,"0268 [RF] Remove RooMomentMorphND. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6111,usability,support,support,6111,"of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6767,usability,memor,memory,6767,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:6899,usability,minim,minimizer,6899,"mplementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7567,usability,prototyp,prototype,7567,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12905:7940,usability,error,error,7940,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12905
https://github.com/root-project/root/pull/12906:38,deployability,Upgrad,Upgrade,38,"[jsroot] dev 30/05/2023 [skip-ci]; 1. Upgrade three.js to r152. 2. Fix normal_cdf. 3. Fix subpads moving/resize, also move/resize sub-sub pads. 4. Fix - stack limitation with Math.min.apply in tree draw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12906
https://github.com/root-project/root/pull/12906:153,deployability,stack,stack,153,"[jsroot] dev 30/05/2023 [skip-ci]; 1. Upgrade three.js to r152. 2. Fix normal_cdf. 3. Fix subpads moving/resize, also move/resize sub-sub pads. 4. Fix - stack limitation with Math.min.apply in tree draw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12906
https://github.com/root-project/root/pull/12906:198,energy efficiency,draw,draw,198,"[jsroot] dev 30/05/2023 [skip-ci]; 1. Upgrade three.js to r152. 2. Fix normal_cdf. 3. Fix subpads moving/resize, also move/resize sub-sub pads. 4. Fix - stack limitation with Math.min.apply in tree draw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12906
https://github.com/root-project/root/pull/12906:90,integrability,sub,subpads,90,"[jsroot] dev 30/05/2023 [skip-ci]; 1. Upgrade three.js to r152. 2. Fix normal_cdf. 3. Fix subpads moving/resize, also move/resize sub-sub pads. 4. Fix - stack limitation with Math.min.apply in tree draw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12906
https://github.com/root-project/root/pull/12906:130,integrability,sub,sub-sub,130,"[jsroot] dev 30/05/2023 [skip-ci]; 1. Upgrade three.js to r152. 2. Fix normal_cdf. 3. Fix subpads moving/resize, also move/resize sub-sub pads. 4. Fix - stack limitation with Math.min.apply in tree draw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12906
https://github.com/root-project/root/pull/12906:38,modifiability,Upgrad,Upgrade,38,"[jsroot] dev 30/05/2023 [skip-ci]; 1. Upgrade three.js to r152. 2. Fix normal_cdf. 3. Fix subpads moving/resize, also move/resize sub-sub pads. 4. Fix - stack limitation with Math.min.apply in tree draw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12906
https://github.com/root-project/root/pull/12907:132,deployability,updat,updated,132,[v628][ci] Backport new CI to 6.28.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12907
https://github.com/root-project/root/pull/12907:102,safety,test,tested,102,[v628][ci] Backport new CI to 6.28.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12907
https://github.com/root-project/root/pull/12907:132,safety,updat,updated,132,[v628][ci] Backport new CI to 6.28.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12907
https://github.com/root-project/root/pull/12907:132,security,updat,updated,132,[v628][ci] Backport new CI to 6.28.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12907
https://github.com/root-project/root/pull/12907:102,testability,test,tested,102,[v628][ci] Backport new CI to 6.28.; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12907
https://github.com/root-project/root/pull/12908:144,availability,failur,failure,144,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:144,deployability,fail,failure,144,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:268,deployability,updat,updated,268,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:144,performance,failur,failure,144,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:144,reliability,fail,failure,144,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:1,safety,test,test,1,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:238,safety,test,tested,238,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:268,safety,updat,updated,268,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:268,security,updat,updated,268,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:1,testability,test,test,1,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12908:238,testability,test,tested,238,"[test] HistoFit: remove color output:; This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12908
https://github.com/root-project/root/pull/12909:22,deployability,manag,management,22,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12909:74,deployability,manag,management,74,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12909:22,energy efficiency,manag,management,22,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12909:74,energy efficiency,manag,management,74,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12909:15,performance,memor,memory,15,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12909:67,performance,memor,memory,67,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12909:22,safety,manag,management,22,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12909:74,safety,manag,management,74,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12909:15,usability,memor,memory,15,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12909:67,usability,memor,memory,67,[RF] Modernize memory management in RooFit and RooStats; Modernize memory management in RooStats by using more `std::unique_ptr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12909
https://github.com/root-project/root/pull/12910:50,availability,error,error,50,"[skip-ci] fix an issue with python 3.12; Fix this error:. ```. $ python3.12 build/misc/argparse2help.py. /home/blue/ROOT/master-py312/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12910
https://github.com/root-project/root/pull/12910:76,deployability,build,build,76,"[skip-ci] fix an issue with python 3.12; Fix this error:. ```. $ python3.12 build/misc/argparse2help.py. /home/blue/ROOT/master-py312/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12910
https://github.com/root-project/root/pull/12910:134,deployability,build,build,134,"[skip-ci] fix an issue with python 3.12; Fix this error:. ```. $ python3.12 build/misc/argparse2help.py. /home/blue/ROOT/master-py312/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12910
https://github.com/root-project/root/pull/12910:50,performance,error,error,50,"[skip-ci] fix an issue with python 3.12; Fix this error:. ```. $ python3.12 build/misc/argparse2help.py. /home/blue/ROOT/master-py312/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12910
https://github.com/root-project/root/pull/12910:50,safety,error,error,50,"[skip-ci] fix an issue with python 3.12; Fix this error:. ```. $ python3.12 build/misc/argparse2help.py. /home/blue/ROOT/master-py312/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12910
https://github.com/root-project/root/pull/12910:50,usability,error,error,50,"[skip-ci] fix an issue with python 3.12; Fix this error:. ```. $ python3.12 build/misc/argparse2help.py. /home/blue/ROOT/master-py312/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12910
https://github.com/root-project/root/pull/12911:515,deployability,updat,updated,515,"[PyROOT] Feature to initialise RooWorkspace objects in PyRoot using strings; # This Pull request:. Adds a feature in PyROOT to create new objects in RooWorkspace using a key-value pair, which has the object name as its key and an initialization string as its value. For example, the following snippet creates a gaussian p.d.f. - . ```Python. import ROOT. ws = ROOT.RooWorkspace(""ws""). ws[""gauss""] = ""Gaussian(x[0.0, 10.0], mu[5.0], sigma[2.0, 0.01, 10.0])"". ````. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12911
https://github.com/root-project/root/pull/12911:485,safety,test,tested,485,"[PyROOT] Feature to initialise RooWorkspace objects in PyRoot using strings; # This Pull request:. Adds a feature in PyROOT to create new objects in RooWorkspace using a key-value pair, which has the object name as its key and an initialization string as its value. For example, the following snippet creates a gaussian p.d.f. - . ```Python. import ROOT. ws = ROOT.RooWorkspace(""ws""). ws[""gauss""] = ""Gaussian(x[0.0, 10.0], mu[5.0], sigma[2.0, 0.01, 10.0])"". ````. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12911
https://github.com/root-project/root/pull/12911:515,safety,updat,updated,515,"[PyROOT] Feature to initialise RooWorkspace objects in PyRoot using strings; # This Pull request:. Adds a feature in PyROOT to create new objects in RooWorkspace using a key-value pair, which has the object name as its key and an initialization string as its value. For example, the following snippet creates a gaussian p.d.f. - . ```Python. import ROOT. ws = ROOT.RooWorkspace(""ws""). ws[""gauss""] = ""Gaussian(x[0.0, 10.0], mu[5.0], sigma[2.0, 0.01, 10.0])"". ````. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12911
https://github.com/root-project/root/pull/12911:515,security,updat,updated,515,"[PyROOT] Feature to initialise RooWorkspace objects in PyRoot using strings; # This Pull request:. Adds a feature in PyROOT to create new objects in RooWorkspace using a key-value pair, which has the object name as its key and an initialization string as its value. For example, the following snippet creates a gaussian p.d.f. - . ```Python. import ROOT. ws = ROOT.RooWorkspace(""ws""). ws[""gauss""] = ""Gaussian(x[0.0, 10.0], mu[5.0], sigma[2.0, 0.01, 10.0])"". ````. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12911
https://github.com/root-project/root/pull/12911:485,testability,test,tested,485,"[PyROOT] Feature to initialise RooWorkspace objects in PyRoot using strings; # This Pull request:. Adds a feature in PyROOT to create new objects in RooWorkspace using a key-value pair, which has the object name as its key and an initialization string as its value. For example, the following snippet creates a gaussian p.d.f. - . ```Python. import ROOT. ws = ROOT.RooWorkspace(""ws""). ws[""gauss""] = ""Gaussian(x[0.0, 10.0], mu[5.0], sigma[2.0, 0.01, 10.0])"". ````. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12911
https://github.com/root-project/root/pull/12914:1110,availability,operat,operation,1110,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1718,availability,restor,restore,1718,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:32,deployability,unload,unloading,32,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:239,deployability,depend,dependent,239,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:415,deployability,unload,unloaded,415,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:481,deployability,unload,unloaded,481,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:717,deployability,Unload,Unload,717,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:766,deployability,unload,unloaded,766,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1250,deployability,unload,unload,1250,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1405,deployability,unload,unloaded,1405,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1502,deployability,modul,module,1502,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1573,deployability,modul,module,1573,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1864,deployability,unload,unloading,1864,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:404,energy efficiency,load,loaded,404,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:470,energy efficiency,load,loaded,470,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:670,energy efficiency,load,loading,670,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1125,energy efficiency,load,load,1125,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1144,energy efficiency,load,load,1144,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1462,energy efficiency,load,loaded,1462,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1551,energy efficiency,load,loaded,1551,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1667,energy efficiency,load,loaded,1667,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:239,integrability,depend,dependent,239,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:512,interoperability,share,share,512,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1171,interoperability,registr,registration,1171,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:239,modifiability,depend,dependent,239,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1502,modifiability,modul,module,1502,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1573,modifiability,modul,module,1573,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:404,performance,load,loaded,404,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:470,performance,load,loaded,470,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:670,performance,load,loading,670,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1125,performance,load,load,1125,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1144,performance,load,load,1144,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1462,performance,load,loaded,1462,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1536,performance,memor,memory,1536,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1551,performance,load,loaded,1551,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1598,performance,memor,memory,1598,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1667,performance,load,loaded,1667,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1718,reliability,restor,restore,1718,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:239,safety,depend,dependent,239,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:939,safety,avoid,avoid,939,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1502,safety,modul,module,1502,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1573,safety,modul,module,1573,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:239,testability,depend,dependent,239,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1061,usability,support,supported,1061,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1536,usability,memor,memory,1536,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1598,usability,memor,memory,1598,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12914:1646,usability,close,closed,1646,"v628 Fix dictionary issues when unloading/reloading the same libraries; back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in. addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same. STL collection (this is supported) and we have the following sequence of operation:. 1. load library A. 2. load library B (dictionary registration is ignored as intended). 3. request TClass for STL collection. 4. unload (dclose) library B. 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL. collection to be marked as ""unloaded"" even though it library (A). was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed. from memory on first use and thus if the library was closed and re-opened/loaded. we no longer had the information needed to restore the TClass object corresponding. to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12914
https://github.com/root-project/root/pull/12915:0,deployability,Automat,Automatically,0,"Automatically add `override` to io with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, for example `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12915
https://github.com/root-project/root/pull/12915:69,deployability,contain,contains,69,"Automatically add `override` to io with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, for example `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12915
https://github.com/root-project/root/pull/12915:96,deployability,automat,automatically,96,"Automatically add `override` to io with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, for example `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12915
https://github.com/root-project/root/pull/12915:0,testability,Automat,Automatically,0,"Automatically add `override` to io with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, for example `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12915
https://github.com/root-project/root/pull/12915:96,testability,automat,automatically,96,"Automatically add `override` to io with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this, for example `tree`:. https://github.com/root-project/root/pull/11290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12915
https://github.com/root-project/root/pull/12916:347,availability,failur,failure,347,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:347,deployability,fail,failure,347,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:150,performance,time,times,150,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:347,performance,failur,failure,347,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:347,reliability,fail,failure,347,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:46,safety,test,test,46,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:83,safety,test,tests,83,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:234,safety,test,test,234,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:310,safety,test,test,310,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:296,security,auth,author,296,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:46,testability,test,test,46,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:78,testability,unit,unit,78,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:83,testability,test,tests,83,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:229,testability,unit,unit,229,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:234,testability,test,test,234,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12916:310,testability,test,test,310,"[RF] Disable RooFit multiprocess ProcessTimer test; It's not easy to make the unit tests in `test_ProcessTimer.cxx` always. pass because they compare times spent in different processes that are. not deterministic. Therefore, the unit test is disabled for now. This was suggested by @Zeff020, the author of the test. Here is an example of a random failure:. https://github.com/root-project/root/pull/12000#issuecomment-1377703232. To be backported to v6.28",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12916
https://github.com/root-project/root/pull/12917:122,energy efficiency,Draw,DrawText,122,"[windows] Fix many warnings on Windows; Fix 203 warnings like the following:. ```. TGWin32.h(154,14): warning GEB472421: 'DrawText' overrides a member function but is not marked 'override' [-Winconsistent-missing-override]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12917
https://github.com/root-project/root/pull/12918:183,availability,operat,operator,183,"[GSOC][TMVA][SOFIE] Swish Activation function implemented in the Keras Parser; # This Pull request: Adds a Swish Activation function to the Keras Parser as required, given that swish operator does not exist in ONNX documentation. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12918
https://github.com/root-project/root/pull/12918:303,deployability,updat,updated,303,"[GSOC][TMVA][SOFIE] Swish Activation function implemented in the Keras Parser; # This Pull request: Adds a Swish Activation function to the Keras Parser as required, given that swish operator does not exist in ONNX documentation. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12918
https://github.com/root-project/root/pull/12918:192,reliability,doe,does,192,"[GSOC][TMVA][SOFIE] Swish Activation function implemented in the Keras Parser; # This Pull request: Adds a Swish Activation function to the Keras Parser as required, given that swish operator does not exist in ONNX documentation. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12918
https://github.com/root-project/root/pull/12918:273,safety,test,tested,273,"[GSOC][TMVA][SOFIE] Swish Activation function implemented in the Keras Parser; # This Pull request: Adds a Swish Activation function to the Keras Parser as required, given that swish operator does not exist in ONNX documentation. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12918
https://github.com/root-project/root/pull/12918:303,safety,updat,updated,303,"[GSOC][TMVA][SOFIE] Swish Activation function implemented in the Keras Parser; # This Pull request: Adds a Swish Activation function to the Keras Parser as required, given that swish operator does not exist in ONNX documentation. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12918
https://github.com/root-project/root/pull/12918:303,security,updat,updated,303,"[GSOC][TMVA][SOFIE] Swish Activation function implemented in the Keras Parser; # This Pull request: Adds a Swish Activation function to the Keras Parser as required, given that swish operator does not exist in ONNX documentation. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12918
https://github.com/root-project/root/pull/12918:273,testability,test,tested,273,"[GSOC][TMVA][SOFIE] Swish Activation function implemented in the Keras Parser; # This Pull request: Adds a Swish Activation function to the Keras Parser as required, given that swish operator does not exist in ONNX documentation. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12918
https://github.com/root-project/root/pull/12918:215,usability,document,documentation,215,"[GSOC][TMVA][SOFIE] Swish Activation function implemented in the Keras Parser; # This Pull request: Adds a Swish Activation function to the Keras Parser as required, given that swish operator does not exist in ONNX documentation. ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12918
https://github.com/root-project/root/pull/12921:571,availability,avail,available,571,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:298,deployability,Automat,Automatic,298,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:14,integrability,Batch,BatchMode,14,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:85,integrability,batch,batch,85,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:389,integrability,Batch,BatchMode,389,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:271,interoperability,share,shared,271,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:5,modifiability,Refact,Refactor,5,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:402,modifiability,refact,refactored,402,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:5,performance,Refactor,Refactor,5,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:14,performance,Batch,BatchMode,14,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:85,performance,batch,batch,85,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:389,performance,Batch,BatchMode,389,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:402,performance,refactor,refactored,402,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:571,reliability,availab,available,571,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:571,safety,avail,available,571,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:571,security,availab,available,571,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/pull/12921:298,testability,Automat,Automatic,298,"[RF] Refactor BatchMode likelihood creation code; When creating a likelihood for the batch mode, there are two distinct steps:. 1. Create the computation graph for the likelihood. 2. Instantiate a RooFitDriver instance to evaluate the likelihood. The first step will the shared with the new RooFit Automatic Differentiation (AD) backend. To make this easy, the likelihood creation for the BatchMode is refactored such that both steps listed above don't happen in the same function anymore. After this PR, it will only require small changes to make the codegen+AD backend available to `RooAbsPdf::createNLL()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12921
https://github.com/root-project/root/issues/12922:461,availability,operat,operating,461,"Add flag option ""--web=off"" for rootbrowse macro; ### Explain what you would like to see improved. Add flag option ""--web=off"" for rootbrowse macro. ### Share how it could be improved. _No response_. ### How to reproduce? Would be nice if the following would be possible:. ```bash. rootbrowse --web=off myfile.root. ```. analogous to. ```bash. root --web=off. [0] new TBrowser. ```. ### ROOT version. 6.28/00. ### How did you install ROOT? cvmfs LCG. ### Which operating system are you using? Centos7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12922
https://github.com/root-project/root/issues/12922:392,deployability,version,version,392,"Add flag option ""--web=off"" for rootbrowse macro; ### Explain what you would like to see improved. Add flag option ""--web=off"" for rootbrowse macro. ### Share how it could be improved. _No response_. ### How to reproduce? Would be nice if the following would be possible:. ```bash. rootbrowse --web=off myfile.root. ```. analogous to. ```bash. root --web=off. [0] new TBrowser. ```. ### ROOT version. 6.28/00. ### How did you install ROOT? cvmfs LCG. ### Which operating system are you using? Centos7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12922
https://github.com/root-project/root/issues/12922:426,deployability,instal,install,426,"Add flag option ""--web=off"" for rootbrowse macro; ### Explain what you would like to see improved. Add flag option ""--web=off"" for rootbrowse macro. ### Share how it could be improved. _No response_. ### How to reproduce? Would be nice if the following would be possible:. ```bash. rootbrowse --web=off myfile.root. ```. analogous to. ```bash. root --web=off. [0] new TBrowser. ```. ### ROOT version. 6.28/00. ### How did you install ROOT? cvmfs LCG. ### Which operating system are you using? Centos7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12922
https://github.com/root-project/root/issues/12922:392,integrability,version,version,392,"Add flag option ""--web=off"" for rootbrowse macro; ### Explain what you would like to see improved. Add flag option ""--web=off"" for rootbrowse macro. ### Share how it could be improved. _No response_. ### How to reproduce? Would be nice if the following would be possible:. ```bash. rootbrowse --web=off myfile.root. ```. analogous to. ```bash. root --web=off. [0] new TBrowser. ```. ### ROOT version. 6.28/00. ### How did you install ROOT? cvmfs LCG. ### Which operating system are you using? Centos7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12922
https://github.com/root-project/root/issues/12922:153,interoperability,Share,Share,153,"Add flag option ""--web=off"" for rootbrowse macro; ### Explain what you would like to see improved. Add flag option ""--web=off"" for rootbrowse macro. ### Share how it could be improved. _No response_. ### How to reproduce? Would be nice if the following would be possible:. ```bash. rootbrowse --web=off myfile.root. ```. analogous to. ```bash. root --web=off. [0] new TBrowser. ```. ### ROOT version. 6.28/00. ### How did you install ROOT? cvmfs LCG. ### Which operating system are you using? Centos7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12922
https://github.com/root-project/root/issues/12922:392,modifiability,version,version,392,"Add flag option ""--web=off"" for rootbrowse macro; ### Explain what you would like to see improved. Add flag option ""--web=off"" for rootbrowse macro. ### Share how it could be improved. _No response_. ### How to reproduce? Would be nice if the following would be possible:. ```bash. rootbrowse --web=off myfile.root. ```. analogous to. ```bash. root --web=off. [0] new TBrowser. ```. ### ROOT version. 6.28/00. ### How did you install ROOT? cvmfs LCG. ### Which operating system are you using? Centos7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12922
https://github.com/root-project/root/issues/12922:517,testability,context,context,517,"Add flag option ""--web=off"" for rootbrowse macro; ### Explain what you would like to see improved. Add flag option ""--web=off"" for rootbrowse macro. ### Share how it could be improved. _No response_. ### How to reproduce? Would be nice if the following would be possible:. ```bash. rootbrowse --web=off myfile.root. ```. analogous to. ```bash. root --web=off. [0] new TBrowser. ```. ### ROOT version. 6.28/00. ### How did you install ROOT? cvmfs LCG. ### Which operating system are you using? Centos7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12922
https://github.com/root-project/root/pull/12923:8,energy efficiency,Reduc,Reduce,8,[v6.28] Reduce usage of locks by TPluginHandler; Backport of #11631.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12923
https://github.com/root-project/root/pull/12923:24,performance,lock,locks,24,[v6.28] Reduce usage of locks by TPluginHandler; Backport of #11631.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12923
https://github.com/root-project/root/pull/12923:24,security,lock,locks,24,[v6.28] Reduce usage of locks by TPluginHandler; Backport of #11631.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12923
https://github.com/root-project/root/pull/12924:41,interoperability,prox,proxies,41,"[RF] Add methods to create owning RooFit proxies via `std::unique_ptr`; Add methods to create owning RooFit proxies via `std::unique_ptr`. At the same time, deprecate the constructors with manual memory. ownership.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12924
https://github.com/root-project/root/pull/12924:108,interoperability,prox,proxies,108,"[RF] Add methods to create owning RooFit proxies via `std::unique_ptr`; Add methods to create owning RooFit proxies via `std::unique_ptr`. At the same time, deprecate the constructors with manual memory. ownership.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12924
https://github.com/root-project/root/pull/12924:151,performance,time,time,151,"[RF] Add methods to create owning RooFit proxies via `std::unique_ptr`; Add methods to create owning RooFit proxies via `std::unique_ptr`. At the same time, deprecate the constructors with manual memory. ownership.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12924
https://github.com/root-project/root/pull/12924:196,performance,memor,memory,196,"[RF] Add methods to create owning RooFit proxies via `std::unique_ptr`; Add methods to create owning RooFit proxies via `std::unique_ptr`. At the same time, deprecate the constructors with manual memory. ownership.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12924
https://github.com/root-project/root/pull/12924:196,usability,memor,memory,196,"[RF] Add methods to create owning RooFit proxies via `std::unique_ptr`; Add methods to create owning RooFit proxies via `std::unique_ptr`. At the same time, deprecate the constructors with manual memory. ownership.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12924
https://github.com/root-project/root/pull/12925:1036,availability,failur,failure,1036,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1036,deployability,fail,failure,1036,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:472,energy efficiency,model,model,472,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1165,energy efficiency,green,green,1165,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1186,energy efficiency,cpu,cpu,1186,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:31,integrability,Batch,BatchMode,31,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1074,integrability,Batch,BatchMode,1074,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1175,integrability,Batch,BatchMode,1175,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:135,interoperability,specif,specific,135,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:294,interoperability,share,share,294,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:644,modifiability,paramet,parameters,644,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:743,modifiability,paramet,parameters,743,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:911,modifiability,paramet,parameters,911,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:934,modifiability,scal,scalar,934,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:979,modifiability,scal,scalar,979,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:31,performance,Batch,BatchMode,31,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:62,performance,time,time,62,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:175,performance,cach,cached,175,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:973,performance,cach,cache,973,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1036,performance,failur,failure,1036,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1074,performance,Batch,BatchMode,1074,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1175,performance,Batch,BatchMode,1175,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1186,performance,cpu,cpu,1186,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1036,reliability,fail,failure,1036,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:627,safety,except,except,627,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1154,safety,compl,completely,1154,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:150,security,token,token,150,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:472,security,model,model,472,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:728,security,token,tokens,728,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:1154,security,compl,completely,1154,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:5,usability,Support,Support,5,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12925:378,usability,support,supported,378,"[RF] Support multiple NLL with BatchMode existing at the same time; The RooFitDriver mutates the RooAbsArgs it evaluates by setting a. specific index token to quickly look up cached information for a given. RooAbsArg. Because of this, it's not possible to evaluate two computation graphs. that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is. often happens that different likelihoods based on the same model are. instantiated. The key to the solution in this commit is the insight that for each. likelihood, almost the full compute graph is cloned anyway, *except* for. the parameters. Therefore, the solution proposed in this commit is to. not set the data tokens for the parameters and not fill the data map. with their values. Instead, when querying their values, they are just. retrieved from the object itself. This is possible because parameters. are always scalar, and the RooAbsReal can already cache scalar members. in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12925
https://github.com/root-project/root/pull/12926:474,safety,avoid,avoid,474,"PCA : Appropriately handle histogram bins for few data points; When using option ""x"" for TPrincipal::MakeHistograms(), the histogram is made with the number of bins as calculated by:. `Int_t xbins = fNumberOfDataPoints/100;`. If the number of data points is less than 100, this will try to make a histogram with 0 bins. The code still functions, as TH1 itself compensates by setting the number of bins to 1, and issuing a warning. But clearly TPrincipal could be smarter to avoid the unnecessary / unhelpful warning. The same happens for the calculation of `dbins` with the ""d"" option. Sidenote: this was a non-urgent issue I raised 7 years ago, but if no one else has been complaining, it's clearly a low priority ;-). https://sft.its.cern.ch/jira/browse/ROOT-8238. -Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12926
https://github.com/root-project/root/pull/12926:674,safety,compl,complaining,674,"PCA : Appropriately handle histogram bins for few data points; When using option ""x"" for TPrincipal::MakeHistograms(), the histogram is made with the number of bins as calculated by:. `Int_t xbins = fNumberOfDataPoints/100;`. If the number of data points is less than 100, this will try to make a histogram with 0 bins. The code still functions, as TH1 itself compensates by setting the number of bins to 1, and issuing a warning. But clearly TPrincipal could be smarter to avoid the unnecessary / unhelpful warning. The same happens for the calculation of `dbins` with the ""d"" option. Sidenote: this was a non-urgent issue I raised 7 years ago, but if no one else has been complaining, it's clearly a low priority ;-). https://sft.its.cern.ch/jira/browse/ROOT-8238. -Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12926
https://github.com/root-project/root/pull/12926:674,security,compl,complaining,674,"PCA : Appropriately handle histogram bins for few data points; When using option ""x"" for TPrincipal::MakeHistograms(), the histogram is made with the number of bins as calculated by:. `Int_t xbins = fNumberOfDataPoints/100;`. If the number of data points is less than 100, this will try to make a histogram with 0 bins. The code still functions, as TH1 itself compensates by setting the number of bins to 1, and issuing a warning. But clearly TPrincipal could be smarter to avoid the unnecessary / unhelpful warning. The same happens for the calculation of `dbins` with the ""d"" option. Sidenote: this was a non-urgent issue I raised 7 years ago, but if no one else has been complaining, it's clearly a low priority ;-). https://sft.its.cern.ch/jira/browse/ROOT-8238. -Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12926
https://github.com/root-project/root/pull/12926:435,usability,clear,clearly,435,"PCA : Appropriately handle histogram bins for few data points; When using option ""x"" for TPrincipal::MakeHistograms(), the histogram is made with the number of bins as calculated by:. `Int_t xbins = fNumberOfDataPoints/100;`. If the number of data points is less than 100, this will try to make a histogram with 0 bins. The code still functions, as TH1 itself compensates by setting the number of bins to 1, and issuing a warning. But clearly TPrincipal could be smarter to avoid the unnecessary / unhelpful warning. The same happens for the calculation of `dbins` with the ""d"" option. Sidenote: this was a non-urgent issue I raised 7 years ago, but if no one else has been complaining, it's clearly a low priority ;-). https://sft.its.cern.ch/jira/browse/ROOT-8238. -Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12926
https://github.com/root-project/root/pull/12926:692,usability,clear,clearly,692,"PCA : Appropriately handle histogram bins for few data points; When using option ""x"" for TPrincipal::MakeHistograms(), the histogram is made with the number of bins as calculated by:. `Int_t xbins = fNumberOfDataPoints/100;`. If the number of data points is less than 100, this will try to make a histogram with 0 bins. The code still functions, as TH1 itself compensates by setting the number of bins to 1, and issuing a warning. But clearly TPrincipal could be smarter to avoid the unnecessary / unhelpful warning. The same happens for the calculation of `dbins` with the ""d"" option. Sidenote: this was a non-urgent issue I raised 7 years ago, but if no one else has been complaining, it's clearly a low priority ;-). https://sft.its.cern.ch/jira/browse/ROOT-8238. -Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12926
https://github.com/root-project/root/pull/12927:344,deployability,build,builds,344,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:373,deployability,automat,automatic,373,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:390,deployability,manag,management,390,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:390,energy efficiency,manag,management,390,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:61,integrability,Wrap,Wrap,61,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:162,performance,memor,memory,162,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:383,performance,memor,memory,383,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:390,safety,manag,management,390,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:373,testability,automat,automatic,373,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:162,usability,memor,memory,162,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:355,usability,User,Users,355,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:361,usability,learn,learn,361,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12927:383,usability,memor,memory,383,"[RF] Use `std::unique_ptr` in RooFit and RooStats tutorials; Wrap owning pointers in the RooFit tutorials in `std::unique_ptr`. This has three benefits:. 1. Less memory leaks in tutorials (`delete` was almost never done). 2. Tutorials would also run if the `RooFit::OwningPtr` were to be defined at `std::unique_ptr`, which is useful for debug builds. 3. Users learn about automatic memory management correctly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12927
https://github.com/root-project/root/pull/12928:623,availability,down,down,623,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1733,availability,failur,failures,1733,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1890,availability,error,error,1890,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1733,deployability,fail,failures,1733,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:674,integrability,Batch,BatchMode,674,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1771,integrability,Batch,BatchMode,1771,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1801,integrability,event,eventually,1801,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1080,interoperability,specif,specify,1080,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:674,performance,Batch,BatchMode,674,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1733,performance,failur,failures,1733,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1771,performance,Batch,BatchMode,1771,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1890,performance,error,error,1890,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:932,reliability,doe,doesn,932,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1137,reliability,doe,doesn,1137,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1733,reliability,fail,failures,1733,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1890,safety,error,error,1890,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1072,testability,simpl,simply,1072,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1072,usability,simpl,simply,1072,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1539,usability,help,helper,1539,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12928:1890,usability,error,error,1890,"[RF] New function for server changing without setting attributes; If one wants to replace some servers of a RooAbsArg with. other servers, this is the the only option you have:. ```c++. bool RooAbsArg::redirectServers(const RooAbsCollection& newSetOrig,. bool mustReplaceAll, bool nameChange,. bool isRecursionStep). ```. That's not so great, because if the new servers have different names,. thes old names must be set as the `""ORIGNAME:<myname>""` attribute for. the function to know which servers should be replaced. These attributes are generally not reset, and this mutation of the. server attributes can cause trouble down the line. Notably, this causes trouble in the BatchMode when compiling the. computation graph for a given normalization set. One single new server. might replace differently-named original servers. In that case, the new. servers get *two* ""ORIGNAME:"" attributes and the the `redirectServers()`. function doesn't know what to do. Also, it's inefficient because of the string matching. For this reason, a new overload is suggested, where one can simply. specify what should replace what in a lookup map, and it doesn't matter. if the names are different:. ```c++. bool RooAbsArg::redirectServers(. std::unordered_map<RooAbsArg *, RooAbsArg *> const &replacements. ). ```. The implementation of `redirectServers()` calls. `RooAbsProxy::changePointer()`, for which such a new overload also had. to be added. Using the new `RooAbsArg::redirectServers()` overload that takes a. lookup map of server replacements, the helper class that compiles the computation graph for a given normalization set can be. improved such that it's not necessary to set the `""ORIGNAME:""`. attributes of new servers. This fixes some failures in the RooFit tutorials with BatchMode where. some servers eventually aggregated multiple `""ORIGNAME:""` attributes,. causing `redirectServers()` to error out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12928
https://github.com/root-project/root/pull/12929:152,interoperability,specif,specification,152,[DF] Use FromSpec in df106_HiggstoFourLeptons.py tutorial; Now one RDF is used instead of a number of individual ones. and users can see what a dataset specification file looks like. and how to access the metadata information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12929
https://github.com/root-project/root/pull/12929:194,security,access,access,194,[DF] Use FromSpec in df106_HiggstoFourLeptons.py tutorial; Now one RDF is used instead of a number of individual ones. and users can see what a dataset specification file looks like. and how to access the metadata information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12929
https://github.com/root-project/root/pull/12929:123,usability,user,users,123,[DF] Use FromSpec in df106_HiggstoFourLeptons.py tutorial; Now one RDF is used instead of a number of individual ones. and users can see what a dataset specification file looks like. and how to access the metadata information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12929
https://github.com/root-project/root/pull/12930:0,deployability,Automat,Automatically,0,"Automatically add `override` to geom with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12930
https://github.com/root-project/root/pull/12930:71,deployability,contain,contains,71,"Automatically add `override` to geom with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12930
https://github.com/root-project/root/pull/12930:98,deployability,automat,automatically,98,"Automatically add `override` to geom with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12930
https://github.com/root-project/root/pull/12930:0,testability,Automat,Automatically,0,"Automatically add `override` to geom with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12930
https://github.com/root-project/root/pull/12930:98,testability,automat,automatically,98,"Automatically add `override` to geom with clang-tidy; This commit only contains changes that were automatically generated by `clang-tidy`, plus replacing `ClassDef` with `ClassDefOverride` where appropriate. Several directories in the ROOT repo were already treated like this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12930
https://github.com/root-project/root/pull/12931:27,deployability,log,logic,27,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:789,deployability,Updat,Update,789,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:168,energy efficiency,draw,drawing,168,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:290,interoperability,conflict,conflicts,290,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:230,performance,time,time,230,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:401,reliability,doe,does,401,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:27,safety,log,logic,27,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:76,safety,compl,complex,76,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:284,safety,avoid,avoid,284,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:789,safety,Updat,Update,789,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:27,security,log,logic,27,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:76,security,compl,complex,76,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:579,security,control,control,579,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:789,security,Updat,Update,789,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:27,testability,log,logic,27,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:579,testability,control,control,579,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:235,usability,user,user,235,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:349,usability,menu,menu,349,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:357,usability,statu,status,357,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:453,usability,menu,menu,453,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:604,usability,Support,Support,604,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:692,usability,widget,widget,692,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/pull/12931:742,usability,widget,widget,742,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6; 1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12931
https://github.com/root-project/root/issues/12932:464,availability,operat,operating,464,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:176,deployability,contain,contains,176,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:240,deployability,automat,automatically,240,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:402,deployability,version,version,402,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:435,deployability,instal,install,435,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:120,energy efficiency,Current,Currently,120,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:402,integrability,version,version,402,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:49,interoperability,specif,specifying,49,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:317,interoperability,Share,Share,317,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:402,modifiability,version,version,402,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:240,testability,automat,automatically,240,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:516,testability,context,context,516,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/issues/12932:258,usability,user,users,258,"Create RDataFrame from TTree or RNTuple, without specifying which one; ### Explain what you would like to see improved. Currently, RDataFrame needs to be told whether the file contains a TTree or an RNTuple. We want RDF figure this one out automatically, so users can use the same code, whether TTree or RNTuple. ### Share how it could be improved. _No response_. ### How to reproduce? Dunno. ### ROOT version. master. ### How did you install ROOT? n/a. ### Which operating system are you using? Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12932
https://github.com/root-project/root/pull/12933:212,deployability,log,logic,212,"[webgeom] handle multiple connections to widget; 1. Provide in RWebWindow methods to correctly work with connections, provided by master. 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic. 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12933
https://github.com/root-project/root/pull/12933:151,integrability,pub,public,151,"[webgeom] handle multiple connections to widget; 1. Provide in RWebWindow methods to correctly work with connections, provided by master. 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic. 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12933
https://github.com/root-project/root/pull/12933:212,safety,log,logic,212,"[webgeom] handle multiple connections to widget; 1. Provide in RWebWindow methods to correctly work with connections, provided by master. 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic. 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12933
https://github.com/root-project/root/pull/12933:212,security,log,logic,212,"[webgeom] handle multiple connections to widget; 1. Provide in RWebWindow methods to correctly work with connections, provided by master. 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic. 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12933
https://github.com/root-project/root/pull/12933:197,testability,simpl,simplify,197,"[webgeom] handle multiple connections to widget; 1. Provide in RWebWindow methods to correctly work with connections, provided by master. 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic. 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12933
https://github.com/root-project/root/pull/12933:212,testability,log,logic,212,"[webgeom] handle multiple connections to widget; 1. Provide in RWebWindow methods to correctly work with connections, provided by master. 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic. 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12933
https://github.com/root-project/root/pull/12933:41,usability,widget,widget,41,"[webgeom] handle multiple connections to widget; 1. Provide in RWebWindow methods to correctly work with connections, provided by master. 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic. 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12933
https://github.com/root-project/root/pull/12933:197,usability,simpl,simplify,197,"[webgeom] handle multiple connections to widget; 1. Provide in RWebWindow methods to correctly work with connections, provided by master. 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic. 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12933
https://github.com/root-project/root/pull/12933:279,usability,widget,widget,279,"[webgeom] handle multiple connections to widget; 1. Provide in RWebWindow methods to correctly work with connections, provided by master. 2. Introduce public `RWebWindow::GetConnections()` method, simplify reply logic. 3. Handle reply to multiple clients from geometry hierarchy widget - change top or change search should be handled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12933
https://github.com/root-project/root/pull/12934:123,reliability,doe,doesn,123,"[RF] Remove `rf507_debugtools` tutorial and other improvements; The `rf507_debugtools` tutorial shows a functionality that doesn't work,. so it should be removed. The only way to get something useful out of. this tutorial is to recompile ROOT, changing the preprocessor macros. `TRACRE_CREATE` and `TRACE_DESTROY` to be defined in `RooTrace.h`. That's way to advanced for the audience of the tutorials. The usage. example from the tutorial is moved to the reference guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12934
https://github.com/root-project/root/pull/12934:466,usability,guid,guide,466,"[RF] Remove `rf507_debugtools` tutorial and other improvements; The `rf507_debugtools` tutorial shows a functionality that doesn't work,. so it should be removed. The only way to get something useful out of. this tutorial is to recompile ROOT, changing the preprocessor macros. `TRACRE_CREATE` and `TRACE_DESTROY` to be defined in `RooTrace.h`. That's way to advanced for the audience of the tutorials. The usage. example from the tutorial is moved to the reference guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12934
https://github.com/root-project/root/issues/12935:177,availability,fault,fault,177,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:327,availability,fault,fault-with-,327,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:486,availability,error,error,486,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:503,availability,state,stated,503,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:597,availability,fault,fault-with-,597,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:993,availability,error,error,993,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1024,availability,fault,fault,1024,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1263,availability,error,errors,1263,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1238,deployability,updat,updates,1238,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:177,energy efficiency,fault,fault,177,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:327,energy efficiency,fault,fault-with-,327,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:597,energy efficiency,fault,fault-with-,597,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1024,energy efficiency,fault,fault,1024,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:503,integrability,state,stated,503,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1228,modifiability,paramet,parameter,1228,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:177,performance,fault,fault,177,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:327,performance,fault,fault-with-,327,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:486,performance,error,error,486,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:597,performance,fault,fault-with-,597,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:993,performance,error,error,993,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1024,performance,fault,fault,1024,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1263,performance,error,errors,1263,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:177,reliability,fault,fault,177,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:327,reliability,fault,fault-with-,327,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:597,reliability,fault,fault-with-,597,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1024,reliability,fault,fault,1024,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:177,safety,fault,fault,177,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:327,safety,fault,fault-with-,327,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:486,safety,error,error,486,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:597,safety,fault,fault-with-,597,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:993,safety,error,error,993,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1024,safety,fault,fault,1024,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1238,safety,updat,updates,1238,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1263,safety,error,errors,1263,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1238,security,updat,updates,1238,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1046,testability,context,context,1046,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:486,usability,error,error,486,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:993,usability,error,error,993,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/issues/12935:1263,usability,error,errors,1263,"[RF] Global correlation coefficients after SumW2Error; ### Is your feature request related to a problem? Please describe. As of 6.28/00, `RooFitResult::globalCorr` causes a seg fault if `SumW2Error` was used in the fit. First reported in the forum [here](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/). ### Describe the solution you'd like. `RooFitResult::globalCorr` should return the global correlation coefficient using the corrected error matrix. As stated in the [forum](https://root-forum.cern.ch/t/extracting-global-correlation-causes-a-seg-fault-with-sumw2error/55138/3), the global correlation coefficients are defined as. $`\rho_k^2 = 1 - [V_{kk} * (V^{-1})_{kk}]^{-1}`$,. so the corrected correlation coefficients could be defined as. $`(\rho_{corr})_k^2 = 1 - [(V_{corr})_{kk} * (V_{corr}^{-1})_{kk}]^{-1}`$. ### Describe alternatives you've considered. At the very least, calling `RooFitResult::globalCorr` should raise a sensible error instead of causing a seg fault. ### Additional context. More generally, it would be nice if RooFit printed the corrected matrix instead of (or after) the uncorrected one at the end of the fit. At present, one sees a long list of parameter updates printed, but the errors and correlations in the final one printed differ from those stored in the `RooFitResult`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12935
https://github.com/root-project/root/pull/12936:308,availability,reliab,reliably,308,"[RF] Improve Copy Constructor of HypoTestResult; While I believe this class and others probably could do with a big rework, in my attempts so far to find ways to use them in their current form I have stumbled across some very annoying behaviours -- this PR fixes one of these: that the results wouldn't copy reliably at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12936
https://github.com/root-project/root/pull/12936:180,energy efficiency,current,current,180,"[RF] Improve Copy Constructor of HypoTestResult; While I believe this class and others probably could do with a big rework, in my attempts so far to find ways to use them in their current form I have stumbled across some very annoying behaviours -- this PR fixes one of these: that the results wouldn't copy reliably at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12936
https://github.com/root-project/root/pull/12936:308,reliability,reliab,reliably,308,"[RF] Improve Copy Constructor of HypoTestResult; While I believe this class and others probably could do with a big rework, in my attempts so far to find ways to use them in their current form I have stumbled across some very annoying behaviours -- this PR fixes one of these: that the results wouldn't copy reliably at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12936
https://github.com/root-project/root/pull/12936:235,usability,behavi,behaviours,235,"[RF] Improve Copy Constructor of HypoTestResult; While I believe this class and others probably could do with a big rework, in my attempts so far to find ways to use them in their current form I have stumbled across some very annoying behaviours -- this PR fixes one of these: that the results wouldn't copy reliably at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12936
https://github.com/root-project/root/pull/12937:21,deployability,version,version,21,[webgui] support qt6 version when create embedding qualifier [skip-ci]; Backport from master. Let use newest qtweb tutorial also with 6.28 branch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12937
https://github.com/root-project/root/pull/12937:21,integrability,version,version,21,[webgui] support qt6 version when create embedding qualifier [skip-ci]; Backport from master. Let use newest qtweb tutorial also with 6.28 branch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12937
https://github.com/root-project/root/pull/12937:21,modifiability,version,version,21,[webgui] support qt6 version when create embedding qualifier [skip-ci]; Backport from master. Let use newest qtweb tutorial also with 6.28 branch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12937
https://github.com/root-project/root/pull/12937:9,usability,support,support,9,[webgui] support qt6 version when create embedding qualifier [skip-ci]; Backport from master. Let use newest qtweb tutorial also with 6.28 branch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12937
https://github.com/root-project/root/pull/12939:120,energy efficiency,draw,drawn-also-for-negative-y-values,120,[jsroot] 7.3.x 2/06/2023 [skip-ci]; Fixes issue reported on forum:. https://root-forum.cern.ch/t/horizontal-line-at-y-0-drawn-also-for-negative-y-values/55156. Plus several small fixes in Tree::Draw,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12939
https://github.com/root-project/root/pull/12939:194,energy efficiency,Draw,Draw,194,[jsroot] 7.3.x 2/06/2023 [skip-ci]; Fixes issue reported on forum:. https://root-forum.cern.ch/t/horizontal-line-at-y-0-drawn-also-for-negative-y-values/55156. Plus several small fixes in Tree::Draw,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12939
https://github.com/root-project/root/issues/12940:2212,availability,operat,operating,2212,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:662,deployability,build,build,662,"Multithreading problem with Minuit2+RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When root is built with minuit2_omp=on then using RooFit with Minuit2 is broken out of the box because minuit2 multithreads the objective function evaluation, where the objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ =",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:2146,deployability,version,version,2146,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:2180,deployability,instal,install,2180,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1474,energy efficiency,model,model,1474,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1555,energy efficiency,model,model,1555,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1921,energy efficiency,model,model,1921,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1948,energy efficiency,Draw,Draw,1948,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:2146,integrability,version,version,2146,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:691,interoperability,standard,standard,691,"Multithreading problem with Minuit2+RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When root is built with minuit2_omp=on then using RooFit with Minuit2 is broken out of the box because minuit2 multithreads the objective function evaluation, where the objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ =",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:607,modifiability,variab,variable,607,"Multithreading problem with Minuit2+RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When root is built with minuit2_omp=on then using RooFit with Minuit2 is broken out of the box because minuit2 multithreads the objective function evaluation, where the objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ =",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:705,modifiability,pac,package,705,"Multithreading problem with Minuit2+RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When root is built with minuit2_omp=on then using RooFit with Minuit2 is broken out of the box because minuit2 multithreads the objective function evaluation, where the objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ =",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1503,modifiability,Exten,Extended,1503,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1515,modifiability,exten,extend,1515,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1587,modifiability,Exten,Extended,1587,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:2146,modifiability,version,version,2146,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:2194,modifiability,pac,pacman,2194,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:760,performance,time,time,760,"Multithreading problem with Minuit2+RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When root is built with minuit2_omp=on then using RooFit with Minuit2 is broken out of the box because minuit2 multithreads the objective function evaluation, where the objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ =",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:363,safety,safe,safe,363,"Multithreading problem with Minuit2+RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When root is built with minuit2_omp=on then using RooFit with Minuit2 is broken out of the box because minuit2 multithreads the objective function evaluation, where the objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ =",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1474,security,model,model,1474,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1555,security,model,model,1555,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1921,security,model,model,1921,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:2271,testability,context,context,2271,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:394,usability,behavi,behaviour,394,"Multithreading problem with Minuit2+RooFit; ### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When root is built with minuit2_omp=on then using RooFit with Minuit2 is broken out of the box because minuit2 multithreads the objective function evaluation, where the objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ =",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1617,usability,Minim,Minimizer,1617,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/issues/12940:1799,usability,statu,status,1799,"objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour? Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce? In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT. import time. def gaussian_minuit2():. """""". """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130). axis.setBins(100). axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91. sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",. axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA). data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91. sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",. axis, mu2, sigma2). expected_num = ROOT.RooRealVar(. ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(. ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, . ROOT.RooFit.Extended(True), . ROOT.RooFit.Minimizer(""Minuit2""),. ROOT.RooFit.Save(True), . ROOT.RooFit.PrintLevel(0)). print(""***********************************""). res2.Print(). res2.correlationMatrix().Print(). print(res2.status()). print(res2.covQual()). '''. c = ROOT.TCanvas(). c.cd(). frame = axis.frame(Title=""Title""). data.plotOn(frame). model.plotOn(frame). frame.Draw(). c.SaveAs(""gaussian.png""). '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerator().SetSeed(42). gaussian_minuit2(). print(ROOT.RooRandom.randomGenerator().GetSeed()). ```. ### ROOT version. 6.28/04. ### How did you install ROOT? pacman. ### Which operating system are you using? Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12940
https://github.com/root-project/root/pull/12941:47,availability,Operat,Operator,47,[GSOC][TMVA][SOFIE] Implemented the Range ONNX Operator in SOFIE; # This Pull request: Implements the Range ONNX Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12941
https://github.com/root-project/root/pull/12941:113,availability,Operat,Operator,113,[GSOC][TMVA][SOFIE] Implemented the Range ONNX Operator in SOFIE; # This Pull request: Implements the Range ONNX Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12941
https://github.com/root-project/root/pull/12941:174,deployability,updat,updated,174,[GSOC][TMVA][SOFIE] Implemented the Range ONNX Operator in SOFIE; # This Pull request: Implements the Range ONNX Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12941
https://github.com/root-project/root/pull/12941:144,safety,test,tested,144,[GSOC][TMVA][SOFIE] Implemented the Range ONNX Operator in SOFIE; # This Pull request: Implements the Range ONNX Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12941
https://github.com/root-project/root/pull/12941:174,safety,updat,updated,174,[GSOC][TMVA][SOFIE] Implemented the Range ONNX Operator in SOFIE; # This Pull request: Implements the Range ONNX Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12941
https://github.com/root-project/root/pull/12941:174,security,updat,updated,174,[GSOC][TMVA][SOFIE] Implemented the Range ONNX Operator in SOFIE; # This Pull request: Implements the Range ONNX Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12941
https://github.com/root-project/root/pull/12941:144,testability,test,tested,144,[GSOC][TMVA][SOFIE] Implemented the Range ONNX Operator in SOFIE; # This Pull request: Implements the Range ONNX Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12941
https://github.com/root-project/root/pull/12942:30,availability,Operat,Operator,30,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:133,availability,Operat,Operator,133,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:223,deployability,updat,updated,223,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:79,safety,test,tests,79,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:165,safety,test,tests,165,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:193,safety,test,tested,193,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:223,safety,updat,updated,223,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:223,security,updat,updated,223,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:74,testability,unit,unit,74,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:79,testability,test,tests,79,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:165,testability,test,tests,165,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12942:193,testability,test,tested,193,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests; # This Pull request: Implemented the TopK ONNX Operator with the corresponding tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12942
https://github.com/root-project/root/pull/12945:29,availability,Operat,Operator,29,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:125,availability,Operat,Operator,125,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:20,deployability,Log,Log,20,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:116,deployability,Log,Log,116,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:229,deployability,updat,updated,229,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:20,safety,Log,Log,20,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:78,safety,test,tests,78,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:116,safety,Log,Log,116,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:171,safety,test,tests,171,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:199,safety,test,tested,199,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:229,safety,updat,updated,229,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:20,security,Log,Log,20,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:116,security,Log,Log,116,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:229,security,updat,updated,229,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:20,testability,Log,Log,20,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:73,testability,unit,unit,73,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:78,testability,test,tests,78,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:116,testability,Log,Log,116,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:166,testability,unit,unit,166,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:171,testability,test,tests,171,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12945:199,testability,test,tested,199,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests; # This Pull request:. Adds the Log ONNX Operator to SOFIE with its corresponding unit tests. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12945
https://github.com/root-project/root/pull/12946:152,deployability,updat,updated,152,[ci] Upload TestResults.xml also for Windows. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12946
https://github.com/root-project/root/pull/12946:24,interoperability,xml,xml,24,[ci] Upload TestResults.xml also for Windows. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12946
https://github.com/root-project/root/pull/12946:12,safety,Test,TestResults,12,[ci] Upload TestResults.xml also for Windows. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12946
https://github.com/root-project/root/pull/12946:122,safety,test,tested,122,[ci] Upload TestResults.xml also for Windows. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12946
https://github.com/root-project/root/pull/12946:152,safety,updat,updated,152,[ci] Upload TestResults.xml also for Windows. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12946
https://github.com/root-project/root/pull/12946:152,security,updat,updated,152,[ci] Upload TestResults.xml also for Windows. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12946
https://github.com/root-project/root/pull/12946:12,testability,Test,TestResults,12,[ci] Upload TestResults.xml also for Windows. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12946
https://github.com/root-project/root/pull/12946:122,testability,test,tested,122,[ci] Upload TestResults.xml also for Windows. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12946
https://github.com/root-project/root/pull/12948:251,availability,sli,slightly,251,"[ntuple] Add support for `std::set` fields; This PR adds `std::set` fields. For type-erased fields, we use virtual collection proxies. This already implemented for `RCollectionClassField` fields, but reading from disk for associative containers works slightly different. Therefore, a `RProxiedCollectionField` class is introduced that takes care of all proxy-related implementation and can be used for custom collections, and `RSetField` which inherits from this and specializes for `std::set` (and other related STL collections that will be addressed in a follow-up PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12948
https://github.com/root-project/root/pull/12948:234,deployability,contain,containers,234,"[ntuple] Add support for `std::set` fields; This PR adds `std::set` fields. For type-erased fields, we use virtual collection proxies. This already implemented for `RCollectionClassField` fields, but reading from disk for associative containers works slightly different. Therefore, a `RProxiedCollectionField` class is introduced that takes care of all proxy-related implementation and can be used for custom collections, and `RSetField` which inherits from this and specializes for `std::set` (and other related STL collections that will be addressed in a follow-up PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12948
https://github.com/root-project/root/pull/12948:126,interoperability,prox,proxies,126,"[ntuple] Add support for `std::set` fields; This PR adds `std::set` fields. For type-erased fields, we use virtual collection proxies. This already implemented for `RCollectionClassField` fields, but reading from disk for associative containers works slightly different. Therefore, a `RProxiedCollectionField` class is introduced that takes care of all proxy-related implementation and can be used for custom collections, and `RSetField` which inherits from this and specializes for `std::set` (and other related STL collections that will be addressed in a follow-up PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12948
https://github.com/root-project/root/pull/12948:353,interoperability,prox,proxy-related,353,"[ntuple] Add support for `std::set` fields; This PR adds `std::set` fields. For type-erased fields, we use virtual collection proxies. This already implemented for `RCollectionClassField` fields, but reading from disk for associative containers works slightly different. Therefore, a `RProxiedCollectionField` class is introduced that takes care of all proxy-related implementation and can be used for custom collections, and `RSetField` which inherits from this and specializes for `std::set` (and other related STL collections that will be addressed in a follow-up PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12948
https://github.com/root-project/root/pull/12948:444,modifiability,inherit,inherits,444,"[ntuple] Add support for `std::set` fields; This PR adds `std::set` fields. For type-erased fields, we use virtual collection proxies. This already implemented for `RCollectionClassField` fields, but reading from disk for associative containers works slightly different. Therefore, a `RProxiedCollectionField` class is introduced that takes care of all proxy-related implementation and can be used for custom collections, and `RSetField` which inherits from this and specializes for `std::set` (and other related STL collections that will be addressed in a follow-up PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12948
https://github.com/root-project/root/pull/12948:213,performance,disk,disk,213,"[ntuple] Add support for `std::set` fields; This PR adds `std::set` fields. For type-erased fields, we use virtual collection proxies. This already implemented for `RCollectionClassField` fields, but reading from disk for associative containers works slightly different. Therefore, a `RProxiedCollectionField` class is introduced that takes care of all proxy-related implementation and can be used for custom collections, and `RSetField` which inherits from this and specializes for `std::set` (and other related STL collections that will be addressed in a follow-up PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12948
https://github.com/root-project/root/pull/12948:251,reliability,sli,slightly,251,"[ntuple] Add support for `std::set` fields; This PR adds `std::set` fields. For type-erased fields, we use virtual collection proxies. This already implemented for `RCollectionClassField` fields, but reading from disk for associative containers works slightly different. Therefore, a `RProxiedCollectionField` class is introduced that takes care of all proxy-related implementation and can be used for custom collections, and `RSetField` which inherits from this and specializes for `std::set` (and other related STL collections that will be addressed in a follow-up PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12948
https://github.com/root-project/root/pull/12948:13,usability,support,support,13,"[ntuple] Add support for `std::set` fields; This PR adds `std::set` fields. For type-erased fields, we use virtual collection proxies. This already implemented for `RCollectionClassField` fields, but reading from disk for associative containers works slightly different. Therefore, a `RProxiedCollectionField` class is introduced that takes care of all proxy-related implementation and can be used for custom collections, and `RSetField` which inherits from this and specializes for `std::set` (and other related STL collections that will be addressed in a follow-up PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12948
https://github.com/root-project/root/pull/12948:402,usability,custom,custom,402,"[ntuple] Add support for `std::set` fields; This PR adds `std::set` fields. For type-erased fields, we use virtual collection proxies. This already implemented for `RCollectionClassField` fields, but reading from disk for associative containers works slightly different. Therefore, a `RProxiedCollectionField` class is introduced that takes care of all proxy-related implementation and can be used for custom collections, and `RSetField` which inherits from this and specializes for `std::set` (and other related STL collections that will be addressed in a follow-up PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12948
https://github.com/root-project/root/pull/12949:70,energy efficiency,draw,drawing,70,Stats for some th3 painting options.; Stats were missing for some TH3 drawing options. See here:. https://root-forum.cern.ch/t/statistical-box-does-not-appear-on-3d-histogram/55173/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12949
https://github.com/root-project/root/pull/12949:143,reliability,doe,does-not-appear-on-,143,Stats for some th3 painting options.; Stats were missing for some TH3 drawing options. See here:. https://root-forum.cern.ch/t/statistical-box-does-not-appear-on-3d-histogram/55173/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12949
https://github.com/root-project/root/pull/12950:840,energy efficiency,model,model,840,"[RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`; This commit fixes the resetting of the y-axis limits at the end of `RooCurve::shiftCurveToZero()`. In particular, it now sets also the minimium limit correctly, which was not changed before even though it needs to be changed too. Here is an example of a liklihood plot that looks good after this commit, but had wrong y-ranges before:. ```c++. using namespace RooFit;. RooRealVar x(""x"", """", 100, 160);. RooRealVar sigmean(""sigmean"", """", 125, 100, 140);. RooGaussian signalModel(""signal"", """", x, sigmean, RooConst(2.0));. RooExponential background(""background"", """", x, RooConst(-0.03));. // double nbkgVal = 10;. // double nbkgVal = 200;. double nbkgVal = 5000;. RooRealVar nsig(""nsig"", """", 200, 0., 1000);. RooRealVar nbkg(""nbkg"", """", nbkgVal, 0., 10000);. RooAddPdf model(""model"", """", {signalModel, background}, {nsig, nbkg});. std::unique_ptr<RooDataSet> data{model.generate(x)};. std::unique_ptr<RooAbsReal> nll{model.createNLL(*data)};. RooPlot *frame1 = sigmean.frame();. nll->plotOn(frame1, ShiftToZero());. frame1->Draw();. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12950
https://github.com/root-project/root/pull/12950:847,energy efficiency,model,model,847,"[RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`; This commit fixes the resetting of the y-axis limits at the end of `RooCurve::shiftCurveToZero()`. In particular, it now sets also the minimium limit correctly, which was not changed before even though it needs to be changed too. Here is an example of a liklihood plot that looks good after this commit, but had wrong y-ranges before:. ```c++. using namespace RooFit;. RooRealVar x(""x"", """", 100, 160);. RooRealVar sigmean(""sigmean"", """", 125, 100, 140);. RooGaussian signalModel(""signal"", """", x, sigmean, RooConst(2.0));. RooExponential background(""background"", """", x, RooConst(-0.03));. // double nbkgVal = 10;. // double nbkgVal = 200;. double nbkgVal = 5000;. RooRealVar nsig(""nsig"", """", 200, 0., 1000);. RooRealVar nbkg(""nbkg"", """", nbkgVal, 0., 10000);. RooAddPdf model(""model"", """", {signalModel, background}, {nsig, nbkg});. std::unique_ptr<RooDataSet> data{model.generate(x)};. std::unique_ptr<RooAbsReal> nll{model.createNLL(*data)};. RooPlot *frame1 = sigmean.frame();. nll->plotOn(frame1, ShiftToZero());. frame1->Draw();. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12950
https://github.com/root-project/root/pull/12950:935,energy efficiency,model,model,935,"[RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`; This commit fixes the resetting of the y-axis limits at the end of `RooCurve::shiftCurveToZero()`. In particular, it now sets also the minimium limit correctly, which was not changed before even though it needs to be changed too. Here is an example of a liklihood plot that looks good after this commit, but had wrong y-ranges before:. ```c++. using namespace RooFit;. RooRealVar x(""x"", """", 100, 160);. RooRealVar sigmean(""sigmean"", """", 125, 100, 140);. RooGaussian signalModel(""signal"", """", x, sigmean, RooConst(2.0));. RooExponential background(""background"", """", x, RooConst(-0.03));. // double nbkgVal = 10;. // double nbkgVal = 200;. double nbkgVal = 5000;. RooRealVar nsig(""nsig"", """", 200, 0., 1000);. RooRealVar nbkg(""nbkg"", """", nbkgVal, 0., 10000);. RooAddPdf model(""model"", """", {signalModel, background}, {nsig, nbkg});. std::unique_ptr<RooDataSet> data{model.generate(x)};. std::unique_ptr<RooAbsReal> nll{model.createNLL(*data)};. RooPlot *frame1 = sigmean.frame();. nll->plotOn(frame1, ShiftToZero());. frame1->Draw();. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12950
