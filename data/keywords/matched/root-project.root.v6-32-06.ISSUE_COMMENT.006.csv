id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/1058:81,modifiability,version,version,81,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:176,modifiability,modul,modulo,176,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:531,performance,error,errors,531,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:35,safety,test,tests,35,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:144,safety,except,except,144,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:159,safety,avoid,avoidance,159,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:176,safety,modul,modulo,176,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:283,safety,test,tests,283,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:531,safety,error,errors,531,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:446,security,Auth,Author,446,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:35,testability,test,tests,35,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:283,testability,test,tests,283,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:878,testability,automat,automatic,878,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:531,usability,error,errors,531,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:809,usability,close,close,809,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:. ```diff. commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill). Author: Guilherme Amadio <amadio@cern.ch>. Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx. index bc23e6ef82..7bb57aa8e8 100644. --- a/tree/tree/src/TTree.cxx. +++ b/tree/tree/src/TTree.cxx. @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(). // If above, close the current file and continue on a new file. // Currently, the automatic change of file is restricted. // to the case where the tree is in the top level directory. - if (!fDirectory). - return nbytes;. + if (fDirectory). + if (TFile *file = fDirectory->GetFile()). + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)). + ChangeFile(file);. . - TFile* file = fDirectory->GetFile();. - if (file && (file->GetEND() > fgMaxTreeSize)). - if (fDirectory == (TDirectory *)file). - ChangeFile(file);. -. - if (nerror). - return -1;. -. - return nbytes;. + return nerror ? -1 : nbytes;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:125,availability,failur,failure,125,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:125,deployability,fail,failure,125,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:103,energy efficiency,current,currently,103,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:125,performance,failur,failure,125,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:125,reliability,fail,failure,125,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:120,safety,test,test,120,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:143,safety,avoid,avoid,143,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:120,testability,test,test,120,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:14,interoperability,format,format,14,Travis' clang-format and my clang-format disagree again...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:34,interoperability,format,format,34,Travis' clang-format and my clang-format disagree again...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:120,interoperability,format,format,120,"@pcanal Can you please give the final go ahead after you review the new branch? I still need to understand why my clang-format is giving a different result and rebase everything on master, but other than that, this should be ready for merging upon your approval.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:57,safety,review,review,57,"@pcanal Can you please give the final go ahead after you review the new branch? I still need to understand why my clang-format is giving a different result and rebase everything on master, but other than that, this should be ready for merging upon your approval.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:57,testability,review,review,57,"@pcanal Can you please give the final go ahead after you review the new branch? I still need to understand why my clang-format is giving a different result and rebase everything on master, but other than that, this should be ready for merging upon your approval.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:96,testability,understand,understand,96,"@pcanal Can you please give the final go ahead after you review the new branch? I still need to understand why my clang-format is giving a different result and rebase everything on master, but other than that, this should be ready for merging upon your approval.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:48,deployability,fail,failed,48,Putting back 'do not merge label' as some tests failed on my computer. I will investigate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:48,reliability,fail,failed,48,Putting back 'do not merge label' as some tests failed on my computer. I will investigate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:42,safety,test,tests,42,Putting back 'do not merge label' as some tests failed on my computer. I will investigate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:42,testability,test,tests,42,Putting back 'do not merge label' as some tests failed on my computer. I will investigate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:126,integrability,coupl,couple,126,*Now* I believe this is ready to be merged after all tests run. I've run `ctest -R tree` and everything passed. I did catch a couple of other minor mistakes and fixed them too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:126,modifiability,coupl,couple,126,*Now* I believe this is ready to be merged after all tests run. I've run `ctest -R tree` and everything passed. I did catch a couple of other minor mistakes and fixed them too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:53,safety,test,tests,53,*Now* I believe this is ready to be merged after all tests run. I've run `ctest -R tree` and everything passed. I did catch a couple of other minor mistakes and fixed them too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:53,testability,test,tests,53,*Now* I believe this is ready to be merged after all tests run. I've run `ctest -R tree` and everything passed. I did catch a couple of other minor mistakes and fixed them too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:126,testability,coupl,couple,126,*Now* I believe this is ready to be merged after all tests run. I've run `ctest -R tree` and everything passed. I did catch a couple of other minor mistakes and fixed them too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:9,deployability,updat,update,9,The last update is just to make clang-format happy. I applied the difference between my clang-format and Travis by hand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:38,interoperability,format,format,38,The last update is just to make clang-format happy. I applied the difference between my clang-format and Travis by hand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:94,interoperability,format,format,94,The last update is just to make clang-format happy. I applied the difference between my clang-format and Travis by hand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:9,safety,updat,update,9,The last update is just to make clang-format happy. I applied the difference between my clang-format and Travis by hand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:9,security,updat,update,9,The last update is just to make clang-format happy. I applied the difference between my clang-format and Travis by hand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:15,energy efficiency,current,current,15,And rebased on current master...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:51,safety,test,tests,51,This looks good and can be merged if it passes all tests (and after re-adding one comment).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:51,testability,test,tests,51,This looks good and can be merged if it passes all tests (and after re-adding one comment).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:171,availability,error,error,171,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:246,availability,error,error,246,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:65,deployability,build,build,65,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:107,deployability,build,build,107,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:26,energy efficiency,current,current,26,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:171,performance,error,error,171,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:246,performance,error,error,246,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:303,reliability,doe,does,303,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:171,safety,error,error,171,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:197,safety,valid,valid,197,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:246,safety,error,error,246,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:317,safety,test,tests,317,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:358,safety,test,tests,358,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:317,testability,test,tests,317,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:358,testability,test,tests,358,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:171,usability,error,error,171,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:246,usability,error,error,246,Shouldn't have rebased on current master... ```. Processing /mnt/build/jenkins/workspace/root-pullrequests-build/roottest/cling/other/runfileClose.C... input_line_29:1:1: error: source file is not valid UTF-8. <D6><U+007F>. ^. input_line_29:1:2: error: expected unqualified-id. <D6><U+007F>. ^. ```. It does pass all tests when I run `ctest -V -R tree` (108 tests more or less).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:15,deployability,fail,failed,15,"Only git fetch failed in Jenkins, tests/formatting are actually passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:40,interoperability,format,formatting,40,"Only git fetch failed in Jenkins, tests/formatting are actually passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:15,reliability,fail,failed,15,"Only git fetch failed in Jenkins, tests/formatting are actually passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:34,safety,test,tests,34,"Only git fetch failed in Jenkins, tests/formatting are actually passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1058:34,testability,test,tests,34,"Only git fetch failed in Jenkins, tests/formatting are actually passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1058
https://github.com/root-project/root/pull/1059:21,deployability,infrastructur,infrastructure,21,@pcanal it is simple infrastructure fail..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1059
https://github.com/root-project/root/pull/1059:36,deployability,fail,fail,36,@pcanal it is simple infrastructure fail..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1059
https://github.com/root-project/root/pull/1059:36,reliability,fail,fail,36,@pcanal it is simple infrastructure fail..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1059
https://github.com/root-project/root/pull/1059:14,testability,simpl,simple,14,@pcanal it is simple infrastructure fail..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1059
https://github.com/root-project/root/pull/1059:14,usability,simpl,simple,14,@pcanal it is simple infrastructure fail..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1059
https://github.com/root-project/root/pull/1060:1309,availability,slo,slower,1309,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:326,deployability,patch,patch,326,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:489,deployability,Updat,Update,489,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:826,deployability,Updat,Update,826,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:938,deployability,Updat,Update,938,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1575,deployability,stack,stacktraces,1575,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1909,deployability,contain,contains,1909,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1336,energy efficiency,cpu,cpu,1336,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:32,integrability,discover,discovered,32,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:32,interoperability,discover,discovered,32,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1971,modifiability,maintain,maintains,1971,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1336,performance,cpu,cpu,1336,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1485,performance,cach,cache-friendliness,1485,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1309,reliability,slo,slower,1309,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:93,safety,test,tests,93,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:326,safety,patch,patch,326,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:489,safety,Updat,Update,489,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:826,safety,Updat,Update,826,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:938,safety,Updat,Update,938,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1971,safety,maintain,maintains,1971,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:326,security,patch,patch,326,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:489,security,Updat,Update,489,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:826,security,Updat,Update,826,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:938,security,Updat,Update,938,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:71,testability,simpl,simple,71,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:93,testability,test,tests,93,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:32,usability,discov,discovered,32,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:71,usability,simpl,simple,71,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:114,usability,custom,custom,114,"While benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1654,usability,user,user-images,1654,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1060:1774,usability,user,user-images,1774,"ile benchmarking the change I discovered something fascinating. This simple benchmark only tests retrieval of a custom column:. ```c++. TDataFrame d(1000000000ull);. d.Define(""ans"", [] { return 42; }). .Foreach([](int) {}, {""ans""});. ```. The relevant code path that changes between master and this PR is the following:. ```patch. T &TColumnValue<T>::Get(Long64_t entry). {. - if (!fReaderValues.empty()) {. - return *(fReaderValues.back()->Get());. - } else {. - fCustomColumns.back()->Update(fSlot, entry);. - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();. + switch (fColumnKind) {. + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/. + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());. + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();. + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();. }. +. ```. Looks _faster_ right? On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):. ```. # MASTER. 99,494,923,915 instructions:u. 9.844 seconds. # PR. 103,495,337,205 instructions:u. 11.049 seconds. ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**. ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**. ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`! I will come up with a change that maintains inlining intact soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1060
https://github.com/root-project/root/pull/1061:28,deployability,patch,patch,28,@couet . Can you apply same patch to v6-10-00-patches branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1061
https://github.com/root-project/root/pull/1061:46,deployability,patch,patches,46,@couet . Can you apply same patch to v6-10-00-patches branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1061
https://github.com/root-project/root/pull/1061:28,safety,patch,patch,28,@couet . Can you apply same patch to v6-10-00-patches branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1061
https://github.com/root-project/root/pull/1061:46,safety,patch,patches,46,@couet . Can you apply same patch to v6-10-00-patches branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1061
https://github.com/root-project/root/pull/1061:28,security,patch,patch,28,@couet . Can you apply same patch to v6-10-00-patches branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1061
https://github.com/root-project/root/pull/1061:46,security,patch,patches,46,@couet . Can you apply same patch to v6-10-00-patches branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1061
https://github.com/root-project/root/pull/1062:52,integrability,repositor,repository,52,It was decided that this PR should go in a separate repository.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1062
https://github.com/root-project/root/pull/1062:52,interoperability,repositor,repository,52,It was decided that this PR should go in a separate repository.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1062
https://github.com/root-project/root/pull/1063:28,deployability,build,build,28,"@amadio, I checked locally, build was successful..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:55,safety,avoid,avoid,55,Thanks @oshadura! I will merge once Jenkins is done to avoid having this marked red.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:9,availability,failur,failures,9,"@amadio, failures are not relative to my changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:9,deployability,fail,failures,9,"@amadio, failures are not relative to my changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:9,performance,failur,failures,9,"@amadio, failures are not relative to my changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:9,reliability,fail,failures,9,"@amadio, failures are not relative to my changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:48,availability,failur,failures,48,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:48,deployability,fail,failures,48,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:174,deployability,integr,integration,174,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:237,deployability,build,build,237,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:255,deployability,build,build,255,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:174,integrability,integr,integration,174,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:174,interoperability,integr,integration,174,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:174,modifiability,integr,integration,174,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:48,performance,failur,failures,48,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:212,performance,time,time,212,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:48,reliability,fail,failures,48,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:174,reliability,integr,integration,174,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:174,security,integr,integration,174,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:174,testability,integr,integration,174,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library? I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless). In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1063:11,deployability,build,build,11,"@phsft-bot build just on ubuntu16/classic, mac1012/classic",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1063
https://github.com/root-project/root/pull/1065:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:74,deployability,releas,release,74,"The content of the PR description should be reproduce or summarize in the release notes (and if summary, it should be reproduced in the commit log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:143,deployability,log,log,143,"The content of the PR description should be reproduce or summarize in the release notes (and if summary, it should be reproduced in the commit log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:4,performance,content,content,4,"The content of the PR description should be reproduce or summarize in the release notes (and if summary, it should be reproduced in the commit log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:143,safety,log,log,143,"The content of the PR description should be reproduce or summarize in the release notes (and if summary, it should be reproduced in the commit log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:143,security,log,log,143,"The content of the PR description should be reproduce or summarize in the release notes (and if summary, it should be reproduced in the commit log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:143,testability,log,log,143,"The content of the PR description should be reproduce or summarize in the release notes (and if summary, it should be reproduced in the commit log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:205,availability,cluster,clusters,205,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:385,availability,cluster,clusters,385,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:524,availability,cluster,clusters,524,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:621,availability,cluster,clusters,621,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:22,deployability,releas,release,22,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:205,deployability,cluster,clusters,205,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:385,deployability,cluster,clusters,385,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:524,deployability,cluster,clusters,524,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:621,deployability,cluster,clusters,621,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:402,energy efficiency,load,loaded,402,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:309,integrability,event,events,309,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:152,performance,multi-thread,multi-threaded,152,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:402,performance,load,loaded,402,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:414,performance,memor,memory,414,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:646,performance,memor,memory,646,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:655,reliability,Doe,Does,655,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:256,safety,prevent,prevent,256,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:256,security,preven,prevent,256,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:167,usability,workflow,workflows,167,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:414,usability,memor,memory,414,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:591,usability,indicat,indicates,591,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:646,usability,memor,memory,646,"Hi Philippe,. for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\. + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. + This change will prevent additional reads from occurring when reading events out of sequence. + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets. + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained. + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:2,reliability,Doe,Does,2,> Does that sound ok? Yes this is clear. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:34,usability,clear,clear,34,> Does that sound ok? Yes this is clear. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:20,availability,ping,ping,20,"Hi Philippe,. may I ping you on this one? Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1065:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1065
https://github.com/root-project/root/pull/1066:44,deployability,patch,patch,44,I close this PR - @couet already apply same patch from master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1066
https://github.com/root-project/root/pull/1066:44,safety,patch,patch,44,I close this PR - @couet already apply same patch from master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1066
https://github.com/root-project/root/pull/1066:44,security,patch,patch,44,I close this PR - @couet already apply same patch from master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1066
https://github.com/root-project/root/pull/1066:2,usability,close,close,2,I close this PR - @couet already apply same patch from master,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1066
https://github.com/root-project/root/pull/1067:40,deployability,build,build,40,"Thanks, @ellert ! And @phsft-bot please build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1067
https://github.com/root-project/root/pull/1068:31,energy efficiency,core,cores,31,"Back to great results (AVX2, 4 cores + hyperthreading). ![selection_074](https://user-images.githubusercontent.com/867299/30963993-d7ec156c-a44f-11e7-837a-1bdb42606c88.png). For some reason they don't multiply, but I doublechecked each one of the results and the speedups and they are spot on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:81,usability,user,user-images,81,"Back to great results (AVX2, 4 cores + hyperthreading). ![selection_074](https://user-images.githubusercontent.com/867299/30963993-d7ec156c-a44f-11e7-837a-1bdb42606c88.png). For some reason they don't multiply, but I doublechecked each one of the results and the speedups and they are spot on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:72,availability,down,down,72,Xavi I think it's expected. With AVX enabled the clock frequency scales down when all cores are fired up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:65,deployability,scale,scales,65,Xavi I think it's expected. With AVX enabled the clock frequency scales down when all cores are fired up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:49,energy efficiency,clock,clock,49,Xavi I think it's expected. With AVX enabled the clock frequency scales down when all cores are fired up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:55,energy efficiency,frequenc,frequency,55,Xavi I think it's expected. With AVX enabled the clock frequency scales down when all cores are fired up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:65,energy efficiency,scale,scales,65,Xavi I think it's expected. With AVX enabled the clock frequency scales down when all cores are fired up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:86,energy efficiency,core,cores,86,Xavi I think it's expected. With AVX enabled the clock frequency scales down when all cores are fired up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:65,modifiability,scal,scales,65,Xavi I think it's expected. With AVX enabled the clock frequency scales down when all cores are fired up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:65,performance,scale,scales,65,Xavi I think it's expected. With AVX enabled the clock frequency scales down when all cores are fired up.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:167,availability,toler,tolerance,167,"@dpiparo 3.73*3.09<<14.67 when it should be greater. Vec (maybe the problem here?) and MT+Vec are calls to the same exact function. The numerical results are within a tolerance of 1%, the speedups have been normalized to the number of calls. Maybe better caching? To be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:255,performance,cach,caching,255,"@dpiparo 3.73*3.09<<14.67 when it should be greater. Vec (maybe the problem here?) and MT+Vec are calls to the same exact function. The numerical results are within a tolerance of 1%, the speedups have been normalized to the number of calls. Maybe better caching? To be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1068:167,reliability,toleran,tolerance,167,"@dpiparo 3.73*3.09<<14.67 when it should be greater. Vec (maybe the problem here?) and MT+Vec are calls to the same exact function. The numerical results are within a tolerance of 1%, the speedups have been normalized to the number of calls. Maybe better caching? To be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1068
https://github.com/root-project/root/pull/1069:31,integrability,messag,message,31,"Sure, I will reword the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1069
https://github.com/root-project/root/pull/1069:31,interoperability,messag,message,31,"Sure, I will reword the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1069
https://github.com/root-project/root/pull/1069:6,deployability,fail,failed,6,"Ah... failed on git checkout, how nice.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1069
https://github.com/root-project/root/pull/1069:6,reliability,fail,failed,6,"Ah... failed on git checkout, how nice.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1069
https://github.com/root-project/root/pull/1071:0,energy efficiency,Cool,Cool,0,"Cool! I know this is a first draft, just two preliminary comments: maybe `GetColumnNames` would be more descriptive; we cannot return _all_ of the custom column names, as some will not belong to the current ""chain"" of the graph. `TInterface::fValidColumnNames` would be the right list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1071
https://github.com/root-project/root/pull/1071:199,energy efficiency,current,current,199,"Cool! I know this is a first draft, just two preliminary comments: maybe `GetColumnNames` would be more descriptive; we cannot return _all_ of the custom column names, as some will not belong to the current ""chain"" of the graph. `TInterface::fValidColumnNames` would be the right list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1071
https://github.com/root-project/root/pull/1071:147,usability,custom,custom,147,"Cool! I know this is a first draft, just two preliminary comments: maybe `GetColumnNames` would be more descriptive; we cannot return _all_ of the custom column names, as some will not belong to the current ""chain"" of the graph. `TInterface::fValidColumnNames` would be the right list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1071
https://github.com/root-project/root/pull/1071:22,deployability,updat,updated,22,"Comment addressed, RN updated, tests added. Ready to go if jenkins agrees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1071
https://github.com/root-project/root/pull/1071:22,safety,updat,updated,22,"Comment addressed, RN updated, tests added. Ready to go if jenkins agrees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1071
https://github.com/root-project/root/pull/1071:31,safety,test,tests,31,"Comment addressed, RN updated, tests added. Ready to go if jenkins agrees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1071
https://github.com/root-project/root/pull/1071:22,security,updat,updated,22,"Comment addressed, RN updated, tests added. Ready to go if jenkins agrees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1071
https://github.com/root-project/root/pull/1071:31,testability,test,tests,31,"Comment addressed, RN updated, tests added. Ready to go if jenkins agrees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1071
https://github.com/root-project/root/pull/1072:0,deployability,Fail,Failed,0,Failed to fetch git repo :-(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1072
https://github.com/root-project/root/pull/1072:0,reliability,Fail,Failed,0,Failed to fetch git repo :-(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1072
https://github.com/root-project/root/pull/1072:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1072
https://github.com/root-project/root/pull/1072:15,deployability,fail,failed,15,"Only git fetch failed, tests are actually passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1072
https://github.com/root-project/root/pull/1072:15,reliability,fail,failed,15,"Only git fetch failed, tests are actually passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1072
https://github.com/root-project/root/pull/1072:23,safety,test,tests,23,"Only git fetch failed, tests are actually passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1072
https://github.com/root-project/root/pull/1072:23,testability,test,tests,23,"Only git fetch failed, tests are actually passing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1072
https://github.com/root-project/root/pull/1073:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:124,integrability,interfac,interfaces,124,"Let's see how this goes now that we are back on the old externals... I would prefer avoiding the smart pointers with ROOT 6 interfaces, because I'm sure there are corner cases where it will lead to problems, and I pointed out some of it in previous comments. Other than that, I once this PR is ready for merge, the typos, etc, should be amended into the right commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:124,interoperability,interfac,interfaces,124,"Let's see how this goes now that we are back on the old externals... I would prefer avoiding the smart pointers with ROOT 6 interfaces, because I'm sure there are corner cases where it will lead to problems, and I pointed out some of it in previous comments. Other than that, I once this PR is ready for merge, the typos, etc, should be amended into the right commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:124,modifiability,interfac,interfaces,124,"Let's see how this goes now that we are back on the old externals... I would prefer avoiding the smart pointers with ROOT 6 interfaces, because I'm sure there are corner cases where it will lead to problems, and I pointed out some of it in previous comments. Other than that, I once this PR is ready for merge, the typos, etc, should be amended into the right commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:84,safety,avoid,avoiding,84,"Let's see how this goes now that we are back on the old externals... I would prefer avoiding the smart pointers with ROOT 6 interfaces, because I'm sure there are corner cases where it will lead to problems, and I pointed out some of it in previous comments. Other than that, I once this PR is ready for merge, the typos, etc, should be amended into the right commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:77,usability,prefer,prefer,77,"Let's see how this goes now that we are back on the old externals... I would prefer avoiding the smart pointers with ROOT 6 interfaces, because I'm sure there are corner cases where it will lead to problems, and I pointed out some of it in previous comments. Other than that, I once this PR is ready for merge, the typos, etc, should be amended into the right commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,availability,failur,failure,33,"Frankly, I do not understand the failure in `dataframe_simple`. If I run the test via `tree/treeplayer/test/dataframe_simple --gtest_filter=*TDataFrameMT*Snapshot_update*` it works just fine (valgrind and helgrind are happy. I ran overnight helgrind and I got tons of data race [reports](http://paste.ubuntu.com/25659874/). I am not sure if that's solely due to my changes. I will have to run it again on unmodified master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,deployability,fail,failure,33,"Frankly, I do not understand the failure in `dataframe_simple`. If I run the test via `tree/treeplayer/test/dataframe_simple --gtest_filter=*TDataFrameMT*Snapshot_update*` it works just fine (valgrind and helgrind are happy. I ran overnight helgrind and I got tons of data race [reports](http://paste.ubuntu.com/25659874/). I am not sure if that's solely due to my changes. I will have to run it again on unmodified master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,performance,failur,failure,33,"Frankly, I do not understand the failure in `dataframe_simple`. If I run the test via `tree/treeplayer/test/dataframe_simple --gtest_filter=*TDataFrameMT*Snapshot_update*` it works just fine (valgrind and helgrind are happy. I ran overnight helgrind and I got tons of data race [reports](http://paste.ubuntu.com/25659874/). I am not sure if that's solely due to my changes. I will have to run it again on unmodified master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,reliability,fail,failure,33,"Frankly, I do not understand the failure in `dataframe_simple`. If I run the test via `tree/treeplayer/test/dataframe_simple --gtest_filter=*TDataFrameMT*Snapshot_update*` it works just fine (valgrind and helgrind are happy. I ran overnight helgrind and I got tons of data race [reports](http://paste.ubuntu.com/25659874/). I am not sure if that's solely due to my changes. I will have to run it again on unmodified master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:77,safety,test,test,77,"Frankly, I do not understand the failure in `dataframe_simple`. If I run the test via `tree/treeplayer/test/dataframe_simple --gtest_filter=*TDataFrameMT*Snapshot_update*` it works just fine (valgrind and helgrind are happy. I ran overnight helgrind and I got tons of data race [reports](http://paste.ubuntu.com/25659874/). I am not sure if that's solely due to my changes. I will have to run it again on unmodified master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:103,safety,test,test,103,"Frankly, I do not understand the failure in `dataframe_simple`. If I run the test via `tree/treeplayer/test/dataframe_simple --gtest_filter=*TDataFrameMT*Snapshot_update*` it works just fine (valgrind and helgrind are happy. I ran overnight helgrind and I got tons of data race [reports](http://paste.ubuntu.com/25659874/). I am not sure if that's solely due to my changes. I will have to run it again on unmodified master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:18,testability,understand,understand,18,"Frankly, I do not understand the failure in `dataframe_simple`. If I run the test via `tree/treeplayer/test/dataframe_simple --gtest_filter=*TDataFrameMT*Snapshot_update*` it works just fine (valgrind and helgrind are happy. I ran overnight helgrind and I got tons of data race [reports](http://paste.ubuntu.com/25659874/). I am not sure if that's solely due to my changes. I will have to run it again on unmodified master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:77,testability,test,test,77,"Frankly, I do not understand the failure in `dataframe_simple`. If I run the test via `tree/treeplayer/test/dataframe_simple --gtest_filter=*TDataFrameMT*Snapshot_update*` it works just fine (valgrind and helgrind are happy. I ran overnight helgrind and I got tons of data race [reports](http://paste.ubuntu.com/25659874/). I am not sure if that's solely due to my changes. I will have to run it again on unmodified master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:103,testability,test,test,103,"Frankly, I do not understand the failure in `dataframe_simple`. If I run the test via `tree/treeplayer/test/dataframe_simple --gtest_filter=*TDataFrameMT*Snapshot_update*` it works just fine (valgrind and helgrind are happy. I ran overnight helgrind and I got tons of data race [reports](http://paste.ubuntu.com/25659874/). I am not sure if that's solely due to my changes. I will have to run it again on unmodified master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:178,integrability,interfac,interfaces,178,"On 02/10/17 11:43, Guilherme Amadio wrote:. >. > Let's see how this goes now that we are back on the old externals... >. > I would prefer avoiding the smart pointers with ROOT 6 interfaces, . > because I'm sure there are corner cases where it will lead to . > problems, and I pointed out some of it in previous comments. >. > Other than that, I once this PR is ready for merge, the typos, etc, . > should be amended into the right commits. >. I am not sure I understand in which commit the typo fix will go. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:178,interoperability,interfac,interfaces,178,"On 02/10/17 11:43, Guilherme Amadio wrote:. >. > Let's see how this goes now that we are back on the old externals... >. > I would prefer avoiding the smart pointers with ROOT 6 interfaces, . > because I'm sure there are corner cases where it will lead to . > problems, and I pointed out some of it in previous comments. >. > Other than that, I once this PR is ready for merge, the typos, etc, . > should be amended into the right commits. >. I am not sure I understand in which commit the typo fix will go. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:178,modifiability,interfac,interfaces,178,"On 02/10/17 11:43, Guilherme Amadio wrote:. >. > Let's see how this goes now that we are back on the old externals... >. > I would prefer avoiding the smart pointers with ROOT 6 interfaces, . > because I'm sure there are corner cases where it will lead to . > problems, and I pointed out some of it in previous comments. >. > Other than that, I once this PR is ready for merge, the typos, etc, . > should be amended into the right commits. >. I am not sure I understand in which commit the typo fix will go. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:138,safety,avoid,avoiding,138,"On 02/10/17 11:43, Guilherme Amadio wrote:. >. > Let's see how this goes now that we are back on the old externals... >. > I would prefer avoiding the smart pointers with ROOT 6 interfaces, . > because I'm sure there are corner cases where it will lead to . > problems, and I pointed out some of it in previous comments. >. > Other than that, I once this PR is ready for merge, the typos, etc, . > should be amended into the right commits. >. I am not sure I understand in which commit the typo fix will go. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:553,security,auth,authored,553,"On 02/10/17 11:43, Guilherme Amadio wrote:. >. > Let's see how this goes now that we are back on the old externals... >. > I would prefer avoiding the smart pointers with ROOT 6 interfaces, . > because I'm sure there are corner cases where it will lead to . > problems, and I pointed out some of it in previous comments. >. > Other than that, I once this PR is ready for merge, the typos, etc, . > should be amended into the right commits. >. I am not sure I understand in which commit the typo fix will go. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:774,security,auth,auth,774,"On 02/10/17 11:43, Guilherme Amadio wrote:. >. > Let's see how this goes now that we are back on the old externals... >. > I would prefer avoiding the smart pointers with ROOT 6 interfaces, . > because I'm sure there are corner cases where it will lead to . > problems, and I pointed out some of it in previous comments. >. > Other than that, I once this PR is ready for merge, the typos, etc, . > should be amended into the right commits. >. I am not sure I understand in which commit the typo fix will go. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:459,testability,understand,understand,459,"On 02/10/17 11:43, Guilherme Amadio wrote:. >. > Let's see how this goes now that we are back on the old externals... >. > I would prefer avoiding the smart pointers with ROOT 6 interfaces, . > because I'm sure there are corner cases where it will lead to . > problems, and I pointed out some of it in previous comments. >. > Other than that, I once this PR is ready for merge, the typos, etc, . > should be amended into the right commits. >. I am not sure I understand in which commit the typo fix will go. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:131,usability,prefer,prefer,131,"On 02/10/17 11:43, Guilherme Amadio wrote:. >. > Let's see how this goes now that we are back on the old externals... >. > I would prefer avoiding the smart pointers with ROOT 6 interfaces, . > because I'm sure there are corner cases where it will lead to . > problems, and I pointed out some of it in previous comments. >. > Other than that, I once this PR is ready for merge, the typos, etc, . > should be amended into the right commits. >. I am not sure I understand in which commit the typo fix will go. >. > —. > You are receiving this because you authored the thread. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:21,availability,failur,failure,21,"The dataframe_simple failure is not due to your changes. We had a problem with the externals, but it should be fixed by now. As for the typo and other fixes, if you added the line you are fixing in another commit, the amend should go there. If the fix is for something on master, then it's fine to have a commit on its own.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:21,deployability,fail,failure,21,"The dataframe_simple failure is not due to your changes. We had a problem with the externals, but it should be fixed by now. As for the typo and other fixes, if you added the line you are fixing in another commit, the amend should go there. If the fix is for something on master, then it's fine to have a commit on its own.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:21,performance,failur,failure,21,"The dataframe_simple failure is not due to your changes. We had a problem with the externals, but it should be fixed by now. As for the typo and other fixes, if you added the line you are fixing in another commit, the amend should go there. If the fix is for something on master, then it's fine to have a commit on its own.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:21,reliability,fail,failure,21,"The dataframe_simple failure is not due to your changes. We had a problem with the externals, but it should be fixed by now. As for the typo and other fixes, if you added the line you are fixing in another commit, the amend should go there. If the fix is for something on master, then it's fine to have a commit on its own.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:93,safety,test,tests,93,"Ah, and the snapshot itself has some problems that are being worked on. If the TBufferMerger tests are fine, this PR should be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:93,testability,test,tests,93,"Ah, and the snapshot itself has some problems that are being worked on. If the TBufferMerger tests are fine, this PR should be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:25,deployability,fail,failing,25,"If I run helgrind on the failing test with the current master I get similar [race conditions](https://gist.github.com/vgvassilev/9ffe48490045c0bdf7cbd9c2afc6fbeb). @amadio, @bluehood, any idea what's wrong and how we should proceed with the PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:47,energy efficiency,current,current,47,"If I run helgrind on the failing test with the current master I get similar [race conditions](https://gist.github.com/vgvassilev/9ffe48490045c0bdf7cbd9c2afc6fbeb). @amadio, @bluehood, any idea what's wrong and how we should proceed with the PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:25,reliability,fail,failing,25,"If I run helgrind on the failing test with the current master I get similar [race conditions](https://gist.github.com/vgvassilev/9ffe48490045c0bdf7cbd9c2afc6fbeb). @amadio, @bluehood, any idea what's wrong and how we should proceed with the PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,safety,test,test,33,"If I run helgrind on the failing test with the current master I get similar [race conditions](https://gist.github.com/vgvassilev/9ffe48490045c0bdf7cbd9c2afc6fbeb). @amadio, @bluehood, any idea what's wrong and how we should proceed with the PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,testability,test,test,33,"If I run helgrind on the failing test with the current master I get similar [race conditions](https://gist.github.com/vgvassilev/9ffe48490045c0bdf7cbd9c2afc6fbeb). @amadio, @bluehood, any idea what's wrong and how we should proceed with the PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:533,deployability,manag,management,533,"That's a lot of data :). In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth. ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:533,energy efficiency,manag,management,533,"That's a lot of data :). In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth. ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:131,performance,concurren,concurrency,131,"That's a lot of data :). In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth. ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:629,performance,multi-thread,multi-threading,629,"That's a lot of data :). In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth. ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:533,safety,manag,management,533,"That's a lot of data :). In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth. ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:340,security,access,accessing,340,"That's a lot of data :). In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth. ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:92,testability,understand,understanding,92,"That's a lot of data :). In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth. ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:262,testability,understand,understand,262,"That's a lot of data :). In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth. ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:31,usability,experien,experience,31,"That's a lot of data :). In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth. ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:703,availability,operat,operator,703,"```. ==95548== Possible data race during read of size 8 at 0x10D9AC9C8 by thread #2. ==95548== Locks held: none. ==95548== at 0x1020C5E55: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x1019B6327: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:104). ==95548== by 0x1019B6505: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:94). ==95548== by 0x10196BBFD: ROOT::Experimental::TBufferMerger::WriteOutputFile() (TBufferMerger.cxx:81). ==95548== by 0x10196E1E7: ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0::operator()() const (TBufferMerger.cxx:25). ==95548== by 0x10196DF38: void* std::__1::__thread_proxy<std::__1::tuple<ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0> >(void*) (__functional_base:416). ==95548== by 0x102B4F99C: _pthread_body (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4F919: _pthread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4D350: thread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== . ==95548== This conflicts with a previous write of size 8 by thread #1. ==95548== Locks held: none. ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:3355,availability,operat,operator,3355,"<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (in /usr/lib/libc++.1.dylib). ==95548== by 0x10204EF84: TStorage::ObjectAlloc(unsigned long) (TStorage.cxx:330). ==95548== by 0x101EEB3E4: TObject::operator new(unsigned long) (TObject.h:146). ==95548== by 0x101EEA260: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:744). ==95548== by 0x101EECB0C: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:641). ==95548== by 0x101EF46F3: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:314). ==95548== by 0x101EE77B4: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:313). ==95548== by 0x101EE7723: ROOT::Internal::GetROOT1() (TROOT.cxx:356). ==95548== by 0x101EE89B9: ROOT::GetROOT() (TROOT.cxx:488). ==95548== by 0x101EF6EF8: __cxx_global_var_init.11 (TROOT.cxx:582). ==95548== by 0x101EF6F4D: _GLOBAL__sub_I_TROOT.cxx (TROOT.cxx:0). ==95548== Block was alloc'd by thread #1. ```. looks relevant to me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:3531,availability,operat,operator,3531,"<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (in /usr/lib/libc++.1.dylib). ==95548== by 0x10204EF84: TStorage::ObjectAlloc(unsigned long) (TStorage.cxx:330). ==95548== by 0x101EEB3E4: TObject::operator new(unsigned long) (TObject.h:146). ==95548== by 0x101EEA260: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:744). ==95548== by 0x101EECB0C: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:641). ==95548== by 0x101EF46F3: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:314). ==95548== by 0x101EE77B4: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:313). ==95548== by 0x101EE7723: ROOT::Internal::GetROOT1() (TROOT.cxx:356). ==95548== by 0x101EE89B9: ROOT::GetROOT() (TROOT.cxx:488). ==95548== by 0x101EF6EF8: __cxx_global_var_init.11 (TROOT.cxx:582). ==95548== by 0x101EF6F4D: _GLOBAL__sub_I_TROOT.cxx (TROOT.cxx:0). ==95548== Block was alloc'd by thread #1. ```. looks relevant to me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:2272,energy efficiency,alloc,allocator,2272,"1. ==95548== Locks held: none. ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:2301,energy efficiency,alloc,allocator,2301,". ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:2379,energy efficiency,alloc,allocator,2379,"= by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:2920,energy efficiency,alloc,allocator,2920,"perimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (in /usr/lib/libc++.1.dylib). ==95548== by 0x10204EF84: TStorage::ObjectAlloc(unsigned long) (TStorage.cxx:330). ==95548== by 0x101EEB3E4: TObject::operator new(unsigned long) (TObject.h:146). ==95548== by 0x101EEA260: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:744). ==95548== by 0x101EECB0C: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:641). ==95548== by 0x101EF46F3: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:314). ==95548== by 0x101EE77B4: ROOT::Internal::TROOTAllocator::TROOTAllo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:2949,energy efficiency,alloc,allocator,2949,"OOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (in /usr/lib/libc++.1.dylib). ==95548== by 0x10204EF84: TStorage::ObjectAlloc(unsigned long) (TStorage.cxx:330). ==95548== by 0x101EEB3E4: TObject::operator new(unsigned long) (TObject.h:146). ==95548== by 0x101EEA260: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:744). ==95548== by 0x101EECB0C: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:641). ==95548== by 0x101EF46F3: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:314). ==95548== by 0x101EE77B4: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:313). ==95",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:3027,energy efficiency,alloc,allocator,3027,"tals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (in /usr/lib/libc++.1.dylib). ==95548== by 0x10204EF84: TStorage::ObjectAlloc(unsigned long) (TStorage.cxx:330). ==95548== by 0x101EEB3E4: TObject::operator new(unsigned long) (TObject.h:146). ==95548== by 0x101EEA260: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:744). ==95548== by 0x101EECB0C: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:641). ==95548== by 0x101EF46F3: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:314). ==95548== by 0x101EE77B4: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:313). ==95548== by 0x101EE7723: ROOT::Internal::GetROOT1() (TROOT.cxx:356). ==95548== by",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:3199,energy efficiency,alloc,alloc,3199,"r<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (in /usr/lib/libc++.1.dylib). ==95548== by 0x10204EF84: TStorage::ObjectAlloc(unsigned long) (TStorage.cxx:330). ==95548== by 0x101EEB3E4: TObject::operator new(unsigned long) (TObject.h:146). ==95548== by 0x101EEA260: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:744). ==95548== by 0x101EECB0C: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:641). ==95548== by 0x101EF46F3: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:314). ==95548== by 0x101EE77B4: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:313). ==95548== by 0x101EE7723: ROOT::Internal::GetROOT1() (TROOT.cxx:356). ==95548== by 0x101EE89B9: ROOT::GetROOT() (TROOT.cxx:488). ==95548== by 0x101EF6EF8: __cxx_global_var_init.11 (TROOT.cxx:582). ==95548== by 0x101EF6F4D: _GLOBAL__sub_I_TROOT.cxx (TRO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:4233,energy efficiency,alloc,alloc,4233,"<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (in /usr/lib/libc++.1.dylib). ==95548== by 0x10204EF84: TStorage::ObjectAlloc(unsigned long) (TStorage.cxx:330). ==95548== by 0x101EEB3E4: TObject::operator new(unsigned long) (TObject.h:146). ==95548== by 0x101EEA260: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:744). ==95548== by 0x101EECB0C: TROOT::TROOT(char const*, char const*, void (**)()) (TROOT.cxx:641). ==95548== by 0x101EF46F3: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:314). ==95548== by 0x101EE77B4: ROOT::Internal::TROOTAllocator::TROOTAllocator() (TROOT.cxx:313). ==95548== by 0x101EE7723: ROOT::Internal::GetROOT1() (TROOT.cxx:356). ==95548== by 0x101EE89B9: ROOT::GetROOT() (TROOT.cxx:488). ==95548== by 0x101EF6EF8: __cxx_global_var_init.11 (TROOT.cxx:582). ==95548== by 0x101EF6F4D: _GLOBAL__sub_I_TROOT.cxx (TROOT.cxx:0). ==95548== Block was alloc'd by thread #1. ```. looks relevant to me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:1224,interoperability,conflict,conflicts,1224,"ject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x1019B6327: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:104). ==95548== by 0x1019B6505: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:94). ==95548== by 0x10196BBFD: ROOT::Experimental::TBufferMerger::WriteOutputFile() (TBufferMerger.cxx:81). ==95548== by 0x10196E1E7: ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0::operator()() const (TBufferMerger.cxx:25). ==95548== by 0x10196DF38: void* std::__1::__thread_proxy<std::__1::tuple<ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0> >(void*) (__functional_base:416). ==95548== by 0x102B4F99C: _pthread_body (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4F919: _pthread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4D350: thread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== . ==95548== This conflicts with a previous write of size 8 by thread #1. ==95548== Locks held: none. ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<ch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:95,performance,Lock,Locks,95,"```. ==95548== Possible data race during read of size 8 at 0x10D9AC9C8 by thread #2. ==95548== Locks held: none. ==95548== at 0x1020C5E55: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x1019B6327: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:104). ==95548== by 0x1019B6505: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:94). ==95548== by 0x10196BBFD: ROOT::Experimental::TBufferMerger::WriteOutputFile() (TBufferMerger.cxx:81). ==95548== by 0x10196E1E7: ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0::operator()() const (TBufferMerger.cxx:25). ==95548== by 0x10196DF38: void* std::__1::__thread_proxy<std::__1::tuple<ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0> >(void*) (__functional_base:416). ==95548== by 0x102B4F99C: _pthread_body (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4F919: _pthread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4D350: thread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== . ==95548== This conflicts with a previous write of size 8 by thread #1. ==95548== Locks held: none. ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:1290,performance,Lock,Locks,1290,"TObject*) (TList.h:77). ==95548== by 0x1019B6327: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:104). ==95548== by 0x1019B6505: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:94). ==95548== by 0x10196BBFD: ROOT::Experimental::TBufferMerger::WriteOutputFile() (TBufferMerger.cxx:81). ==95548== by 0x10196E1E7: ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0::operator()() const (TBufferMerger.cxx:25). ==95548== by 0x10196DF38: void* std::__1::__thread_proxy<std::__1::tuple<ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0> >(void*) (__functional_base:416). ==95548== by 0x102B4F99C: _pthread_body (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4F919: _pthread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4D350: thread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== . ==95548== This conflicts with a previous write of size 8 by thread #1. ==95548== Locks held: none. ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, st",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:1808,performance,memor,memory,1808,"::tuple<ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0> >(void*) (__functional_base:416). ==95548== by 0x102B4F99C: _pthread_body (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4F919: _pthread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4D350: thread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== . ==95548== This conflicts with a previous write of size 8 by thread #1. ==95548== Locks held: none. ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:2460,performance,memor,memory,2460," 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (in /usr/lib/libc++.1.dylib). ==95548== by 0x10204EF84: TStorage::ObjectAlloc(un",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:95,security,Lock,Locks,95,"```. ==95548== Possible data race during read of size 8 at 0x10D9AC9C8 by thread #2. ==95548== Locks held: none. ==95548== at 0x1020C5E55: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x1019B6327: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:104). ==95548== by 0x1019B6505: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:94). ==95548== by 0x10196BBFD: ROOT::Experimental::TBufferMerger::WriteOutputFile() (TBufferMerger.cxx:81). ==95548== by 0x10196E1E7: ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0::operator()() const (TBufferMerger.cxx:25). ==95548== by 0x10196DF38: void* std::__1::__thread_proxy<std::__1::tuple<ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0> >(void*) (__functional_base:416). ==95548== by 0x102B4F99C: _pthread_body (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4F919: _pthread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4D350: thread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== . ==95548== This conflicts with a previous write of size 8 by thread #1. ==95548== Locks held: none. ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:1290,security,Lock,Locks,1290,"TObject*) (TList.h:77). ==95548== by 0x1019B6327: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:104). ==95548== by 0x1019B6505: TFileMerger::TFileMerger(bool, bool) (TFileMerger.cxx:94). ==95548== by 0x10196BBFD: ROOT::Experimental::TBufferMerger::WriteOutputFile() (TBufferMerger.cxx:81). ==95548== by 0x10196E1E7: ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0::operator()() const (TBufferMerger.cxx:25). ==95548== by 0x10196DF38: void* std::__1::__thread_proxy<std::__1::tuple<ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0> >(void*) (__functional_base:416). ==95548== by 0x102B4F99C: _pthread_body (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4F919: _pthread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4D350: thread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== . ==95548== This conflicts with a previous write of size 8 by thread #1. ==95548== Locks held: none. ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, st",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:1808,usability,memor,memory,1808,"::tuple<ROOT::Experimental::TBufferMerger::TBufferMerger(char const*, char const*, int)::$_0> >(void*) (__functional_base:416). ==95548== by 0x102B4F99C: _pthread_body (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4F919: _pthread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== by 0x102B4D350: thread_start (in /usr/lib/system/libsystem_pthread.dylib). ==95548== . ==95548== This conflicts with a previous write of size 8 by thread #1. ==95548== Locks held: none. ==95548== at 0x1020C5E62: TList::AddLast(TObject*) (TList.cxx:155). ==95548== by 0x1020C2FD6: THashList::AddLast(TObject*) (THashList.cxx:93). ==95548== by 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:2460,usability,memor,memory,2460," 0x101F9D721: TList::Add(TObject*) (TList.h:77). ==95548== by 0x10167591C: TChain::TChain(char const*, char const*) (TChain.cxx:169). ==95548== by 0x1016759C4: TChain::TChain(char const*, char const*) (TChain.cxx:149). ==95548== by 0x10002ADB0: std::__1::shared_ptr<TChain> std::__1::shared_ptr<TChain>::make_shared<char const*>(char const*&&) (memory:2194). ==95548== by 0x10001B306: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::SnapshotImpl<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (memory:4775). ==95548== by 0x100007C9B: ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager> ROOT::Experimental::TDF::TInterface<ROOT::Detail::TDF::TLoopManager>::Snapshot<int>(std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::experimental::fundamentals_v1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, ROOT::Experimental::TDF::TSnapshotOptions const&) (TDFInterface.hxx:505). ==95548== Address 0x10d9ac9c8 is 56 bytes inside a block of size 88 alloc'd. ==95548== at 0x100192EA1: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_helgrind-amd64-darwin.so). ==95548== by 0x10265D7DD: operator new(unsigned long) (in /usr/lib/libc++.1.dylib). ==95548== by 0x10204EF84: TStorage::ObjectAlloc(un",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:15,deployability,stack,stacktrace,15,Well we need a stacktrace of the crash to correlate. E.g. the `TMemFile`s are generally subject to the list of cleanup thread issues (disclaimer: I didn't check the patch).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:165,deployability,patch,patch,165,Well we need a stacktrace of the crash to correlate. E.g. the `TMemFile`s are generally subject to the list of cleanup thread issues (disclaimer: I didn't check the patch).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:88,integrability,sub,subject,88,Well we need a stacktrace of the crash to correlate. E.g. the `TMemFile`s are generally subject to the list of cleanup thread issues (disclaimer: I didn't check the patch).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:165,safety,patch,patch,165,Well we need a stacktrace of the crash to correlate. E.g. the `TMemFile`s are generally subject to the list of cleanup thread issues (disclaimer: I didn't check the patch).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:165,security,patch,patch,165,Well we need a stacktrace of the crash to correlate. E.g. the `TMemFile`s are generally subject to the list of cleanup thread issues (disclaimer: I didn't check the patch).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:59,deployability,build,build,59,[here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7506/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/) is a stacktrace. I think an interesting piece of information would be the name of the `gDirectory` when `~TContext` bombs and the name of the directory its destructor would like to set as `gDir`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:167,deployability,stack,stacktrace,167,[here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7506/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/) is a stacktrace. I think an interesting piece of information would be the name of the `gDirectory` when `~TContext` bombs and the name of the directory its destructor would like to set as `gDir`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:70,safety,test,testReport,70,[here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7506/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/) is a stacktrace. I think an interesting piece of information would be the name of the `gDirectory` when `~TContext` bombs and the name of the directory its destructor would like to set as `gDir`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:109,safety,test,test,109,[here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7506/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/) is a stacktrace. I think an interesting piece of information would be the name of the `gDirectory` when `~TContext` bombs and the name of the directory its destructor would like to set as `gDir`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:70,testability,test,testReport,70,[here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7506/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/) is a stacktrace. I think an interesting piece of information would be the name of the `gDirectory` when `~TContext` bombs and the name of the directory its destructor would like to set as `gDir`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:109,testability,test,test,109,[here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7506/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/) is a stacktrace. I think an interesting piece of information would be the name of the `gDirectory` when `~TContext` bombs and the name of the directory its destructor would like to set as `gDir`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:125,energy efficiency,core,core,125,```. #8 <signal handler called>. #9 0x00007f089b3f153c in TDirectory::UnregisterContext(TDirectory::TContext*) () at ../root/core/base/src/TDirectory.cxx:1247. #10 0x00000000004ea2ee in TDirectory::TContext::~TContext() () at include/TDirectory.h:79. ```. This usually happens when a thread has/had a gDirectory pointing to a file/directory and that this directory is deleted by another thread.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:9,security,sign,signal,9,```. #8 <signal handler called>. #9 0x00007f089b3f153c in TDirectory::UnregisterContext(TDirectory::TContext*) () at ../root/core/base/src/TDirectory.cxx:1247. #10 0x00000000004ea2ee in TDirectory::TContext::~TContext() () at include/TDirectory.h:79. ```. This usually happens when a thread has/had a gDirectory pointing to a file/directory and that this directory is deleted by another thread.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:75,deployability,patch,patch,75,Is there a way to understand if those race conditions pre-existing to this patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:75,safety,patch,patch,75,Is there a way to understand if those race conditions pre-existing to this patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:75,security,patch,patch,75,Is there a way to understand if those race conditions pre-existing to this patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:18,testability,understand,understand,18,Is there a way to understand if those race conditions pre-existing to this patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:158,deployability,version,versions,158,"The issue being pre-existing is getting less and less likely, given the info here... But I think Danilo and Enrico know this kind of issue from previous code versions; I bet you can solve this with their help!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:158,integrability,version,versions,158,"The issue being pre-existing is getting less and less likely, given the info here... But I think Danilo and Enrico know this kind of issue from previous code versions; I bet you can solve this with their help!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:158,modifiability,version,versions,158,"The issue being pre-existing is getting less and less likely, given the info here... But I think Danilo and Enrico know this kind of issue from previous code versions; I bet you can solve this with their help!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:204,usability,help,help,204,"The issue being pre-existing is getting less and less likely, given the info here... But I think Danilo and Enrico know this kind of issue from previous code versions; I bet you can solve this with their help!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:242,availability,state,state,242,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:242,integrability,state,state,242,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:129,safety,test,test,129,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:137,safety,isol,isolation,137,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:286,safety,test,test,286,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:357,safety,test,test,357,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:137,security,iso,isolation,137,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:129,testability,test,test,129,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:137,testability,isol,isolation,137,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:286,testability,test,test,286,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:357,testability,test,test,357,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:17,usability,help,help,17,"yeah i'm here to help. in addition to the suggestions above, since you said that the crash disappears if you run the problematic test in isolation, it might be interesting to check whether the different threads have a `gDirectory` in a dirty state after the execution of the _previous_ test. Those invalid `gDirs` might be picked up by the TContexts in the test that crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,availability,failur,failure,33,@phsft-bot build! Seems like the failure is infrastructure but let's retrigger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:11,deployability,build,build,11,@phsft-bot build! Seems like the failure is infrastructure but let's retrigger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,deployability,fail,failure,33,@phsft-bot build! Seems like the failure is infrastructure but let's retrigger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:44,deployability,infrastructur,infrastructure,44,@phsft-bot build! Seems like the failure is infrastructure but let's retrigger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,performance,failur,failure,33,@phsft-bot build! Seems like the failure is infrastructure but let's retrigger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:33,reliability,fail,failure,33,@phsft-bot build! Seems like the failure is infrastructure but let's retrigger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:120,deployability,version,version,120,"> Ok, done. I don't understand how is that a non persistent data member but you are the expert. Humm ... when the class version is set to zero then **all** the data member of the class are consider transient ... i.e. non-persistent .... When you increase to the version to 1, this turned implicitly all the data member to become persistent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:262,deployability,version,version,262,"> Ok, done. I don't understand how is that a non persistent data member but you are the expert. Humm ... when the class version is set to zero then **all** the data member of the class are consider transient ... i.e. non-persistent .... When you increase to the version to 1, this turned implicitly all the data member to become persistent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:120,integrability,version,version,120,"> Ok, done. I don't understand how is that a non persistent data member but you are the expert. Humm ... when the class version is set to zero then **all** the data member of the class are consider transient ... i.e. non-persistent .... When you increase to the version to 1, this turned implicitly all the data member to become persistent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:262,integrability,version,version,262,"> Ok, done. I don't understand how is that a non persistent data member but you are the expert. Humm ... when the class version is set to zero then **all** the data member of the class are consider transient ... i.e. non-persistent .... When you increase to the version to 1, this turned implicitly all the data member to become persistent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:120,modifiability,version,version,120,"> Ok, done. I don't understand how is that a non persistent data member but you are the expert. Humm ... when the class version is set to zero then **all** the data member of the class are consider transient ... i.e. non-persistent .... When you increase to the version to 1, this turned implicitly all the data member to become persistent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:262,modifiability,version,version,262,"> Ok, done. I don't understand how is that a non persistent data member but you are the expert. Humm ... when the class version is set to zero then **all** the data member of the class are consider transient ... i.e. non-persistent .... When you increase to the version to 1, this turned implicitly all the data member to become persistent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:20,testability,understand,understand,20,"> Ok, done. I don't understand how is that a non persistent data member but you are the expert. Humm ... when the class version is set to zero then **all** the data member of the class are consider transient ... i.e. non-persistent .... When you increase to the version to 1, this turned implicitly all the data member to become persistent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:285,deployability,version,version,285,"...by the way, why does TFileMerger need a `ClassDef` in the first place? On Thu, Oct 5, 2017 at 3:08 PM, Philippe Canal <notifications@github.com>. wrote:. > Ok, done. I don't understand how is that a non persistent data member but. > you are the expert. >. > Humm ... when the class version is set to zero then *all* the data member. > of the class are consider transient ... i.e. non-persistent .... When you. > increase to the version to 1, this turned implicitly all the data member to. > become persistent. >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1073#issuecomment-334459434>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-nEGiaaVjwRDi9gIw3FcpqW7Ep8Cks5spNTZgaJpZM4Pn4OQ>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:431,deployability,version,version,431,"...by the way, why does TFileMerger need a `ClassDef` in the first place? On Thu, Oct 5, 2017 at 3:08 PM, Philippe Canal <notifications@github.com>. wrote:. > Ok, done. I don't understand how is that a non persistent data member but. > you are the expert. >. > Humm ... when the class version is set to zero then *all* the data member. > of the class are consider transient ... i.e. non-persistent .... When you. > increase to the version to 1, this turned implicitly all the data member to. > become persistent. >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1073#issuecomment-334459434>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-nEGiaaVjwRDi9gIw3FcpqW7Ep8Cks5spNTZgaJpZM4Pn4OQ>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:285,integrability,version,version,285,"...by the way, why does TFileMerger need a `ClassDef` in the first place? On Thu, Oct 5, 2017 at 3:08 PM, Philippe Canal <notifications@github.com>. wrote:. > Ok, done. I don't understand how is that a non persistent data member but. > you are the expert. >. > Humm ... when the class version is set to zero then *all* the data member. > of the class are consider transient ... i.e. non-persistent .... When you. > increase to the version to 1, this turned implicitly all the data member to. > become persistent. >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1073#issuecomment-334459434>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-nEGiaaVjwRDi9gIw3FcpqW7Ep8Cks5spNTZgaJpZM4Pn4OQ>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:431,integrability,version,version,431,"...by the way, why does TFileMerger need a `ClassDef` in the first place? On Thu, Oct 5, 2017 at 3:08 PM, Philippe Canal <notifications@github.com>. wrote:. > Ok, done. I don't understand how is that a non persistent data member but. > you are the expert. >. > Humm ... when the class version is set to zero then *all* the data member. > of the class are consider transient ... i.e. non-persistent .... When you. > increase to the version to 1, this turned implicitly all the data member to. > become persistent. >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1073#issuecomment-334459434>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-nEGiaaVjwRDi9gIw3FcpqW7Ep8Cks5spNTZgaJpZM4Pn4OQ>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:285,modifiability,version,version,285,"...by the way, why does TFileMerger need a `ClassDef` in the first place? On Thu, Oct 5, 2017 at 3:08 PM, Philippe Canal <notifications@github.com>. wrote:. > Ok, done. I don't understand how is that a non persistent data member but. > you are the expert. >. > Humm ... when the class version is set to zero then *all* the data member. > of the class are consider transient ... i.e. non-persistent .... When you. > increase to the version to 1, this turned implicitly all the data member to. > become persistent. >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1073#issuecomment-334459434>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-nEGiaaVjwRDi9gIw3FcpqW7Ep8Cks5spNTZgaJpZM4Pn4OQ>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:431,modifiability,version,version,431,"...by the way, why does TFileMerger need a `ClassDef` in the first place? On Thu, Oct 5, 2017 at 3:08 PM, Philippe Canal <notifications@github.com>. wrote:. > Ok, done. I don't understand how is that a non persistent data member but. > you are the expert. >. > Humm ... when the class version is set to zero then *all* the data member. > of the class are consider transient ... i.e. non-persistent .... When you. > increase to the version to 1, this turned implicitly all the data member to. > become persistent. >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1073#issuecomment-334459434>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-nEGiaaVjwRDi9gIw3FcpqW7Ep8Cks5spNTZgaJpZM4Pn4OQ>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:19,reliability,doe,does,19,"...by the way, why does TFileMerger need a `ClassDef` in the first place? On Thu, Oct 5, 2017 at 3:08 PM, Philippe Canal <notifications@github.com>. wrote:. > Ok, done. I don't understand how is that a non persistent data member but. > you are the expert. >. > Humm ... when the class version is set to zero then *all* the data member. > of the class are consider transient ... i.e. non-persistent .... When you. > increase to the version to 1, this turned implicitly all the data member to. > become persistent. >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1073#issuecomment-334459434>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-nEGiaaVjwRDi9gIw3FcpqW7Ep8Cks5spNTZgaJpZM4Pn4OQ>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:771,security,auth,auth,771,"...by the way, why does TFileMerger need a `ClassDef` in the first place? On Thu, Oct 5, 2017 at 3:08 PM, Philippe Canal <notifications@github.com>. wrote:. > Ok, done. I don't understand how is that a non persistent data member but. > you are the expert. >. > Humm ... when the class version is set to zero then *all* the data member. > of the class are consider transient ... i.e. non-persistent .... When you. > increase to the version to 1, this turned implicitly all the data member to. > become persistent. >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1073#issuecomment-334459434>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-nEGiaaVjwRDi9gIw3FcpqW7Ep8Cks5spNTZgaJpZM4Pn4OQ>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:177,testability,understand,understand,177,"...by the way, why does TFileMerger need a `ClassDef` in the first place? On Thu, Oct 5, 2017 at 3:08 PM, Philippe Canal <notifications@github.com>. wrote:. > Ok, done. I don't understand how is that a non persistent data member but. > you are the expert. >. > Humm ... when the class version is set to zero then *all* the data member. > of the class are consider transient ... i.e. non-persistent .... When you. > increase to the version to 1, this turned implicitly all the data member to. > become persistent. >. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1073#issuecomment-334459434>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-nEGiaaVjwRDi9gIw3FcpqW7Ep8Cks5spNTZgaJpZM4Pn4OQ>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:77,integrability,rout,routines,77,Any class that inherits from TObject must have a ClassDef otherwise some the routines are inconsistent (like IsA() ).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1073:15,modifiability,inherit,inherits,15,Any class that inherits from TObject must have a ClassDef otherwise some the routines are inconsistent (like IsA() ).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1073
https://github.com/root-project/root/pull/1079:39,availability,Error,Error,39,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:91,availability,Failur,Failure,91,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:91,deployability,Fail,Failure,91,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:150,deployability,fail,failed,150,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:39,performance,Error,Error,39,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:91,performance,Failur,Failure,91,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:207,performance,Network,Network,207,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:91,reliability,Fail,Failure,91,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:150,reliability,fail,failed,150,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:39,safety,Error,Error,39,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:207,security,Network,Network,207,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1079:39,usability,Error,Error,39,```. Processing runCloseTWebFile.C... +Error in <DavixOpen>: can not open file with davix: Failure Could not connect to server after 3 attempts (6). +failed to open http://root.cern.ch/files/na49.root. ```. Network problem only.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1079
https://github.com/root-project/root/pull/1081:23,deployability,build,builds,23,I'll merge once the PR builds are verified to be green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1081
https://github.com/root-project/root/pull/1081:49,energy efficiency,green,green,49,I'll merge once the PR builds are verified to be green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1081
https://github.com/root-project/root/pull/1081:34,testability,verif,verified,34,I'll merge once the PR builds are verified to be green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1081
https://github.com/root-project/root/pull/1081:31,integrability,messag,messages,31,@dpiparo I reworded the commit messages to include the CIDs of the issues,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1081
https://github.com/root-project/root/pull/1081:31,interoperability,messag,messages,31,@dpiparo I reworded the commit messages to include the CIDs of the issues,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1081
https://github.com/root-project/root/pull/1081:40,deployability,build,builds,40,"Hi @bluehood , thanks. As for the green builds I think we are in a difficult situation. Given the amplitude of the changes, I am merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1081
https://github.com/root-project/root/pull/1081:34,energy efficiency,green,green,34,"Hi @bluehood , thanks. As for the green builds I think we are in a difficult situation. Given the amplitude of the changes, I am merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1081
https://github.com/root-project/root/pull/1083:58,deployability,patch,patches,58,"If the change is accepted, please cherry-pick to v6-10-00-patches branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:58,safety,patch,patches,58,"If the change is accepted, please cherry-pick to v6-10-00-patches branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:58,security,patch,patches,58,"If the change is accepted, please cherry-pick to v6-10-00-patches branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:45,interoperability,format,format,45,Applied whitespace change suggested by clang-format in last push.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:82,safety,test,test,82,@bastianbeischer Could you please rebase and push again so we can run Jenkins and test this? Thank you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:82,testability,test,test,82,@bastianbeischer Could you please rebase and push again so we can run Jenkins and test this? Thank you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:15,availability,Ping,Ping,15,@pcanal @couet Ping? :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:171,deployability,releas,release,171,"Hm :-( I didn't receive any comments on the actual changes for almost two months, could someone please take a look? It would be good to have this fix included in the next release (6.12/00?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:87,deployability,patch,patches,87,Thanks very much Olivier! Much appreciated. Could we also cherry-pick this to v6-12-00-patches please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:87,safety,patch,patches,87,Thanks very much Olivier! Much appreciated. Could we also cherry-pick this to v6-12-00-patches please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:87,security,patch,patches,87,Thanks very much Olivier! Much appreciated. Could we also cherry-pick this to v6-12-00-patches please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1083:91,deployability,releas,release,91,> Could someone please take a look? It would be good to have this fix included in the next release (6.12/00?). Done. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1083
https://github.com/root-project/root/pull/1084:49,performance,concurren,concurrently,49,of course `TTree->SetDirectory` cannot be called concurrently on different TTrees...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1084
https://github.com/root-project/root/pull/1084:173,integrability,sub,suboptimal,173,"Hi @bluehood, is there really no way to reuse the TTrees? It seems wasteful to create one per task and flush data immediately, since that will probably make the output file suboptimal. Another possibility is to do what we considered before (copy entries directly, without using the TBufferMerger).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1084
https://github.com/root-project/root/pull/1084:40,modifiability,reu,reuse,40,"Hi @bluehood, is there really no way to reuse the TTrees? It seems wasteful to create one per task and flush data immediately, since that will probably make the output file suboptimal. Another possibility is to do what we considered before (copy entries directly, without using the TBufferMerger).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1084
https://github.com/root-project/root/pull/1084:38,availability,state,state,38,@amadio after we go back to a working state I agree we should look into optimizing this region of the code. edit: (in master though :P ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1084
https://github.com/root-project/root/pull/1084:72,energy efficiency,optim,optimizing,72,@amadio after we go back to a working state I agree we should look into optimizing this region of the code. edit: (in master though :P ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1084
https://github.com/root-project/root/pull/1084:38,integrability,state,state,38,@amadio after we go back to a working state I agree we should look into optimizing this region of the code. edit: (in master though :P ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1084
https://github.com/root-project/root/pull/1084:72,performance,optimiz,optimizing,72,@amadio after we go back to a working state I agree we should look into optimizing this region of the code. edit: (in master though :P ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1084
https://github.com/root-project/root/pull/1084:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1084
https://github.com/root-project/root/pull/1084:11,deployability,build,build,11,@phsft-bot build please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1084
https://github.com/root-project/root/pull/1085:22,availability,failur,failure,22,"@amadio regarding the failure in `dataframe_simple`, I have no idea why it should only write half of the data-points to disk, is there any way we could be missing a final flush of the `TBufferMerger`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:22,deployability,fail,failure,22,"@amadio regarding the failure in `dataframe_simple`, I have no idea why it should only write half of the data-points to disk, is there any way we could be missing a final flush of the `TBufferMerger`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:22,performance,failur,failure,22,"@amadio regarding the failure in `dataframe_simple`, I have no idea why it should only write half of the data-points to disk, is there any way we could be missing a final flush of the `TBufferMerger`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:120,performance,disk,disk,120,"@amadio regarding the failure in `dataframe_simple`, I have no idea why it should only write half of the data-points to disk, is there any way we could be missing a final flush of the `TBufferMerger`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:22,reliability,fail,failure,22,"@amadio regarding the failure in `dataframe_simple`, I have no idea why it should only write half of the data-points to disk, is there any way we could be missing a final flush of the `TBufferMerger`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:170,availability,cluster,clusters,170,"We were missing data in Snapshot's output due to the missing explicit writes. I do not understand why, but it can be tested by snapshotting columns from a file with many clusters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:170,deployability,cluster,clusters,170,"We were missing data in Snapshot's output due to the missing explicit writes. I do not understand why, but it can be tested by snapshotting columns from a file with many clusters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:117,safety,test,tested,117,"We were missing data in Snapshot's output due to the missing explicit writes. I do not understand why, but it can be tested by snapshotting columns from a file with many clusters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:87,testability,understand,understand,87,"We were missing data in Snapshot's output due to the missing explicit writes. I do not understand why, but it can be tested by snapshotting columns from a file with many clusters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:117,testability,test,tested,117,"We were missing data in Snapshot's output due to the missing explicit writes. I do not understand why, but it can be tested by snapshotting columns from a file with many clusters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:138,deployability,log,logic,138,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:209,integrability,sub,subsequent,209,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:393,modifiability,refact,refactoring,393,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:181,performance,time,time,181,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:220,performance,time,times,220,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:393,performance,refactor,refactoring,393,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:138,safety,log,logic,138,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:311,safety,test,tests,311,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:138,security,log,logic,138,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:138,testability,log,logic,138,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:311,testability,test,tests,311,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that. It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1085:11,deployability,build,build,11,@phsft-bot build please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1085
https://github.com/root-project/root/pull/1086:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1086
https://github.com/root-project/root/pull/1087:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:1,deployability,modul,modulo,1,(modulo formatting),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:8,interoperability,format,formatting,8,(modulo formatting),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:1,modifiability,modul,modulo,1,(modulo formatting),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:1,safety,modul,modulo,1,(modulo formatting),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:73,interoperability,format,formatting,73,"All the code in there is misformatted, so I just made an extra comit for formatting this method.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:71,deployability,build,builds,71,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:130,deployability,infrastructur,infrastructure,130,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:202,deployability,modul,modules,202,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:295,deployability,modul,modulemaps,295,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:202,modifiability,modul,modules,202,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:295,modifiability,modul,modulemaps,295,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:46,reliability,doe,doesn,46,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:202,safety,modul,modules,202,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:260,safety,test,test,260,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:295,safety,modul,modulemaps,295,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1087:260,testability,test,test,260,"This fixes the problem on the ubuntu node and doesn't break the normal builds on the ubuntu node. The other nodes are dead due to infrastructure problems. As the only functional change is behind an `if(modules)` and we know it compiles, I'll merge this now to test my next PR fixing the missing modulemaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1087
https://github.com/root-project/root/pull/1088:11,deployability,build,build,11,@phsft-bot build. Relaunching now that externals are fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1088
https://github.com/root-project/root/pull/1088:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1088
https://github.com/root-project/root/pull/1088:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1088
https://github.com/root-project/root/pull/1088:48,availability,failur,failures,48,"@bellenot Is this ready to be merged? The tests failures are fixed on master now, and are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1088
https://github.com/root-project/root/pull/1088:48,deployability,fail,failures,48,"@bellenot Is this ready to be merged? The tests failures are fixed on master now, and are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1088
https://github.com/root-project/root/pull/1088:48,performance,failur,failures,48,"@bellenot Is this ready to be merged? The tests failures are fixed on master now, and are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1088
https://github.com/root-project/root/pull/1088:48,reliability,fail,failures,48,"@bellenot Is this ready to be merged? The tests failures are fixed on master now, and are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1088
https://github.com/root-project/root/pull/1088:42,safety,test,tests,42,"@bellenot Is this ready to be merged? The tests failures are fixed on master now, and are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1088
https://github.com/root-project/root/pull/1088:42,testability,test,tests,42,"@bellenot Is this ready to be merged? The tests failures are fixed on master now, and are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1088
https://github.com/root-project/root/pull/1089:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1089
https://github.com/root-project/root/pull/1089:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1089
https://github.com/root-project/root/pull/1089:75,availability,failur,failures,75,@pcanal Could you please give your ok here? I'd like to merge. I think the failures are unrelated and can be ignored (they have been fixed on master).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1089
https://github.com/root-project/root/pull/1089:75,deployability,fail,failures,75,@pcanal Could you please give your ok here? I'd like to merge. I think the failures are unrelated and can be ignored (they have been fixed on master).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1089
https://github.com/root-project/root/pull/1089:75,performance,failur,failures,75,@pcanal Could you please give your ok here? I'd like to merge. I think the failures are unrelated and can be ignored (they have been fixed on master).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1089
https://github.com/root-project/root/pull/1089:75,reliability,fail,failures,75,@pcanal Could you please give your ok here? I'd like to merge. I think the failures are unrelated and can be ignored (they have been fixed on master).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1089
https://github.com/root-project/root/pull/1090:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1090
https://github.com/root-project/root/pull/1091:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:22,availability,error,error,22,Well one more merging error to go it seems... let's wait with merging until Jenkins is back from the dead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:22,performance,error,error,22,Well one more merging error to go it seems... let's wait with merging until Jenkins is back from the dead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:22,safety,error,error,22,Well one more merging error to go it seems... let's wait with merging until Jenkins is back from the dead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:22,usability,error,error,22,Well one more merging error to go it seems... let's wait with merging until Jenkins is back from the dead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:0,deployability,Fail,Failing,0,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:90,deployability,updat,update,90,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:113,deployability,build,build,113,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:0,reliability,Fail,Failing,0,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:72,reliability,doe,doesn,72,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:30,safety,test,tests,30,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:90,safety,updat,update,90,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:90,security,updat,update,90,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:30,testability,test,tests,30,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1091:119,usability,statu,status,119,"Failing because of TDataFrame tests, otherwise seems fine. Also Jenkins doesn't correctly update the link to the build status it seems...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1091
https://github.com/root-project/root/pull/1093:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1093
https://github.com/root-project/root/pull/1098:67,safety,test,tested,67,"These changes are fine, but could probably be added to #1092 to be tested together. Otherwise, feel free to just merge and rebase the other PR, I don't think this one has anything controversial.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1098
https://github.com/root-project/root/pull/1098:67,testability,test,tested,67,"These changes are fine, but could probably be added to #1092 to be tested together. Otherwise, feel free to just merge and rebase the other PR, I don't think this one has anything controversial.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1098
https://github.com/root-project/root/pull/1101:11,deployability,build,build,11,@phsft-bot build with flags -Dimt=OFF -Dccache=ON -Dvc=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1101
https://github.com/root-project/root/pull/1101:11,deployability,build,build,11,@phsft-bot build with flags -Dimt=OFF -Dccache=ON -Dvc=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1101
https://github.com/root-project/root/pull/1102:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON -Dvc=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1102
https://github.com/root-project/root/pull/1102:39,integrability,event,eventually,39,Thank you ! I will do another test and eventually merge it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1102
https://github.com/root-project/root/pull/1102:30,safety,test,test,30,Thank you ! I will do another test and eventually merge it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1102
https://github.com/root-project/root/pull/1102:30,testability,test,test,30,Thank you ! I will do another test and eventually merge it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1102
https://github.com/root-project/root/pull/1102:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_veccore=ON -DVc=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1102
https://github.com/root-project/root/pull/1103:30,safety,test,test,30,"@bluehood I've added an extra test with some `return`s as part of branch names, etc. However, supporting something like `Define(""x2"", ""x*x // return hahahaha"")` cannot be supported unless we strip comments from what the user provides prior to doing the regex match. I'd say let it be for now. Sane people should add actual comments to their code *outside* the call to `Define()` rather than inside the string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:30,testability,test,test,30,"@bluehood I've added an extra test with some `return`s as part of branch names, etc. However, supporting something like `Define(""x2"", ""x*x // return hahahaha"")` cannot be supported unless we strip comments from what the user provides prior to doing the regex match. I'd say let it be for now. Sane people should add actual comments to their code *outside* the call to `Define()` rather than inside the string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:94,usability,support,supporting,94,"@bluehood I've added an extra test with some `return`s as part of branch names, etc. However, supporting something like `Define(""x2"", ""x*x // return hahahaha"")` cannot be supported unless we strip comments from what the user provides prior to doing the regex match. I'd say let it be for now. Sane people should add actual comments to their code *outside* the call to `Define()` rather than inside the string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:171,usability,support,supported,171,"@bluehood I've added an extra test with some `return`s as part of branch names, etc. However, supporting something like `Define(""x2"", ""x*x // return hahahaha"")` cannot be supported unless we strip comments from what the user provides prior to doing the regex match. I'd say let it be for now. Sane people should add actual comments to their code *outside* the call to `Define()` rather than inside the string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:220,usability,user,user,220,"@bluehood I've added an extra test with some `return`s as part of branch names, etc. However, supporting something like `Define(""x2"", ""x*x // return hahahaha"")` cannot be supported unless we strip comments from what the user provides prior to doing the regex match. I'd say let it be for now. Sane people should add actual comments to their code *outside* the call to `Define()` rather than inside the string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:170,deployability,updat,updated,170,"@amadio not a problem, let's just make it very clear in the docs what can and cannot be done with expression strings. Both `Define` and `Filter`'s doxygen docs should be updated with the new feature actually :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:137,integrability,Filter,Filter,137,"@amadio not a problem, let's just make it very clear in the docs what can and cannot be done with expression strings. Both `Define` and `Filter`'s doxygen docs should be updated with the new feature actually :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:170,safety,updat,updated,170,"@amadio not a problem, let's just make it very clear in the docs what can and cannot be done with expression strings. Both `Define` and `Filter`'s doxygen docs should be updated with the new feature actually :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:170,security,updat,updated,170,"@amadio not a problem, let's just make it very clear in the docs what can and cannot be done with expression strings. Both `Define` and `Filter`'s doxygen docs should be updated with the new feature actually :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:47,usability,clear,clear,47,"@amadio not a problem, let's just make it very clear in the docs what can and cannot be done with expression strings. Both `Define` and `Filter`'s doxygen docs should be updated with the new feature actually :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:349,availability,state,state,349,"@amadio @dpiparo what do you think, should we or should we not support `Filter(""x>0 //with a comment"")`? If yes, it's a crippled feature because people have to be careful not to use column names or ""return"" in the comment text. If not, should we check for comments and warn if they are present? I don't know what's best. For sure we have to clearly state in the docs what's supported and what's not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:72,integrability,Filter,Filter,72,"@amadio @dpiparo what do you think, should we or should we not support `Filter(""x>0 //with a comment"")`? If yes, it's a crippled feature because people have to be careful not to use column names or ""return"" in the comment text. If not, should we check for comments and warn if they are present? I don't know what's best. For sure we have to clearly state in the docs what's supported and what's not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:349,integrability,state,state,349,"@amadio @dpiparo what do you think, should we or should we not support `Filter(""x>0 //with a comment"")`? If yes, it's a crippled feature because people have to be careful not to use column names or ""return"" in the comment text. If not, should we check for comments and warn if they are present? I don't know what's best. For sure we have to clearly state in the docs what's supported and what's not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:63,usability,support,support,63,"@amadio @dpiparo what do you think, should we or should we not support `Filter(""x>0 //with a comment"")`? If yes, it's a crippled feature because people have to be careful not to use column names or ""return"" in the comment text. If not, should we check for comments and warn if they are present? I don't know what's best. For sure we have to clearly state in the docs what's supported and what's not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:341,usability,clear,clearly,341,"@amadio @dpiparo what do you think, should we or should we not support `Filter(""x>0 //with a comment"")`? If yes, it's a crippled feature because people have to be careful not to use column names or ""return"" in the comment text. If not, should we check for comments and warn if they are present? I don't know what's best. For sure we have to clearly state in the docs what's supported and what's not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:374,usability,support,supported,374,"@amadio @dpiparo what do you think, should we or should we not support `Filter(""x>0 //with a comment"")`? If yes, it's a crippled feature because people have to be careful not to use column names or ""return"" in the comment text. If not, should we check for comments and warn if they are present? I don't know what's best. For sure we have to clearly state in the docs what's supported and what's not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:340,safety,test,test,340,"If there's no return by itself as a word in the comment (i.e., as in your example above), it's already supported. We shouldn't say anything in the docs, because people will not assume they can just insert comments at will into the string. However, as long as they don't insert ""return"" in a comment, it should just work. Have a look at the test, for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:340,testability,test,test,340,"If there's no return by itself as a word in the comment (i.e., as in your example above), it's already supported. We shouldn't say anything in the docs, because people will not assume they can just insert comments at will into the string. However, as long as they don't insert ""return"" in a comment, it should just work. Have a look at the test, for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:103,usability,support,supported,103,"If there's no return by itself as a word in the comment (i.e., as in your example above), it's already supported. We shouldn't say anything in the docs, because people will not assume they can just insert comments at will into the string. However, as long as they don't insert ""return"" in a comment, it should just work. Have a look at the test, for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:87,integrability,filter,filters,87,I'll change the docs to say something about the new capabilities of jitted defines and filters then push again.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:14,energy efficiency,green,green,14,"@amadio sure, green light from me!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1103:69,energy efficiency,power,powerful,69,Thanks for this PR. The changes can go in also after the merge. This powerful functionality has been nicely implemented. I appreciate in particular the presence of the same tutorial both in Python and C++ right from the start.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1103
https://github.com/root-project/root/pull/1109:11,deployability,build,build,11,@phsft-bot build again please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1109
https://github.com/root-project/root/pull/1109:11,deployability,build,build,11,@phsft-bot build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1109
https://github.com/root-project/root/pull/1109:29,interoperability,format,format,29,phsft-bot hates me and clang-format is a bit unreasonable. @dpiparo can I merge?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1109
https://github.com/root-project/root/pull/1111:11,deployability,build,build,11,@phsft-bot build again please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1111
https://github.com/root-project/root/pull/1113:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1113
https://github.com/root-project/root/pull/1114:15,deployability,fail,failed,15,"Only git fetch failed, build was fine. It just had to retry before getting the git checkout. @Axel-Naumann Can we merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1114
https://github.com/root-project/root/pull/1114:23,deployability,build,build,23,"Only git fetch failed, build was fine. It just had to retry before getting the git checkout. @Axel-Naumann Can we merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1114
https://github.com/root-project/root/pull/1114:15,reliability,fail,failed,15,"Only git fetch failed, build was fine. It just had to retry before getting the git checkout. @Axel-Naumann Can we merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1114
https://github.com/root-project/root/pull/1115:28,availability,failur,failure,28,I cannot reproduce the test failure on a Mac 10.12 machine. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1115
https://github.com/root-project/root/pull/1115:28,deployability,fail,failure,28,I cannot reproduce the test failure on a Mac 10.12 machine. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1115
https://github.com/root-project/root/pull/1115:28,performance,failur,failure,28,I cannot reproduce the test failure on a Mac 10.12 machine. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1115
https://github.com/root-project/root/pull/1115:28,reliability,fail,failure,28,I cannot reproduce the test failure on a Mac 10.12 machine. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1115
https://github.com/root-project/root/pull/1115:23,safety,test,test,23,I cannot reproduce the test failure on a Mac 10.12 machine. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1115
https://github.com/root-project/root/pull/1115:23,testability,test,test,23,I cannot reproduce the test failure on a Mac 10.12 machine. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1115
https://github.com/root-project/root/pull/1119:11,deployability,build,build,11,@phsft-bot build with flags -Dvc=OFF -Dimt=OFF -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1119
https://github.com/root-project/root/pull/1120:56,deployability,build,builds,56,"Addressed all comments, rebased and ready to merge once builds are green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1120
https://github.com/root-project/root/pull/1120:67,energy efficiency,green,green,67,"Addressed all comments, rebased and ready to merge once builds are green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1120
https://github.com/root-project/root/pull/1121:11,deployability,build,build,11,@phsft-bot build just on slc6-i686/gcc49,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1121
https://github.com/root-project/root/pull/1123:150,performance,time,time,150,"Hi @xvallspl. It's probably worth adding tests for each acceptable type to check that the constructors are working as expected. This is not the first time a fix is needed for it, probably best to make sure it's not broken by future changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1123
https://github.com/root-project/root/pull/1123:41,safety,test,tests,41,"Hi @xvallspl. It's probably worth adding tests for each acceptable type to check that the constructors are working as expected. This is not the first time a fix is needed for it, probably best to make sure it's not broken by future changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1123
https://github.com/root-project/root/pull/1123:41,testability,test,tests,41,"Hi @xvallspl. It's probably worth adding tests for each acceptable type to check that the constructors are working as expected. This is not the first time a fix is needed for it, probably best to make sure it's not broken by future changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1123
https://github.com/root-project/root/pull/1123:75,safety,test,test,75,"Yeah, a gtest is best. No need to mark as WIP, I'm not merging without the test :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1123
https://github.com/root-project/root/pull/1123:75,testability,test,test,75,"Yeah, a gtest is best. No need to mark as WIP, I'm not merging without the test :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1123
https://github.com/root-project/root/pull/1123:12,interoperability,format,format,12,I ran clang-format before pushing! maybe in the wrong terminal/directory? 😩,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1123
https://github.com/root-project/root/pull/1124:124,availability,failur,failures,124,"Just for those curious, this is the 6.08 branch, so it does not yet have the IMT features from the failing tests, hence the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1124
https://github.com/root-project/root/pull/1124:99,deployability,fail,failing,99,"Just for those curious, this is the 6.08 branch, so it does not yet have the IMT features from the failing tests, hence the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1124
https://github.com/root-project/root/pull/1124:124,deployability,fail,failures,124,"Just for those curious, this is the 6.08 branch, so it does not yet have the IMT features from the failing tests, hence the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1124
https://github.com/root-project/root/pull/1124:124,performance,failur,failures,124,"Just for those curious, this is the 6.08 branch, so it does not yet have the IMT features from the failing tests, hence the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1124
https://github.com/root-project/root/pull/1124:55,reliability,doe,does,55,"Just for those curious, this is the 6.08 branch, so it does not yet have the IMT features from the failing tests, hence the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1124
https://github.com/root-project/root/pull/1124:99,reliability,fail,failing,99,"Just for those curious, this is the 6.08 branch, so it does not yet have the IMT features from the failing tests, hence the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1124
https://github.com/root-project/root/pull/1124:124,reliability,fail,failures,124,"Just for those curious, this is the 6.08 branch, so it does not yet have the IMT features from the failing tests, hence the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1124
https://github.com/root-project/root/pull/1124:107,safety,test,tests,107,"Just for those curious, this is the 6.08 branch, so it does not yet have the IMT features from the failing tests, hence the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1124
https://github.com/root-project/root/pull/1124:107,testability,test,tests,107,"Just for those curious, this is the 6.08 branch, so it does not yet have the IMT features from the failing tests, hence the failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1124
https://github.com/root-project/root/pull/1125:9,availability,failur,failure,9,"The test failure seems related to this PR, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1125
https://github.com/root-project/root/pull/1125:9,deployability,fail,failure,9,"The test failure seems related to this PR, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1125
https://github.com/root-project/root/pull/1125:9,performance,failur,failure,9,"The test failure seems related to this PR, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1125
https://github.com/root-project/root/pull/1125:9,reliability,fail,failure,9,"The test failure seems related to this PR, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1125
https://github.com/root-project/root/pull/1125:4,safety,test,test,4,"The test failure seems related to this PR, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1125
https://github.com/root-project/root/pull/1125:4,testability,test,test,4,"The test failure seems related to this PR, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1125
https://github.com/root-project/root/pull/1127:11,deployability,log,log,11,The commit log and code comment seems at odd. One talks about gROOT and the other talks about libIMT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:11,safety,log,log,11,The commit log and code comment seems at odd. One talks about gROOT and the other talks about libIMT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:11,security,log,log,11,The commit log and code comment seems at odd. One talks about gROOT and the other talks about libIMT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:11,testability,log,log,11,The commit log and code comment seems at odd. One talks about gROOT and the other talks about libIMT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:147,energy efficiency,load,load,147,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:259,energy efficiency,load,load,259,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:147,performance,load,load,147,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:259,performance,load,load,259,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:247,safety,avoid,avoiding,247,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:221,testability,simpl,simplifies,221,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:58,usability,tool,tool,58,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:89,usability,statu,status,89,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:221,usability,simpl,simplifies,221,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:333,usability,statu,status,333,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:17,deployability,log,log,17,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:132,deployability,log,log,132,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:82,energy efficiency,reduc,reduce,82,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:24,modifiability,exten,extended,24,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:17,safety,log,log,17,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:132,safety,log,log,132,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:17,security,log,log,17,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:132,security,log,log,132,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:17,testability,log,log,17,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:132,testability,log,log,132,Could the commit log be extended to include something explaining that? Also could reduce the length of the first line of the commit log (see https://chris.beams.io/posts/git-commit/). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:4,integrability,messag,message,4,The message is now more verbose.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1127:4,interoperability,messag,message,4,The message is now more verbose.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1127
https://github.com/root-project/root/pull/1130:83,usability,support,support,83,two reasons: io and because I want to use a variant once we do c++17 for ROOT7 and support variant in the io.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:15,energy efficiency,draw,drawing,15,Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:87,energy efficiency,Draw,DrawAndGetDrawable,87,Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:64,security,access,accessed,64,Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:0,usability,Usab,Usability,0,Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:160,usability,clear,clear,160,"> No; ordinal as in ""the value on the palette axis"" with a range 0..1. I see the number is also used for interpolation between the defined colors ... not quite clear for the doc but fine ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:17,energy efficiency,draw,drawing,17,> Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision. Yes but it is counter intuitive ... Add a drawable and get back an option ... will have to see in tutorials what it looks like ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:89,energy efficiency,Draw,DrawAndGetDrawable,89,> Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision. Yes but it is counter intuitive ... Add a drawable and get back an option ... will have to see in tutorials what it looks like ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:172,energy efficiency,draw,drawable,172,> Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision. Yes but it is counter intuitive ... Add a drawable and get back an option ... will have to see in tutorials what it looks like ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:66,security,access,accessed,66,> Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision. Yes but it is counter intuitive ... Add a drawable and get back an option ... will have to see in tutorials what it looks like ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:2,usability,Usab,Usability,2,> Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision. Yes but it is counter intuitive ... Add a drawable and get back an option ... will have to see in tutorials what it looks like ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1130:152,usability,intuit,intuitive,152,> Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision. Yes but it is counter intuitive ... Add a drawable and get back an option ... will have to see in tutorials what it looks like ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1130
https://github.com/root-project/root/pull/1132:73,integrability,coupl,couple,73,> Move the TObject constructors from the header to the source (prevent a couple of static members to be externally unresolved). Instead consider. ```. #ifdef R__WIN32. if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);. #else. if (R__unlikely(fgObjectStat)) TObject::AddToTObjectTable(this);. #endif.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:73,modifiability,coupl,couple,73,> Move the TObject constructors from the header to the source (prevent a couple of static members to be externally unresolved). Instead consider. ```. #ifdef R__WIN32. if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);. #else. if (R__unlikely(fgObjectStat)) TObject::AddToTObjectTable(this);. #endif.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:63,safety,prevent,prevent,63,> Move the TObject constructors from the header to the source (prevent a couple of static members to be externally unresolved). Instead consider. ```. #ifdef R__WIN32. if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);. #else. if (R__unlikely(fgObjectStat)) TObject::AddToTObjectTable(this);. #endif.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:63,security,preven,prevent,63,> Move the TObject constructors from the header to the source (prevent a couple of static members to be externally unresolved). Instead consider. ```. #ifdef R__WIN32. if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);. #else. if (R__unlikely(fgObjectStat)) TObject::AddToTObjectTable(this);. #endif.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:73,testability,coupl,couple,73,> Move the TObject constructors from the header to the source (prevent a couple of static members to be externally unresolved). Instead consider. ```. #ifdef R__WIN32. if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);. #else. if (R__unlikely(fgObjectStat)) TObject::AddToTObjectTable(this);. #endif.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:29,availability,operat,operator,29,> Comment out inline TString operator==() to fix the compiler error C2593: 'operator ==' is ambiguous (!!!). What is the set of ambiguity?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:62,availability,error,error,62,> Comment out inline TString operator==() to fix the compiler error C2593: 'operator ==' is ambiguous (!!!). What is the set of ambiguity?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:76,availability,operat,operator,76,> Comment out inline TString operator==() to fix the compiler error C2593: 'operator ==' is ambiguous (!!!). What is the set of ambiguity?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:62,performance,error,error,62,> Comment out inline TString operator==() to fix the compiler error C2593: 'operator ==' is ambiguous (!!!). What is the set of ambiguity?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:62,safety,error,error,62,> Comment out inline TString operator==() to fix the compiler error C2593: 'operator ==' is ambiguous (!!!). What is the set of ambiguity?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:62,usability,error,error,62,> Comment out inline TString operator==() to fix the compiler error C2593: 'operator ==' is ambiguous (!!!). What is the set of ambiguity?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:31,deployability,log,log,31,@pcanal I'll send you the full log by mail and I'll try the. `if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);`. solution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:31,safety,log,log,31,@pcanal I'll send you the full log by mail and I'll try the. `if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);`. solution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:31,security,log,log,31,@pcanal I'll send you the full log by mail and I'll try the. `if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);`. solution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1132:31,testability,log,log,31,@pcanal I'll send you the full log by mail and I'll try the. `if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);`. solution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1132
https://github.com/root-project/root/pull/1133:338,availability,down,down,338,"Cool and useful! It's nice how this feature became easy to implement thanks to recent unrelated improvements. I think we should use a name that's easier to remember for users, and we should document very well what this number corresponds to in the various cases (e.g. when running on a TChain). Also as a personal preference I would move down the setup of the column to `TLoopManager`'s constructor, as this is ""not `TInterface`'s business"" in a sense. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:0,energy efficiency,Cool,Cool,0,"Cool and useful! It's nice how this feature became easy to implement thanks to recent unrelated improvements. I think we should use a name that's easier to remember for users, and we should document very well what this number corresponds to in the various cases (e.g. when running on a TChain). Also as a personal preference I would move down the setup of the column to `TLoopManager`'s constructor, as this is ""not `TInterface`'s business"" in a sense. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:156,safety,reme,remember,156,"Cool and useful! It's nice how this feature became easy to implement thanks to recent unrelated improvements. I think we should use a name that's easier to remember for users, and we should document very well what this number corresponds to in the various cases (e.g. when running on a TChain). Also as a personal preference I would move down the setup of the column to `TLoopManager`'s constructor, as this is ""not `TInterface`'s business"" in a sense. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:169,usability,user,users,169,"Cool and useful! It's nice how this feature became easy to implement thanks to recent unrelated improvements. I think we should use a name that's easier to remember for users, and we should document very well what this number corresponds to in the various cases (e.g. when running on a TChain). Also as a personal preference I would move down the setup of the column to `TLoopManager`'s constructor, as this is ""not `TInterface`'s business"" in a sense. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:190,usability,document,document,190,"Cool and useful! It's nice how this feature became easy to implement thanks to recent unrelated improvements. I think we should use a name that's easier to remember for users, and we should document very well what this number corresponds to in the various cases (e.g. when running on a TChain). Also as a personal preference I would move down the setup of the column to `TLoopManager`'s constructor, as this is ""not `TInterface`'s business"" in a sense. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:305,usability,person,personal,305,"Cool and useful! It's nice how this feature became easy to implement thanks to recent unrelated improvements. I think we should use a name that's easier to remember for users, and we should document very well what this number corresponds to in the various cases (e.g. when running on a TChain). Also as a personal preference I would move down the setup of the column to `TLoopManager`'s constructor, as this is ""not `TInterface`'s business"" in a sense. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:314,usability,prefer,preference,314,"Cool and useful! It's nice how this feature became easy to implement thanks to recent unrelated improvements. I think we should use a name that's easier to remember for users, and we should document very well what this number corresponds to in the various cases (e.g. when running on a TChain). Also as a personal preference I would move down the setup of the column to `TLoopManager`'s constructor, as this is ""not `TInterface`'s business"" in a sense. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:9,availability,failur,failures,9,The test failures related to `Report` are because of the check [here](https://github.com/dpiparo/root/blob/a298979465295915a17b2ef1b7e82afa81d51660/tree/treeplayer/inc/ROOT/TDFInterface.hxx#L1403-L1404). It's not true anymore that if `!fValidColumns.empty()` then the node is the result of a `TLoopManager` + at least one `Define`. Now the condition is `fValidColumns.size() > 1`. I wonder whether we could do something better there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:9,deployability,fail,failures,9,The test failures related to `Report` are because of the check [here](https://github.com/dpiparo/root/blob/a298979465295915a17b2ef1b7e82afa81d51660/tree/treeplayer/inc/ROOT/TDFInterface.hxx#L1403-L1404). It's not true anymore that if `!fValidColumns.empty()` then the node is the result of a `TLoopManager` + at least one `Define`. Now the condition is `fValidColumns.size() > 1`. I wonder whether we could do something better there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:9,performance,failur,failures,9,The test failures related to `Report` are because of the check [here](https://github.com/dpiparo/root/blob/a298979465295915a17b2ef1b7e82afa81d51660/tree/treeplayer/inc/ROOT/TDFInterface.hxx#L1403-L1404). It's not true anymore that if `!fValidColumns.empty()` then the node is the result of a `TLoopManager` + at least one `Define`. Now the condition is `fValidColumns.size() > 1`. I wonder whether we could do something better there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:9,reliability,fail,failures,9,The test failures related to `Report` are because of the check [here](https://github.com/dpiparo/root/blob/a298979465295915a17b2ef1b7e82afa81d51660/tree/treeplayer/inc/ROOT/TDFInterface.hxx#L1403-L1404). It's not true anymore that if `!fValidColumns.empty()` then the node is the result of a `TLoopManager` + at least one `Define`. Now the condition is `fValidColumns.size() > 1`. I wonder whether we could do something better there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:4,safety,test,test,4,The test failures related to `Report` are because of the check [here](https://github.com/dpiparo/root/blob/a298979465295915a17b2ef1b7e82afa81d51660/tree/treeplayer/inc/ROOT/TDFInterface.hxx#L1403-L1404). It's not true anymore that if `!fValidColumns.empty()` then the node is the result of a `TLoopManager` + at least one `Define`. Now the condition is `fValidColumns.size() > 1`. I wonder whether we could do something better there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:4,testability,test,test,4,The test failures related to `Report` are because of the check [here](https://github.com/dpiparo/root/blob/a298979465295915a17b2ef1b7e82afa81d51660/tree/treeplayer/inc/ROOT/TDFInterface.hxx#L1403-L1404). It's not true anymore that if `!fValidColumns.empty()` then the node is the result of a `TLoopManager` + at least one `Define`. Now the condition is `fValidColumns.size() > 1`. I wonder whether we could do something better there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:226,availability,failur,failures,226,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:226,deployability,fail,failures,226,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:38,energy efficiency,optim,optimal,38,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:301,integrability,sub,submitted,301,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:226,performance,failur,failures,226,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:226,reliability,fail,failures,226,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:221,safety,test,test,221,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:270,safety,prevent,prevent,270,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:270,security,preven,prevent,270,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:221,testability,test,test,221,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:130,usability,user,user,130,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:405,usability,document,documentation,405,"1) I agree that the name is less than optimal. As a matter of fact, I wonder if this should be always by default or something the user can decide to have. 2) For defining the column in the TLoopManager, good idea. 3) The test failures are ~expected. Nothing was done to prevent those yet, this PR was submitted to kick off discussion (and succeded). 4) For the doc, that's, as always, understood that the documentation should be high quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:40,performance,memor,memory,40,Why do we need an actual column (taking memory)? Isn't the entry number (at least the one hereby defined) always passed to the function(s) directly and/or indirectly?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:40,usability,memor,memory,40,Why do we need an actual column (taking memory)? Isn't the entry number (at least the one hereby defined) always passed to the function(s) directly and/or indirectly?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:248,availability,slo,slot,248,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:286,availability,slo,slot,286,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:312,availability,avail,available,312,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:672,availability,slo,slot,672,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:1166,availability,slo,slot,1166,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:87,energy efficiency,model,model,87,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:413,integrability,filter,filter,413,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:739,integrability,filter,filters,739,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:971,integrability,compon,components,971,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:971,interoperability,compon,components,971,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:971,modifiability,compon,components,971,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:173,performance,memor,memory,173,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:1292,performance,overhead,overhead,1292,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:248,reliability,slo,slot,248,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:286,reliability,slo,slot,286,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:312,reliability,availab,available,312,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:672,reliability,slo,slot,672,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:1166,reliability,slo,slot,1166,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:312,safety,avail,available,312,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:502,safety,detect,detect,502,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:948,safety,test,tested,948,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:87,security,model,model,87,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:312,security,availab,available,312,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:502,security,detect,detect,502,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:849,security,sign,signature,849,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:948,testability,test,tested,948,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:173,usability,memor,memory,173,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:207,usability,custom,custom,207,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:893,usability,custom,custom,893,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1133:1303,usability,custom,custom,1303,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:. 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible. 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" . Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide . a. The slot and the entry if needed. b. The steps needed for the implementation are already well understood. c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used. d. Would seamlessly work in PyROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1133
https://github.com/root-project/root/pull/1135:55,energy efficiency,green,greenlighting,55,We probably need to add testing of friend trees before greenlighting this :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1135
https://github.com/root-project/root/pull/1135:24,safety,test,testing,24,We probably need to add testing of friend trees before greenlighting this :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1135
https://github.com/root-project/root/pull/1135:24,testability,test,testing,24,We probably need to add testing of friend trees before greenlighting this :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1135
https://github.com/root-project/root/pull/1136:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1136
https://github.com/root-project/root/pull/1136:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1136
https://github.com/root-project/root/pull/1136:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1136
https://github.com/root-project/root/pull/1137:11,deployability,build,build,11,@phsft-bot build if you have a minute.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1137
https://github.com/root-project/root/pull/1139:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1139
https://github.com/root-project/root/pull/1143:118,deployability,fail,failing,118,"Cool that you ran additional testing to be sure about this! Now, there is still the issue about the example which was failing this morning on opt builds and succeeded on dbg...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:146,deployability,build,builds,146,"Cool that you ran additional testing to be sure about this! Now, there is still the issue about the example which was failing this morning on opt builds and succeeded on dbg...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:0,energy efficiency,Cool,Cool,0,"Cool that you ran additional testing to be sure about this! Now, there is still the issue about the example which was failing this morning on opt builds and succeeded on dbg...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:118,reliability,fail,failing,118,"Cool that you ran additional testing to be sure about this! Now, there is still the issue about the example which was failing this morning on opt builds and succeeded on dbg...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:29,safety,test,testing,29,"Cool that you ran additional testing to be sure about this! Now, there is still the issue about the example which was failing this morning on opt builds and succeeded on dbg...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:29,testability,test,testing,29,"Cool that you ran additional testing to be sure about this! Now, there is still the issue about the example which was failing this morning on opt builds and succeeded on dbg...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:84,energy efficiency,current,currently,84,"Yes, and a user reported problems with array branches in friend trees, which we are currently not testing for.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:98,safety,test,testing,98,"Yes, and a user reported problems with array branches in friend trees, which we are currently not testing for.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:98,testability,test,testing,98,"Yes, and a user reported problems with array branches in friend trees, which we are currently not testing for.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:11,usability,user,user,11,"Yes, and a user reported problems with array branches in friend trees, which we are currently not testing for.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:149,availability,state,statement,149,"Ok, so there are two things to clarify: . 1. Array branches in friend trees. 2. The example which failed on opt but succeeded in dbg. About 1. , the statement is ""When I try your recipe it works for arrays in the main tree but not for those in the friends. The Define call doesn’t work also for non-array variables stored in the friends."" (https://root-forum.cern.ch/t/support-for-tdataframe-profile1d-2d-in-pyroot/26384/6) . If I read correctly, this would mean that both array and non-array do not work if they come from friends, which is not true, at least for non-arrays. We should find out what is the status for arrays.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:98,deployability,fail,failed,98,"Ok, so there are two things to clarify: . 1. Array branches in friend trees. 2. The example which failed on opt but succeeded in dbg. About 1. , the statement is ""When I try your recipe it works for arrays in the main tree but not for those in the friends. The Define call doesn’t work also for non-array variables stored in the friends."" (https://root-forum.cern.ch/t/support-for-tdataframe-profile1d-2d-in-pyroot/26384/6) . If I read correctly, this would mean that both array and non-array do not work if they come from friends, which is not true, at least for non-arrays. We should find out what is the status for arrays.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:149,integrability,state,statement,149,"Ok, so there are two things to clarify: . 1. Array branches in friend trees. 2. The example which failed on opt but succeeded in dbg. About 1. , the statement is ""When I try your recipe it works for arrays in the main tree but not for those in the friends. The Define call doesn’t work also for non-array variables stored in the friends."" (https://root-forum.cern.ch/t/support-for-tdataframe-profile1d-2d-in-pyroot/26384/6) . If I read correctly, this would mean that both array and non-array do not work if they come from friends, which is not true, at least for non-arrays. We should find out what is the status for arrays.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:305,modifiability,variab,variables,305,"Ok, so there are two things to clarify: . 1. Array branches in friend trees. 2. The example which failed on opt but succeeded in dbg. About 1. , the statement is ""When I try your recipe it works for arrays in the main tree but not for those in the friends. The Define call doesn’t work also for non-array variables stored in the friends."" (https://root-forum.cern.ch/t/support-for-tdataframe-profile1d-2d-in-pyroot/26384/6) . If I read correctly, this would mean that both array and non-array do not work if they come from friends, which is not true, at least for non-arrays. We should find out what is the status for arrays.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:98,reliability,fail,failed,98,"Ok, so there are two things to clarify: . 1. Array branches in friend trees. 2. The example which failed on opt but succeeded in dbg. About 1. , the statement is ""When I try your recipe it works for arrays in the main tree but not for those in the friends. The Define call doesn’t work also for non-array variables stored in the friends."" (https://root-forum.cern.ch/t/support-for-tdataframe-profile1d-2d-in-pyroot/26384/6) . If I read correctly, this would mean that both array and non-array do not work if they come from friends, which is not true, at least for non-arrays. We should find out what is the status for arrays.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:273,reliability,doe,doesn,273,"Ok, so there are two things to clarify: . 1. Array branches in friend trees. 2. The example which failed on opt but succeeded in dbg. About 1. , the statement is ""When I try your recipe it works for arrays in the main tree but not for those in the friends. The Define call doesn’t work also for non-array variables stored in the friends."" (https://root-forum.cern.ch/t/support-for-tdataframe-profile1d-2d-in-pyroot/26384/6) . If I read correctly, this would mean that both array and non-array do not work if they come from friends, which is not true, at least for non-arrays. We should find out what is the status for arrays.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:369,usability,support,support-for-tdataframe-,369,"Ok, so there are two things to clarify: . 1. Array branches in friend trees. 2. The example which failed on opt but succeeded in dbg. About 1. , the statement is ""When I try your recipe it works for arrays in the main tree but not for those in the friends. The Define call doesn’t work also for non-array variables stored in the friends."" (https://root-forum.cern.ch/t/support-for-tdataframe-profile1d-2d-in-pyroot/26384/6) . If I read correctly, this would mean that both array and non-array do not work if they come from friends, which is not true, at least for non-arrays. We should find out what is the status for arrays.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:607,usability,statu,status,607,"Ok, so there are two things to clarify: . 1. Array branches in friend trees. 2. The example which failed on opt but succeeded in dbg. About 1. , the statement is ""When I try your recipe it works for arrays in the main tree but not for those in the friends. The Define call doesn’t work also for non-array variables stored in the friends."" (https://root-forum.cern.ch/t/support-for-tdataframe-profile1d-2d-in-pyroot/26384/6) . If I read correctly, this would mean that both array and non-array do not work if they come from friends, which is not true, at least for non-arrays. We should find out what is the status for arrays.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:18,reliability,doe,does,18,"@dpiparo issue 2. does not exist, I must have made some confusion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:46,safety,test,test,46,"Hi @bluehood , nice news. I am playing with a test for 2. !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:46,testability,test,test,46,"Hi @bluehood , nice news. I am playing with a test for 2. !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:32,safety,test,test,32,...then I'll stop at this other test here :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:32,testability,test,test,32,...then I'll stop at this other test here :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:13,usability,stop,stop,13,...then I'll stop at this other test here :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:112,safety,compl,completely,112,"actually, kudos to @Axel-Naumann for all this stuff that works out of the box because TTreeReader deals with it completely transparently",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1143:112,security,compl,completely,112,"actually, kudos to @Axel-Naumann for all this stuff that works out of the box because TTreeReader deals with it completely transparently",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1143
https://github.com/root-project/root/pull/1146:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1146
https://github.com/root-project/root/pull/1147:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1147
https://github.com/root-project/root/pull/1148:20,deployability,fail,fails,20,"The jitted `Define` fails because we currently do not check for the presence of names of friend branches in string expressions passed to `Filter` and `Define` (because we loop over the branch names returned by `GetListOfBranches`, which excludes friend branches). Two possible solutions identified so far in a discussion with @pcanal :. - implement something like a `TTree::GetIteratorOnAllFriendTopLevelBranches`. - use `TTree::GetIteratorOnAllLeaves` instead of `GetListOfBranches` to get a list of column names that also includes friend branches. The second solution would seem easier to adopt, however names of top-level split objects would not appear in the list of leaves. This would mean that, for example, if a top-level branch `event` had two leaves `fPx` and `fPy`, we would only see ""fPx"" and ""fPy"" as valid column names, so users could write expression strings such as `""fPx > 2""` but not `""event.GetPx() > 2""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:37,energy efficiency,current,currently,37,"The jitted `Define` fails because we currently do not check for the presence of names of friend branches in string expressions passed to `Filter` and `Define` (because we loop over the branch names returned by `GetListOfBranches`, which excludes friend branches). Two possible solutions identified so far in a discussion with @pcanal :. - implement something like a `TTree::GetIteratorOnAllFriendTopLevelBranches`. - use `TTree::GetIteratorOnAllLeaves` instead of `GetListOfBranches` to get a list of column names that also includes friend branches. The second solution would seem easier to adopt, however names of top-level split objects would not appear in the list of leaves. This would mean that, for example, if a top-level branch `event` had two leaves `fPx` and `fPy`, we would only see ""fPx"" and ""fPy"" as valid column names, so users could write expression strings such as `""fPx > 2""` but not `""event.GetPx() > 2""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:138,integrability,Filter,Filter,138,"The jitted `Define` fails because we currently do not check for the presence of names of friend branches in string expressions passed to `Filter` and `Define` (because we loop over the branch names returned by `GetListOfBranches`, which excludes friend branches). Two possible solutions identified so far in a discussion with @pcanal :. - implement something like a `TTree::GetIteratorOnAllFriendTopLevelBranches`. - use `TTree::GetIteratorOnAllLeaves` instead of `GetListOfBranches` to get a list of column names that also includes friend branches. The second solution would seem easier to adopt, however names of top-level split objects would not appear in the list of leaves. This would mean that, for example, if a top-level branch `event` had two leaves `fPx` and `fPy`, we would only see ""fPx"" and ""fPy"" as valid column names, so users could write expression strings such as `""fPx > 2""` but not `""event.GetPx() > 2""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:737,integrability,event,event,737,"The jitted `Define` fails because we currently do not check for the presence of names of friend branches in string expressions passed to `Filter` and `Define` (because we loop over the branch names returned by `GetListOfBranches`, which excludes friend branches). Two possible solutions identified so far in a discussion with @pcanal :. - implement something like a `TTree::GetIteratorOnAllFriendTopLevelBranches`. - use `TTree::GetIteratorOnAllLeaves` instead of `GetListOfBranches` to get a list of column names that also includes friend branches. The second solution would seem easier to adopt, however names of top-level split objects would not appear in the list of leaves. This would mean that, for example, if a top-level branch `event` had two leaves `fPx` and `fPy`, we would only see ""fPx"" and ""fPy"" as valid column names, so users could write expression strings such as `""fPx > 2""` but not `""event.GetPx() > 2""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:903,integrability,event,event,903,"The jitted `Define` fails because we currently do not check for the presence of names of friend branches in string expressions passed to `Filter` and `Define` (because we loop over the branch names returned by `GetListOfBranches`, which excludes friend branches). Two possible solutions identified so far in a discussion with @pcanal :. - implement something like a `TTree::GetIteratorOnAllFriendTopLevelBranches`. - use `TTree::GetIteratorOnAllLeaves` instead of `GetListOfBranches` to get a list of column names that also includes friend branches. The second solution would seem easier to adopt, however names of top-level split objects would not appear in the list of leaves. This would mean that, for example, if a top-level branch `event` had two leaves `fPx` and `fPy`, we would only see ""fPx"" and ""fPy"" as valid column names, so users could write expression strings such as `""fPx > 2""` but not `""event.GetPx() > 2""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:20,reliability,fail,fails,20,"The jitted `Define` fails because we currently do not check for the presence of names of friend branches in string expressions passed to `Filter` and `Define` (because we loop over the branch names returned by `GetListOfBranches`, which excludes friend branches). Two possible solutions identified so far in a discussion with @pcanal :. - implement something like a `TTree::GetIteratorOnAllFriendTopLevelBranches`. - use `TTree::GetIteratorOnAllLeaves` instead of `GetListOfBranches` to get a list of column names that also includes friend branches. The second solution would seem easier to adopt, however names of top-level split objects would not appear in the list of leaves. This would mean that, for example, if a top-level branch `event` had two leaves `fPx` and `fPy`, we would only see ""fPx"" and ""fPy"" as valid column names, so users could write expression strings such as `""fPx > 2""` but not `""event.GetPx() > 2""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:813,safety,valid,valid,813,"The jitted `Define` fails because we currently do not check for the presence of names of friend branches in string expressions passed to `Filter` and `Define` (because we loop over the branch names returned by `GetListOfBranches`, which excludes friend branches). Two possible solutions identified so far in a discussion with @pcanal :. - implement something like a `TTree::GetIteratorOnAllFriendTopLevelBranches`. - use `TTree::GetIteratorOnAllLeaves` instead of `GetListOfBranches` to get a list of column names that also includes friend branches. The second solution would seem easier to adopt, however names of top-level split objects would not appear in the list of leaves. This would mean that, for example, if a top-level branch `event` had two leaves `fPx` and `fPy`, we would only see ""fPx"" and ""fPy"" as valid column names, so users could write expression strings such as `""fPx > 2""` but not `""event.GetPx() > 2""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:287,security,ident,identified,287,"The jitted `Define` fails because we currently do not check for the presence of names of friend branches in string expressions passed to `Filter` and `Define` (because we loop over the branch names returned by `GetListOfBranches`, which excludes friend branches). Two possible solutions identified so far in a discussion with @pcanal :. - implement something like a `TTree::GetIteratorOnAllFriendTopLevelBranches`. - use `TTree::GetIteratorOnAllLeaves` instead of `GetListOfBranches` to get a list of column names that also includes friend branches. The second solution would seem easier to adopt, however names of top-level split objects would not appear in the list of leaves. This would mean that, for example, if a top-level branch `event` had two leaves `fPx` and `fPy`, we would only see ""fPx"" and ""fPy"" as valid column names, so users could write expression strings such as `""fPx > 2""` but not `""event.GetPx() > 2""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:836,usability,user,users,836,"The jitted `Define` fails because we currently do not check for the presence of names of friend branches in string expressions passed to `Filter` and `Define` (because we loop over the branch names returned by `GetListOfBranches`, which excludes friend branches). Two possible solutions identified so far in a discussion with @pcanal :. - implement something like a `TTree::GetIteratorOnAllFriendTopLevelBranches`. - use `TTree::GetIteratorOnAllLeaves` instead of `GetListOfBranches` to get a list of column names that also includes friend branches. The second solution would seem easier to adopt, however names of top-level split objects would not appear in the list of leaves. This would mean that, for example, if a top-level branch `event` had two leaves `fPx` and `fPy`, we would only see ""fPx"" and ""fPy"" as valid column names, so users could write expression strings such as `""fPx > 2""` but not `""event.GetPx() > 2""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:8,security,auth,authentic,8,This is authentic TDD. Good job.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1148:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1148
https://github.com/root-project/root/pull/1149:12,usability,experien,experience,12,"Based on my experience working with zlib and ROOT, zlib __is__ used by LLVM within ROOT. IIRC this is in PCH scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:434,deployability,build,building,434,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:706,deployability,version,version,706,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:976,deployability,version,versioning,976,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1141,deployability,patch,patch,1141,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1267,deployability,version,version,1267,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:541,energy efficiency,Current,Currently,541,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1133,energy efficiency,current,current,1133,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:706,integrability,version,version,706,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:976,integrability,version,versioning,976,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1267,integrability,version,version,1267,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1388,integrability,configur,configure,1388,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:958,interoperability,compatib,compatibility,958,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:706,modifiability,version,version,706,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:976,modifiability,version,versioning,976,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1267,modifiability,version,version,1267,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1388,modifiability,configur,configure,1388,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:596,performance,content,content,596,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1342,reliability,doe,doesn,1342,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1141,safety,patch,patch,1141,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1315,safety,test,test,1315,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1141,security,patch,patch,1141,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1388,security,configur,configure,1388,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1315,testability,test,test,1315,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:246,usability,tool,tools,246,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:378,usability,tool,tools,378,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:572,usability,prefer,preference,572,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1149:1417,usability,custom,custom,1417,"The problem is that LLVM ships with zlib. Since recently, we meld the header files of the PCH in a zip in it (fa9a2eee8376a0d4c4393b8f94fa3f841455c32d). Clang uses zlib [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L1302) and [here](https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp#L2052) when building the PCH in `-fmodules-embed-all-files` mode. IIUC, the issue is the way the JIT resolves symbols. Currently, cling's JIT gives a preference to the local content to itself, i.e. resolves symbols from libCling.so first. This would mean that even if we link another version of zlib to libCore, cling will still find the symbols from llvm's library. And that's by design, because we want to resolve the embedded in ROOT LLVM symbols first. Otherwise cling will start picking up random LLVM symbols introducing a lot of compatibility and versioning issues. I'd propose we try to solve this in two steps. First we should try disabling LLVM's zlib from `interpreter/CMakeLists.txt` instead of the current patch. I suspect that LLVM will be able to find and use the system's zlib (in that case we should make sure LLVM links to the version of zlib we expect: @oshadura has a nice test case for it). If that doesn't work we should investigate how we can configure ROOT's LLVM with a custom zlib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1149
https://github.com/root-project/root/pull/1153:11,deployability,modul,module,11,"That's our module code, so Vassil/me should fix it later. On Oct 9, 2017 9:55 AM, ""Bertrand Bellenot"" <notifications@github.com>. wrote:. > Merged #1153 <https://github.com/root-project/root/pull/1153>. >. > —. > You are receiving this because your review was requested. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1153#event-1284163090>, or mute. > the thread. > <https://github.com/notifications/unsubscribe-auth/AAs7AcNaBdzAE-p1fmr6N2q6k_35Vex0ks5sqiXRgaJpZM4PxS9c>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1153
https://github.com/root-project/root/pull/1153:372,integrability,event,event-,372,"That's our module code, so Vassil/me should fix it later. On Oct 9, 2017 9:55 AM, ""Bertrand Bellenot"" <notifications@github.com>. wrote:. > Merged #1153 <https://github.com/root-project/root/pull/1153>. >. > —. > You are receiving this because your review was requested. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1153#event-1284163090>, or mute. > the thread. > <https://github.com/notifications/unsubscribe-auth/AAs7AcNaBdzAE-p1fmr6N2q6k_35Vex0ks5sqiXRgaJpZM4PxS9c>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1153
https://github.com/root-project/root/pull/1153:11,modifiability,modul,module,11,"That's our module code, so Vassil/me should fix it later. On Oct 9, 2017 9:55 AM, ""Bertrand Bellenot"" <notifications@github.com>. wrote:. > Merged #1153 <https://github.com/root-project/root/pull/1153>. >. > —. > You are receiving this because your review was requested. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1153#event-1284163090>, or mute. > the thread. > <https://github.com/notifications/unsubscribe-auth/AAs7AcNaBdzAE-p1fmr6N2q6k_35Vex0ks5sqiXRgaJpZM4PxS9c>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1153
https://github.com/root-project/root/pull/1153:11,safety,modul,module,11,"That's our module code, so Vassil/me should fix it later. On Oct 9, 2017 9:55 AM, ""Bertrand Bellenot"" <notifications@github.com>. wrote:. > Merged #1153 <https://github.com/root-project/root/pull/1153>. >. > —. > You are receiving this because your review was requested. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1153#event-1284163090>, or mute. > the thread. > <https://github.com/notifications/unsubscribe-auth/AAs7AcNaBdzAE-p1fmr6N2q6k_35Vex0ks5sqiXRgaJpZM4PxS9c>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1153
https://github.com/root-project/root/pull/1153:249,safety,review,review,249,"That's our module code, so Vassil/me should fix it later. On Oct 9, 2017 9:55 AM, ""Bertrand Bellenot"" <notifications@github.com>. wrote:. > Merged #1153 <https://github.com/root-project/root/pull/1153>. >. > —. > You are receiving this because your review was requested. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1153#event-1284163090>, or mute. > the thread. > <https://github.com/notifications/unsubscribe-auth/AAs7AcNaBdzAE-p1fmr6N2q6k_35Vex0ks5sqiXRgaJpZM4PxS9c>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1153
https://github.com/root-project/root/pull/1153:462,security,auth,auth,462,"That's our module code, so Vassil/me should fix it later. On Oct 9, 2017 9:55 AM, ""Bertrand Bellenot"" <notifications@github.com>. wrote:. > Merged #1153 <https://github.com/root-project/root/pull/1153>. >. > —. > You are receiving this because your review was requested. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1153#event-1284163090>, or mute. > the thread. > <https://github.com/notifications/unsubscribe-auth/AAs7AcNaBdzAE-p1fmr6N2q6k_35Vex0ks5sqiXRgaJpZM4PxS9c>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1153
https://github.com/root-project/root/pull/1153:249,testability,review,review,249,"That's our module code, so Vassil/me should fix it later. On Oct 9, 2017 9:55 AM, ""Bertrand Bellenot"" <notifications@github.com>. wrote:. > Merged #1153 <https://github.com/root-project/root/pull/1153>. >. > —. > You are receiving this because your review was requested. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/1153#event-1284163090>, or mute. > the thread. > <https://github.com/notifications/unsubscribe-auth/AAs7AcNaBdzAE-p1fmr6N2q6k_35Vex0ks5sqiXRgaJpZM4PxS9c>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1153
https://github.com/root-project/root/pull/1154:35,deployability,build,builds,35,well done. Let's aim for all green builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1154
https://github.com/root-project/root/pull/1154:29,energy efficiency,green,green,29,well done. Let's aim for all green builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1154
https://github.com/root-project/root/pull/1155:13,availability,failur,failure,13,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:13,deployability,fail,failure,13,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:94,deployability,patch,patch,94,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:74,interoperability,convers,conversion,74,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:13,performance,failur,failure,13,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:13,reliability,fail,failure,13,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:8,safety,test,test,8,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:94,safety,patch,patch,94,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:94,security,patch,patch,94,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1155:8,testability,test,test,8,The one test failure is due to removal of the TString to std::string_view conversion. A small patch to roottest is ready to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1155
https://github.com/root-project/root/pull/1160:106,interoperability,compatib,compatibility,106,"@etejedor nice data source! As you could see, there is an issue with compilation due to the recent XCode9 compatibility changes. Once this is done, before the full review, I think one could add. - Some Doxy documentation, for example about the kind of csv supported, how to write headers etc. In general aspects specific to the csvs we expect. - One or more tutorials, both in Python and C++, should be prepared. An idea could be an little analysis performed on a csv or a conversion from csv to ROOT with a Snapshot (de facto it will be the very first one we do with TDF!!). An example analysis can be found in the SWAN examples: https://github.com/dpiparo/swanExamples/blob/master/notebooks/CMSDimuon_py.ipynb. Cheers,. D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:312,interoperability,specif,specific,312,"@etejedor nice data source! As you could see, there is an issue with compilation due to the recent XCode9 compatibility changes. Once this is done, before the full review, I think one could add. - Some Doxy documentation, for example about the kind of csv supported, how to write headers etc. In general aspects specific to the csvs we expect. - One or more tutorials, both in Python and C++, should be prepared. An idea could be an little analysis performed on a csv or a conversion from csv to ROOT with a Snapshot (de facto it will be the very first one we do with TDF!!). An example analysis can be found in the SWAN examples: https://github.com/dpiparo/swanExamples/blob/master/notebooks/CMSDimuon_py.ipynb. Cheers,. D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:473,interoperability,convers,conversion,473,"@etejedor nice data source! As you could see, there is an issue with compilation due to the recent XCode9 compatibility changes. Once this is done, before the full review, I think one could add. - Some Doxy documentation, for example about the kind of csv supported, how to write headers etc. In general aspects specific to the csvs we expect. - One or more tutorials, both in Python and C++, should be prepared. An idea could be an little analysis performed on a csv or a conversion from csv to ROOT with a Snapshot (de facto it will be the very first one we do with TDF!!). An example analysis can be found in the SWAN examples: https://github.com/dpiparo/swanExamples/blob/master/notebooks/CMSDimuon_py.ipynb. Cheers,. D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:449,performance,perform,performed,449,"@etejedor nice data source! As you could see, there is an issue with compilation due to the recent XCode9 compatibility changes. Once this is done, before the full review, I think one could add. - Some Doxy documentation, for example about the kind of csv supported, how to write headers etc. In general aspects specific to the csvs we expect. - One or more tutorials, both in Python and C++, should be prepared. An idea could be an little analysis performed on a csv or a conversion from csv to ROOT with a Snapshot (de facto it will be the very first one we do with TDF!!). An example analysis can be found in the SWAN examples: https://github.com/dpiparo/swanExamples/blob/master/notebooks/CMSDimuon_py.ipynb. Cheers,. D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:164,safety,review,review,164,"@etejedor nice data source! As you could see, there is an issue with compilation due to the recent XCode9 compatibility changes. Once this is done, before the full review, I think one could add. - Some Doxy documentation, for example about the kind of csv supported, how to write headers etc. In general aspects specific to the csvs we expect. - One or more tutorials, both in Python and C++, should be prepared. An idea could be an little analysis performed on a csv or a conversion from csv to ROOT with a Snapshot (de facto it will be the very first one we do with TDF!!). An example analysis can be found in the SWAN examples: https://github.com/dpiparo/swanExamples/blob/master/notebooks/CMSDimuon_py.ipynb. Cheers,. D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:164,testability,review,review,164,"@etejedor nice data source! As you could see, there is an issue with compilation due to the recent XCode9 compatibility changes. Once this is done, before the full review, I think one could add. - Some Doxy documentation, for example about the kind of csv supported, how to write headers etc. In general aspects specific to the csvs we expect. - One or more tutorials, both in Python and C++, should be prepared. An idea could be an little analysis performed on a csv or a conversion from csv to ROOT with a Snapshot (de facto it will be the very first one we do with TDF!!). An example analysis can be found in the SWAN examples: https://github.com/dpiparo/swanExamples/blob/master/notebooks/CMSDimuon_py.ipynb. Cheers,. D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:207,usability,document,documentation,207,"@etejedor nice data source! As you could see, there is an issue with compilation due to the recent XCode9 compatibility changes. Once this is done, before the full review, I think one could add. - Some Doxy documentation, for example about the kind of csv supported, how to write headers etc. In general aspects specific to the csvs we expect. - One or more tutorials, both in Python and C++, should be prepared. An idea could be an little analysis performed on a csv or a conversion from csv to ROOT with a Snapshot (de facto it will be the very first one we do with TDF!!). An example analysis can be found in the SWAN examples: https://github.com/dpiparo/swanExamples/blob/master/notebooks/CMSDimuon_py.ipynb. Cheers,. D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:256,usability,support,supported,256,"@etejedor nice data source! As you could see, there is an issue with compilation due to the recent XCode9 compatibility changes. Once this is done, before the full review, I think one could add. - Some Doxy documentation, for example about the kind of csv supported, how to write headers etc. In general aspects specific to the csvs we expect. - One or more tutorials, both in Python and C++, should be prepared. An idea could be an little analysis performed on a csv or a conversion from csv to ROOT with a Snapshot (de facto it will be the very first one we do with TDF!!). An example analysis can be found in the SWAN examples: https://github.com/dpiparo/swanExamples/blob/master/notebooks/CMSDimuon_py.ipynb. Cheers,. D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:449,usability,perform,performed,449,"@etejedor nice data source! As you could see, there is an issue with compilation due to the recent XCode9 compatibility changes. Once this is done, before the full review, I think one could add. - Some Doxy documentation, for example about the kind of csv supported, how to write headers etc. In general aspects specific to the csvs we expect. - One or more tutorials, both in Python and C++, should be prepared. An idea could be an little analysis performed on a csv or a conversion from csv to ROOT with a Snapshot (de facto it will be the very first one we do with TDF!!). An example analysis can be found in the SWAN examples: https://github.com/dpiparo/swanExamples/blob/master/notebooks/CMSDimuon_py.ipynb. Cheers,. D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:111,modifiability,maintain,maintaining,111,One 'meta question'. How much of this 'duplicates' the functionality of TTree::ReadFile? [Just trying to avoid maintaining two .csv parser if we can avoid it ...],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:105,safety,avoid,avoid,105,One 'meta question'. How much of this 'duplicates' the functionality of TTree::ReadFile? [Just trying to avoid maintaining two .csv parser if we can avoid it ...],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:111,safety,maintain,maintaining,111,One 'meta question'. How much of this 'duplicates' the functionality of TTree::ReadFile? [Just trying to avoid maintaining two .csv parser if we can avoid it ...],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:149,safety,avoid,avoid,149,One 'meta question'. How much of this 'duplicates' the functionality of TTree::ReadFile? [Just trying to avoid maintaining two .csv parser if we can avoid it ...],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:211,performance,parallel,parallelism,211,"Hi @pcanal , the functionality is somewhat duplicated but I think it would be very hard to factor the parsing out of the TTree implementation. Basing this data source on a TTree could also be problematic as the parallelism would be broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:24,performance,parallel,parallelism,24,> be problematic as the parallelism would be broken. How so?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:144,performance,parallel,parallel,144,Hi @pcanal I took a look at `TTree::ReadFile` but it looks like it is strongly entangled with TTree branches. Also very hard for us to use in a parallel execution as @dpiparo said; I wouldn't even sure how to approach that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:36,performance,parallel,parallel,36,> Also very hard for us to use in a parallel execution. How did you chose to approach reading a text file in parallel?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:109,performance,parallel,parallel,109,> Also very hard for us to use in a parallel execution. How did you chose to approach reading a text file in parallel?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:233,availability,state,stated,233,"> think it would be very hard to factor the parsing out of the TTree implementation. Well before jumping to that. Why wouldn't going through a TTree be an option? (I suspect it hinges on the ""can't be done in parallel"" that has been stated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:233,integrability,state,stated,233,"> think it would be very hard to factor the parsing out of the TTree implementation. Well before jumping to that. Why wouldn't going through a TTree be an option? (I suspect it hinges on the ""can't be done in parallel"" that has been stated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:209,performance,parallel,parallel,209,"> think it would be very hard to factor the parsing out of the TTree implementation. Well before jumping to that. Why wouldn't going through a TTree be an option? (I suspect it hinges on the ""can't be done in parallel"" that has been stated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:78,performance,parallel,parallel,78,The reason is the need of anything that is related to TDF to be executable in parallel.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:145,interoperability,specif,specified,145,"One more argument in favour of CSV DS is the support for type inference, whereas in the TTree implementation the types of the columns need to be specified as headers. In that sense, CSV DS aims to be more generic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:45,usability,support,support,45,"One more argument in favour of CSV DS is the support for type inference, whereas in the TTree implementation the types of the columns need to be specified as headers. In that sense, CSV DS aims to be more generic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:251,availability,sli,slightly,251,> The reason is the need of anything that is related to TDF to be executable in parallel. Yes and? Can you be more precise what solution was picking to do yet-another-parser that is reading a text file in parallel that could not be applied reusing (a slightly modified if needed) TTree::ReadStream possibly with multiple TTrees ... . I.e. it might be the right decision to have two parsers but I want to understand that avoiding that has been carefully looked at ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:240,modifiability,reu,reusing,240,> The reason is the need of anything that is related to TDF to be executable in parallel. Yes and? Can you be more precise what solution was picking to do yet-another-parser that is reading a text file in parallel that could not be applied reusing (a slightly modified if needed) TTree::ReadStream possibly with multiple TTrees ... . I.e. it might be the right decision to have two parsers but I want to understand that avoiding that has been carefully looked at ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:80,performance,parallel,parallel,80,> The reason is the need of anything that is related to TDF to be executable in parallel. Yes and? Can you be more precise what solution was picking to do yet-another-parser that is reading a text file in parallel that could not be applied reusing (a slightly modified if needed) TTree::ReadStream possibly with multiple TTrees ... . I.e. it might be the right decision to have two parsers but I want to understand that avoiding that has been carefully looked at ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:205,performance,parallel,parallel,205,> The reason is the need of anything that is related to TDF to be executable in parallel. Yes and? Can you be more precise what solution was picking to do yet-another-parser that is reading a text file in parallel that could not be applied reusing (a slightly modified if needed) TTree::ReadStream possibly with multiple TTrees ... . I.e. it might be the right decision to have two parsers but I want to understand that avoiding that has been carefully looked at ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:251,reliability,sli,slightly,251,> The reason is the need of anything that is related to TDF to be executable in parallel. Yes and? Can you be more precise what solution was picking to do yet-another-parser that is reading a text file in parallel that could not be applied reusing (a slightly modified if needed) TTree::ReadStream possibly with multiple TTrees ... . I.e. it might be the right decision to have two parsers but I want to understand that avoiding that has been carefully looked at ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:420,safety,avoid,avoiding,420,> The reason is the need of anything that is related to TDF to be executable in parallel. Yes and? Can you be more precise what solution was picking to do yet-another-parser that is reading a text file in parallel that could not be applied reusing (a slightly modified if needed) TTree::ReadStream possibly with multiple TTrees ... . I.e. it might be the right decision to have two parsers but I want to understand that avoiding that has been carefully looked at ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:260,security,modif,modified,260,> The reason is the need of anything that is related to TDF to be executable in parallel. Yes and? Can you be more precise what solution was picking to do yet-another-parser that is reading a text file in parallel that could not be applied reusing (a slightly modified if needed) TTree::ReadStream possibly with multiple TTrees ... . I.e. it might be the right decision to have two parsers but I want to understand that avoiding that has been carefully looked at ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:404,testability,understand,understand,404,> The reason is the need of anything that is related to TDF to be executable in parallel. Yes and? Can you be more precise what solution was picking to do yet-another-parser that is reading a text file in parallel that could not be applied reusing (a slightly modified if needed) TTree::ReadStream possibly with multiple TTrees ... . I.e. it might be the right decision to have two parsers but I want to understand that avoiding that has been carefully looked at ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:65,performance,parallel,parallel,65,@pcanal the only way I can think of to use `TTree::ReadFile` for parallel reading is having one `TTree` per thread with the whole CSV read in.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:109,interoperability,specif,specified,109,"> is the support for type inference, whereas in the TTree implementation the types of the columns need to be specified as headers. Wouldn't it have been possible **and** beneficial to add it to TTree::ReadStream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:9,usability,support,support,9,"> is the support for type inference, whereas in the TTree implementation the types of the columns need to be specified as headers. Wouldn't it have been possible **and** beneficial to add it to TTree::ReadStream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:63,performance,parallel,parallel,63,@pcanal the only way I can think of to use TTree::ReadFile for parallel reading is having one TTree per thread with the whole CSV read in. How did you prevent something 'similar' with the new parser? I.e how does 'each' thread only read part of the file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:208,reliability,doe,does,208,@pcanal the only way I can think of to use TTree::ReadFile for parallel reading is having one TTree per thread with the whole CSV read in. How did you prevent something 'similar' with the new parser? I.e how does 'each' thread only read part of the file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:151,safety,prevent,prevent,151,@pcanal the only way I can think of to use TTree::ReadFile for parallel reading is having one TTree per thread with the whole CSV read in. How did you prevent something 'similar' with the new parser? I.e how does 'each' thread only read part of the file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:151,security,preven,prevent,151,@pcanal the only way I can think of to use TTree::ReadFile for parallel reading is having one TTree per thread with the whole CSV read in. How did you prevent something 'similar' with the new parser? I.e how does 'each' thread only read part of the file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:23,performance,memor,memory,23,Having only one CSV in memory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:23,usability,memor,memory,23,Having only one CSV in memory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:333,availability,slo,slot,333,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:359,availability,slo,slot,359,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:364,deployability,updat,updates,364,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:132,performance,parallel,parallelism,132,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:262,performance,parallel,parallel,262,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:333,reliability,slo,slot,333,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:359,reliability,slo,slot,359,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:163,safety,safe,safety,163,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:194,safety,prevent,prevent,194,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:364,safety,updat,updates,364,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:194,security,preven,prevent,194,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:364,security,updat,updates,364,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:311,usability,cursor,cursor,311,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:391,usability,cursor,cursor,391,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser? TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:164,integrability,buffer,buffer,164,> Having only one CSV in memory. Humm ... Could you be more explicitly? ... what pattern was used to allow multiple thread to read from the same file and/or memory buffer? Is the parsing done by a single thread? Is it spread over multiple thread? Wouldn't the same pattern be applicable to a TTree based implementation?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:25,performance,memor,memory,25,> Having only one CSV in memory. Humm ... Could you be more explicitly? ... what pattern was used to allow multiple thread to read from the same file and/or memory buffer? Is the parsing done by a single thread? Is it spread over multiple thread? Wouldn't the same pattern be applicable to a TTree based implementation?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:157,performance,memor,memory,157,> Having only one CSV in memory. Humm ... Could you be more explicitly? ... what pattern was used to allow multiple thread to read from the same file and/or memory buffer? Is the parsing done by a single thread? Is it spread over multiple thread? Wouldn't the same pattern be applicable to a TTree based implementation?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:25,usability,memor,memory,25,> Having only one CSV in memory. Humm ... Could you be more explicitly? ... what pattern was used to allow multiple thread to read from the same file and/or memory buffer? Is the parsing done by a single thread? Is it spread over multiple thread? Wouldn't the same pattern be applicable to a TTree based implementation?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:157,usability,memor,memory,157,> Having only one CSV in memory. Humm ... Could you be more explicitly? ... what pattern was used to allow multiple thread to read from the same file and/or memory buffer? Is the parsing done by a single thread? Is it spread over multiple thread? Wouldn't the same pattern be applicable to a TTree based implementation?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:369,availability,sli,slightly,369,> Well that's a whole different project I guess 😅 the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. Fair enough (and hence alternative implementation were not investigated since it was not the point anyway ... :) ) .... So for the sake of having this demonstrator we end up with two csv parser with slightly different features ... not the end of the world ... (but annoying since the devil is always in the last few details ....) ... so never mind :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:122,performance,parallel,parallelism,122,> Well that's a whole different project I guess 😅 the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. Fair enough (and hence alternative implementation were not investigated since it was not the point anyway ... :) ) .... So for the sake of having this demonstrator we end up with two csv parser with slightly different features ... not the end of the world ... (but annoying since the devil is always in the last few details ....) ... so never mind :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:369,reliability,sli,slightly,369,> Well that's a whole different project I guess 😅 the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. Fair enough (and hence alternative implementation were not investigated since it was not the point anyway ... :) ) .... So for the sake of having this demonstrator we end up with two csv parser with slightly different features ... not the end of the world ... (but annoying since the devil is always in the last few details ....) ... so never mind :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:153,safety,safe,safety,153,> Well that's a whole different project I guess 😅 the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. Fair enough (and hence alternative implementation were not investigated since it was not the point anyway ... :) ) .... So for the sake of having this demonstrator we end up with two csv parser with slightly different features ... not the end of the world ... (but annoying since the devil is always in the last few details ....) ... so never mind :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:49,energy efficiency,current,current,49,"And to answer my own question, it looks like the current code read and parse the csv file in a single thread in a single function call (The TCsvDS constructor) and so 'technically' just replacing that implementation with a TTree::ReadFile/Stream [enhanced for type inference] would then have required a trick to duplicate the meta-data/cursor part of the TTree without duplicating the data. [Ie. Danilo's point]. Alternatively, one could have devised (and could still to enhance parallelism in the current scheme) a solution where rather than reading the file in one go, it would have been segmented (with some buffering of the line before parsing) and hence each thread's TTree would have been independent (looking at different data/part of the file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:498,energy efficiency,current,current,498,"And to answer my own question, it looks like the current code read and parse the csv file in a single thread in a single function call (The TCsvDS constructor) and so 'technically' just replacing that implementation with a TTree::ReadFile/Stream [enhanced for type inference] would then have required a trick to duplicate the meta-data/cursor part of the TTree without duplicating the data. [Ie. Danilo's point]. Alternatively, one could have devised (and could still to enhance parallelism in the current scheme) a solution where rather than reading the file in one go, it would have been segmented (with some buffering of the line before parsing) and hence each thread's TTree would have been independent (looking at different data/part of the file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:611,integrability,buffer,buffering,611,"And to answer my own question, it looks like the current code read and parse the csv file in a single thread in a single function call (The TCsvDS constructor) and so 'technically' just replacing that implementation with a TTree::ReadFile/Stream [enhanced for type inference] would then have required a trick to duplicate the meta-data/cursor part of the TTree without duplicating the data. [Ie. Danilo's point]. Alternatively, one could have devised (and could still to enhance parallelism in the current scheme) a solution where rather than reading the file in one go, it would have been segmented (with some buffering of the line before parsing) and hence each thread's TTree would have been independent (looking at different data/part of the file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:479,performance,parallel,parallelism,479,"And to answer my own question, it looks like the current code read and parse the csv file in a single thread in a single function call (The TCsvDS constructor) and so 'technically' just replacing that implementation with a TTree::ReadFile/Stream [enhanced for type inference] would then have required a trick to duplicate the meta-data/cursor part of the TTree without duplicating the data. [Ie. Danilo's point]. Alternatively, one could have devised (and could still to enhance parallelism in the current scheme) a solution where rather than reading the file in one go, it would have been segmented (with some buffering of the line before parsing) and hence each thread's TTree would have been independent (looking at different data/part of the file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1160:336,usability,cursor,cursor,336,"And to answer my own question, it looks like the current code read and parse the csv file in a single thread in a single function call (The TCsvDS constructor) and so 'technically' just replacing that implementation with a TTree::ReadFile/Stream [enhanced for type inference] would then have required a trick to duplicate the meta-data/cursor part of the TTree without duplicating the data. [Ie. Danilo's point]. Alternatively, one could have devised (and could still to enhance parallelism in the current scheme) a solution where rather than reading the file in one go, it would have been segmented (with some buffering of the line before parsing) and hence each thread's TTree would have been independent (looking at different data/part of the file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1160
https://github.com/root-project/root/pull/1162:882,availability,sli,slibdir,882,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:657,deployability,releas,release,657,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1004,deployability,version,version-specific-runtime-libs,1004,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1051,deployability,version,version-only,1051,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1080,deployability,build,build-id,1080,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1250,deployability,build,build,1250,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1325,deployability,version,version,1325,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:957,energy efficiency,alloc,allocator,957,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1307,energy efficiency,model,model,1307,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:296,integrability,wrap,wrapper,296,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:369,integrability,Configur,Configured,369,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:389,integrability,configur,configure,389,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1004,integrability,version,version-specific-runtime-libs,1004,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1051,integrability,version,version-only,1051,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1325,integrability,version,version,1325,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:296,interoperability,wrapper,wrapper,296,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:428,interoperability,share,share,428,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:453,interoperability,share,share,453,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:797,interoperability,plug,plugin,797,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1012,interoperability,specif,specific-runtime-libs,1012,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:369,modifiability,Configur,Configured,369,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:389,modifiability,configur,configure,389,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1004,modifiability,version,version-specific-runtime-libs,1004,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1051,modifiability,version,version-only,1051,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1325,modifiability,version,version,1325,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1235,performance,tune,tune,1235,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:882,reliability,sli,slibdir,882,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:369,security,Configur,Configured,369,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:389,security,configur,configure,389,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:1307,security,model,model,1307,"Info about my system:. [shell] uname -a. Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v. . Using built-in specs. . COLLECT_GCC=g++. COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper. OFFLOAD_TARGET_NAMES=hsa:nvptx-none. Target: x86_64-suse-linux. Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux. Thread model: posix. gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1162:29,safety,safe,safely,29,Is this still needed? Can we safely merge?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1162
https://github.com/root-project/root/pull/1164:36,availability,error,error,36,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:882,availability,error,error,882,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1091,availability,error,error,1091,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1302,availability,error,error,1302,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1420,availability,Error,Error,1420,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:30,deployability,build,build,30,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:56,deployability,patch,patch,56,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:273,deployability,BUILD,BUILD,273,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:388,deployability,BUILD,BUILD,388,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:539,deployability,Toolchain,Toolchains,539,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:684,deployability,Toolchain,Toolchains,684,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:800,deployability,Toolchain,Toolchains,800,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1009,deployability,Toolchain,Toolchains,1009,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1219,deployability,Toolchain,Toolchains,1219,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1524,deployability,build,build,1524,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:36,performance,error,error,36,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:520,performance,Content,Contents,520,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:665,performance,Content,Contents,665,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:781,performance,Content,Contents,781,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:882,performance,error,error,882,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:990,performance,Content,Contents,990,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1091,performance,error,error,1091,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1200,performance,Content,Contents,1200,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1302,performance,error,error,1302,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1420,performance,Error,Error,1420,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:4,safety,compl,completeness,4,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:36,safety,error,error,36,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:56,safety,patch,patch,56,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:882,safety,error,error,882,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1091,safety,error,error,1091,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1302,safety,error,error,1302,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1420,safety,Error,Error,1420,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1530,safety,test,tests,1530,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:4,security,compl,completeness,4,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:56,security,patch,patch,56,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1327,security,ident,identifier,1327,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1530,testability,test,tests,1530,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:36,usability,error,error,36,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:92,usability,User,Users,92,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:254,usability,User,Users,254,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:369,usability,User,Users,369,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:539,usability,Tool,Toolchains,539,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:684,usability,Tool,Toolchains,684,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:800,usability,Tool,Toolchains,800,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:882,usability,error,error,882,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1009,usability,Tool,Toolchains,1009,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1091,usability,error,error,1091,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1219,usability,Tool,Toolchains,1219,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1302,usability,error,error,1302,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1164:1420,usability,Error,Error,1420,"For completeness, this is the build error fixed by this patch:. ```. In file included from /Users/foo/alice/sw/SOURCES/ROOT/v6-10-06+git_85fcb7c2ff/85fcb7c2ff9d2c7fd836419c055d8b0fb40ffb28/net/monalisa/src/TMonaLisaWriter.cxx:51:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/TFile.h:31:. In file included from /Users/foo/alice/sw/BUILD/9ccb742badcdc735a7e3080c5c43edbd7b66c7dd/ROOT/include/ROOT/TRWSpinLock.hxx:19:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/condition_variable:111:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__mutex_base:17:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:156:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port();. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:300:1: error: unknown type name 'mach_port_t'. mach_port_t __libcpp_thread_get_port() {. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__threading_support:301:12: error: use of undeclared identifier 'pthread_mach_thread_np'. return pthread_mach_thread_np(pthread_self());. ^. ```. Error shows up with Xcode 9 and macOS High Sierra. I am not sure the MonaLisa writer is enabled in your build tests, so you might not have noticed so far.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1164
https://github.com/root-project/root/pull/1166:11,deployability,build,build,11,@phsft-bot build just on centos7/gcc49 with flags -Dgeo=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1166
https://github.com/root-project/root/pull/1166:11,deployability,build,build,11,@phsft-bot build just on centos7/gcc49 with flags -Dgeo=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1166
https://github.com/root-project/root/pull/1166:11,deployability,build,build,11,@phsft-bot build just on centos7/gcc49 with flags -Dgeo=OFF.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1166
https://github.com/root-project/root/pull/1166:73,safety,test,tests,73,"Considering also https://github.com/root-project/roottest/pull/103 , all tests now pass if geo is off.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1166
https://github.com/root-project/root/pull/1166:73,testability,test,tests,73,"Considering also https://github.com/root-project/roottest/pull/103 , all tests now pass if geo is off.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1166
https://github.com/root-project/root/pull/1166:11,deployability,build,build,11,@phsft-bot build just on centos7/gcc49 with flags -Dgeo=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1166
https://github.com/root-project/root/pull/1166:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1166
https://github.com/root-project/root/pull/1167:86,deployability,build,builds,86,"Dear all,. I came out with a solution that in my opinion is a good compromise. If the builds succed, I'll merge. Further discussion can be possible at a later stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:159,deployability,stage,stage,159,"Dear all,. I came out with a solution that in my opinion is a good compromise. If the builds succed, I'll merge. Further discussion can be possible at a later stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:64,deployability,patch,patches,64,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:128,deployability,patch,patch,128,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:156,deployability,patch,patches,156,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:240,modifiability,concern,concerned,240,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:49,performance,memor,memory,49,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:64,safety,patch,patches,64,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:128,safety,patch,patch,128,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:156,safety,patch,patches,156,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:64,security,patch,patches,64,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:128,security,patch,patch,128,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:156,security,patch,patches,156,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:240,testability,concern,concerned,240,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:49,usability,memor,memory,49,@dpiparo My apologies I am not very good at from-memory diff of patches. I.e. I can't easily see what is different in the newer patch compared to the older patches. Maybe just letting me know 'which' of the two dozen changes is/are the one concerned by your solution ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:112,deployability,patch,patch,112,"@pcanal everybody gave greenlight but you. You suggested to keep fitsio ON and turn gdml ON. This is now in the patch. RooFit is now ON as @amadio suggested given the overwhelming number of questions on the forum wrt sqlite (still ON, as you suggested)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:23,energy efficiency,green,greenlight,23,"@pcanal everybody gave greenlight but you. You suggested to keep fitsio ON and turn gdml ON. This is now in the patch. RooFit is now ON as @amadio suggested given the overwhelming number of questions on the forum wrt sqlite (still ON, as you suggested)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:112,safety,patch,patch,112,"@pcanal everybody gave greenlight but you. You suggested to keep fitsio ON and turn gdml ON. This is now in the patch. RooFit is now ON as @amadio suggested given the overwhelming number of questions on the forum wrt sqlite (still ON, as you suggested)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:112,security,patch,patch,112,"@pcanal everybody gave greenlight but you. You suggested to keep fitsio ON and turn gdml ON. This is now in the patch. RooFit is now ON as @amadio suggested given the overwhelming number of questions on the forum wrt sqlite (still ON, as you suggested)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:244,deployability,build,build,244,"I could not agree more with the changes. However, we should ensure that no coverage is lost in Jenkins due to these changes. I will take a look later on Jenkins to see if the number of tests that we run changed, but we should have at least one build with *everything* enabled to at least know when something doesn't compile anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:308,reliability,doe,doesn,308,"I could not agree more with the changes. However, we should ensure that no coverage is lost in Jenkins due to these changes. I will take a look later on Jenkins to see if the number of tests that we run changed, but we should have at least one build with *everything* enabled to at least know when something doesn't compile anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:185,safety,test,tests,185,"I could not agree more with the changes. However, we should ensure that no coverage is lost in Jenkins due to these changes. I will take a look later on Jenkins to see if the number of tests that we run changed, but we should have at least one build with *everything* enabled to at least know when something doesn't compile anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:75,testability,coverag,coverage,75,"I could not agree more with the changes. However, we should ensure that no coverage is lost in Jenkins due to these changes. I will take a look later on Jenkins to see if the number of tests that we run changed, but we should have at least one build with *everything* enabled to at least know when something doesn't compile anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1167:185,testability,test,tests,185,"I could not agree more with the changes. However, we should ensure that no coverage is lost in Jenkins due to these changes. I will take a look later on Jenkins to see if the number of tests that we run changed, but we should have at least one build with *everything* enabled to at least know when something doesn't compile anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1167
https://github.com/root-project/root/pull/1173:480,availability,failur,failures,480,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:480,deployability,fail,failures,480,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:229,energy efficiency,optim,optimal,229,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:454,energy efficiency,green,green,454,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:480,performance,failur,failures,480,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:480,reliability,fail,failures,480,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:410,safety,test,tests,410,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:475,safety,test,test,475,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:410,testability,test,tests,410,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:475,testability,test,test,475,"This is a breakthrough: thanks for insisting to the end. The code looks good to me. Assumption 1) can be clarified in the doc. Assumption 2) is deeply rooted inside the very concept of tree. As for the const cast, it's less than optimal but I agree this can wait for 6.14 given also that at the moment we not only do not write out C arrays but we do that in a bogus fashion. I can merge this PR as soon as the tests and the coding conventions checks are green. The present 2 test failures can be fixed easily and are not due to this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:271,integrability,interfac,interface,271,The more I think about it the more I am convinced that giving this special meaning to array_view will bring trouble in the future. Users might define a column of type vector and then try to read it with an array_view with bad conconsequences. I would prefer breaking the interface now than having to do it later to solve weird bugs. I propose we adopt `TArrayBranch´ as a generic c-style-array-in-a-ttree-branch type. It would live in the same namespace as TDF and would serve no other purpose than letting users indicate that the branch they are reading is a fixed or variable size c-style array.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:271,interoperability,interfac,interface,271,The more I think about it the more I am convinced that giving this special meaning to array_view will bring trouble in the future. Users might define a column of type vector and then try to read it with an array_view with bad conconsequences. I would prefer breaking the interface now than having to do it later to solve weird bugs. I propose we adopt `TArrayBranch´ as a generic c-style-array-in-a-ttree-branch type. It would live in the same namespace as TDF and would serve no other purpose than letting users indicate that the branch they are reading is a fixed or variable size c-style array.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:271,modifiability,interfac,interface,271,The more I think about it the more I am convinced that giving this special meaning to array_view will bring trouble in the future. Users might define a column of type vector and then try to read it with an array_view with bad conconsequences. I would prefer breaking the interface now than having to do it later to solve weird bugs. I propose we adopt `TArrayBranch´ as a generic c-style-array-in-a-ttree-branch type. It would live in the same namespace as TDF and would serve no other purpose than letting users indicate that the branch they are reading is a fixed or variable size c-style array.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:569,modifiability,variab,variable,569,The more I think about it the more I am convinced that giving this special meaning to array_view will bring trouble in the future. Users might define a column of type vector and then try to read it with an array_view with bad conconsequences. I would prefer breaking the interface now than having to do it later to solve weird bugs. I propose we adopt `TArrayBranch´ as a generic c-style-array-in-a-ttree-branch type. It would live in the same namespace as TDF and would serve no other purpose than letting users indicate that the branch they are reading is a fixed or variable size c-style array.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:131,usability,User,Users,131,The more I think about it the more I am convinced that giving this special meaning to array_view will bring trouble in the future. Users might define a column of type vector and then try to read it with an array_view with bad conconsequences. I would prefer breaking the interface now than having to do it later to solve weird bugs. I propose we adopt `TArrayBranch´ as a generic c-style-array-in-a-ttree-branch type. It would live in the same namespace as TDF and would serve no other purpose than letting users indicate that the branch they are reading is a fixed or variable size c-style array.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:251,usability,prefer,prefer,251,The more I think about it the more I am convinced that giving this special meaning to array_view will bring trouble in the future. Users might define a column of type vector and then try to read it with an array_view with bad conconsequences. I would prefer breaking the interface now than having to do it later to solve weird bugs. I propose we adopt `TArrayBranch´ as a generic c-style-array-in-a-ttree-branch type. It would live in the same namespace as TDF and would serve no other purpose than letting users indicate that the branch they are reading is a fixed or variable size c-style array.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:507,usability,user,users,507,The more I think about it the more I am convinced that giving this special meaning to array_view will bring trouble in the future. Users might define a column of type vector and then try to read it with an array_view with bad conconsequences. I would prefer breaking the interface now than having to do it later to solve weird bugs. I propose we adopt `TArrayBranch´ as a generic c-style-array-in-a-ttree-branch type. It would live in the same namespace as TDF and would serve no other purpose than letting users indicate that the branch they are reading is a fixed or variable size c-style array.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:513,usability,indicat,indicate,513,The more I think about it the more I am convinced that giving this special meaning to array_view will bring trouble in the future. Users might define a column of type vector and then try to read it with an array_view with bad conconsequences. I would prefer breaking the interface now than having to do it later to solve weird bugs. I propose we adopt `TArrayBranch´ as a generic c-style-array-in-a-ttree-branch type. It would live in the same namespace as TDF and would serve no other purpose than letting users indicate that the branch they are reading is a fixed or variable size c-style array.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:182,safety,test,test,182,"What's the problem with `std::vector<T>` or a reference to fixed-size array? ```. template<unsigned int N>. void func(const char(&str)[N]). {. // Whatever... }. int main(). {. func(""test""); // Works, N is 5. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:182,testability,test,test,182,"What's the problem with `std::vector<T>` or a reference to fixed-size array? ```. template<unsigned int N>. void func(const char(&str)[N]). {. // Whatever... }. int main(). {. func(""test""); // Works, N is 5. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:390,integrability,Filter,Filter,390,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:190,interoperability,specif,specify,190,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:696,interoperability,specif,specific,696,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:731,interoperability,specif,specified,731,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:449,safety,detect,detect,449,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:472,safety,input,inputs,472,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:648,safety,valid,valid,648,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:449,security,detect,detect,449,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:509,security,sign,signature,509,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:472,usability,input,inputs,472,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write. Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write. ```. tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});. ```. but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:66,integrability,Filter,Filter,66,"Sorry I don't understand the idea :sweat_smile:. When users call `Filter` or `Define` we need to deduce right there the return type and the argument types of the callable that has been passed, because we need to instantiate the corresponding `TTreeReaderValue`s or `TTreeReaderArray`s or `T*`s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:14,testability,understand,understand,14,"Sorry I don't understand the idea :sweat_smile:. When users call `Filter` or `Define` we need to deduce right there the return type and the argument types of the callable that has been passed, because we need to instantiate the corresponding `TTreeReaderValue`s or `TTreeReaderArray`s or `T*`s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:54,usability,user,users,54,"Sorry I don't understand the idea :sweat_smile:. When users call `Filter` or `Define` we need to deduce right there the return type and the argument types of the callable that has been passed, because we need to instantiate the corresponding `TTreeReaderValue`s or `TTreeReaderArray`s or `T*`s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:174,performance,memor,memory,174,"@Axel-Naumann just suggested another strong argument for swapping `array_view` with our own type: the former is forcing us to check that what we are reading is contiguous in memory, the latter might be able to not care, and just transparently yield whatever `TTreeReaderArray` returns.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:174,usability,memor,memory,174,"@Axel-Naumann just suggested another strong argument for swapping `array_view` with our own type: the former is forcing us to check that what we are reading is contiguous in memory, the latter might be able to not care, and just transparently yield whatever `TTreeReaderArray` returns.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:99,performance,multi-thread,multi-thread,99,I would merge this and keep working on Snapshot with other PRs:. - better check for correctness of multi-thread snapshot of c-style array. - switch usage of `array_view` to a custom type,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1173:175,usability,custom,custom,175,I would merge this and keep working on Snapshot with other PRs:. - better check for correctness of multi-thread snapshot of c-style array. - switch usage of `array_view` to a custom type,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1173
https://github.com/root-project/root/pull/1174:47,usability,user,user-images,47,![screenshot from 2017-10-11 13-57-56](https://user-images.githubusercontent.com/7012420/31439832-f95895b6-ae8d-11e7-8b54-abf0cadcd2e4.png). reported issue seems to be fixed..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1174
https://github.com/root-project/root/pull/1174:23,safety,test,test,23,@vgvassilev I will add test case to roottest!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1174
https://github.com/root-project/root/pull/1174:23,testability,test,test,23,@vgvassilev I will add test case to roottest!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1174
https://github.com/root-project/root/pull/1174:28,energy efficiency,measur,measured,28,"@Axel-Naumann it is true, I measured 15% of difference of size of PCH,. so I am switching to other ideas how to solve issue ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1174
https://github.com/root-project/root/pull/1175:50,testability,assert,assert,50,"TClass::GetClass(""""); would **not** lead to this. assert.  One really has to try creating a TClass with a null string. (i.e call new TClass("""" ...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1175
https://github.com/root-project/root/pull/1175:52,availability,Error,Error,52,@pcanal @Axel-Naumann So what do I do? Remove the ::Error()?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1175
https://github.com/root-project/root/pull/1175:52,performance,Error,Error,52,@pcanal @Axel-Naumann So what do I do? Remove the ::Error()?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1175
https://github.com/root-project/root/pull/1175:52,safety,Error,Error,52,@pcanal @Axel-Naumann So what do I do? Remove the ::Error()?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1175
https://github.com/root-project/root/pull/1175:52,usability,Error,Error,52,@pcanal @Axel-Naumann So what do I do? Remove the ::Error()?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1175
https://github.com/root-project/root/pull/1180:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1180
https://github.com/root-project/root/pull/1180:11,deployability,build,build,11,@phsft-bot build please ... that was too fast last time,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1180
https://github.com/root-project/root/pull/1180:51,performance,time,time,51,@phsft-bot build please ... that was too fast last time,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1180
https://github.com/root-project/root/pull/1183:9,availability,Ping,Ping,9,@lmoneta Ping? :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1183:148,deployability,releas,release,148,"Hm :-( I still didn't receive any comments on the changes, could someone please take a look? It would be good to have this fix included in the next release (6.12/00?). I think it's rather trivial.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1183:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1183:77,integrability,messag,message,77,Sorry for the late reply. . I agree with your changes. I think also the Info message needs to be fixed. I'll do this as well. . I'll commit this fix also in 6.12,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1183:77,interoperability,messag,message,77,Sorry for the late reply. . I agree with your changes. I think also the Info message needs to be fixed. I'll do this as well. . I'll commit this fix also in 6.12,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1183
https://github.com/root-project/root/pull/1186:48,modifiability,required chang,required changes,48,"I suppose I can merge it now. If not, I'll make required changes after the merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1186
https://github.com/root-project/root/pull/1187:40,deployability,build,build,40,"I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:46,deployability,fail,failed,46,"I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:98,deployability,patch,patch,98,"I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:46,reliability,fail,failed,46,"I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:98,safety,patch,patch,98,"I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:98,security,patch,patch,98,"I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:30,performance,content,content,30,@agheata Could you review the content?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:19,safety,review,review,19,@agheata Could you review the content?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:19,testability,review,review,19,@agheata Could you review the content?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:42,deployability,build,build,42,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:48,deployability,fail,failed,48,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:100,deployability,patch,patch,100,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:120,interoperability,format,formatting,120,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:245,interoperability,format,formatting,245,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:48,reliability,fail,failed,48,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:150,reliability,doe,does,150,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:100,safety,patch,patch,100,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:100,security,patch,patch,100,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:206,testability,context,context,206,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:177,usability,tool,tool,177,"> I can't see where's the pb in Travis CI build failed, could someone point the wrong line(s) in my patch? Is it in the formatting. The original code does not exactly match the tool's expectation. For this context, it is better to keep the code formatting as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:33,interoperability,format,formatting,33,"Travis is complaining about code formatting. Since those changes are one-liners, let keep the file formatted as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:99,interoperability,format,formatted,99,"Travis is complaining about code formatting. Since those changes are one-liners, let keep the file formatted as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:10,safety,compl,complaining,10,"Travis is complaining about code formatting. Since those changes are one-liners, let keep the file formatted as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1187:10,security,compl,complaining,10,"Travis is complaining about code formatting. Since those changes are one-liners, let keep the file formatted as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1187
https://github.com/root-project/root/pull/1188:189,deployability,depend,dependency,189,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:294,deployability,depend,dependencies,294,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:479,deployability,depend,dependencies,479,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:285,energy efficiency,reduc,reducing,285,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:318,energy efficiency,Core,Core,318,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:458,energy efficiency,reduc,reduce,458,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:189,integrability,depend,dependency,189,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:294,integrability,depend,dependencies,294,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:479,integrability,depend,dependencies,479,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:189,modifiability,depend,dependency,189,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:294,modifiability,depend,dependencies,294,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:479,modifiability,depend,dependencies,479,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:147,performance,time,time,147,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:121,safety,reme,remember,121,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:189,safety,depend,dependency,189,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:239,safety,reme,remember,239,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:294,safety,depend,dependencies,294,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:479,safety,depend,dependencies,479,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:189,testability,depend,dependency,189,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:294,testability,depend,dependencies,294,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:479,testability,depend,dependencies,479,"@vgvassilev I am in favour of this PR (now changing a cxx file triggers the construction of the pch) but I think: . 1) I remember that once upon a time, this was not the case. Perhaps this dependency has been introduced for a reason. 2) I remember @Teemperor having an objection about reducing dependencies to headers+Core/Cling/Thread/RIO. If the aforementioned points turn out to be irrelevant, I would merge this right away. If not, we can discuss how to reduce the number of dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:11,deployability,build,build,11,"@phsft-bot build with flags -Dccache=Off. @dpiparo, this code there has been there since 2013 (a19e58d7), I still need to check if I am not reintroducing ROOT-5993 or ROOT-5994.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:11,deployability,build,build,11,@phsft-bot build with flags -Dccache=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:210,deployability,build,build,210,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:282,deployability,build,build,282,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:363,deployability,depend,dependencies,363,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:224,energy efficiency,core,core,224,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:271,integrability,configur,configured,271,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:363,integrability,depend,dependencies,363,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:271,modifiability,configur,configured,271,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:363,modifiability,depend,dependencies,363,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:363,safety,depend,dependencies,363,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:271,security,configur,configured,271,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:168,testability,verif,verify,168,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1188:363,testability,depend,dependencies,363,"> The generation of our PCH/PCM file requires only the header files to be in. place. That's incorrect; check how the list of headers and the `-I` are generated. Please verify that this works with a `make -j32` build on a 32 core machine (or at least 16), using a freshly configured build (i.e. not incremental) and running `make onepcm`. That ensures you got the dependencies mostly right :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1188
https://github.com/root-project/root/pull/1189:5,availability,failur,failure,5,This failure does not seem caused by the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:5,deployability,fail,failure,5,This failure does not seem caused by the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:5,performance,failur,failure,5,This failure does not seem caused by the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:5,reliability,fail,failure,5,This failure does not seem caused by the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:13,reliability,doe,does,13,This failure does not seem caused by the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:10,reliability,doe,does,10,@bbockelm does that fix the issue for you?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:43,safety,test,testing,43,@vgvassilev Thanks for investigation! I am testing if it is fixing a problem for zlib 1.2.11!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:43,testability,test,testing,43,@vgvassilev Thanks for investigation! I am testing if it is fixing a problem for zlib 1.2.11!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:18,usability,clear,clear,18,@vgvassilev - not clear why you mentioned me in the above comment? Did you mean to address Oksana instead?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:9,deployability,patch,patched,9,The llvm patched is tracked in [D39002](https://reviews.llvm.org/D39002).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:9,safety,patch,patched,9,The llvm patched is tracked in [D39002](https://reviews.llvm.org/D39002).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:48,safety,review,reviews,48,The llvm patched is tracked in [D39002](https://reviews.llvm.org/D39002).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:9,security,patch,patched,9,The llvm patched is tracked in [D39002](https://reviews.llvm.org/D39002).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:48,testability,review,reviews,48,The llvm patched is tracked in [D39002](https://reviews.llvm.org/D39002).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1189:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1189
https://github.com/root-project/root/pull/1190:14,interoperability,semant,semantically,14,"Since this is semantically equivalent to ""always inline"" perhaps the name R__AWAYS_INLINE is more adequate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1190
https://github.com/root-project/root/pull/1191:22,deployability,patch,patch,22,Thanks a lot for your patch! Let us triple check that the primitives are actually drawn in a test notebook.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:82,energy efficiency,draw,drawn,82,Thanks a lot for your patch! Let us triple check that the primitives are actually drawn in a test notebook.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:22,safety,patch,patch,22,Thanks a lot for your patch! Let us triple check that the primitives are actually drawn in a test notebook.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:93,safety,test,test,93,Thanks a lot for your patch! Let us triple check that the primitives are actually drawn in a test notebook.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:22,security,patch,patch,22,Thanks a lot for your patch! Let us triple check that the primitives are actually drawn in a test notebook.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:93,testability,test,test,93,Thanks a lot for your patch! Let us triple check that the primitives are actually drawn in a test notebook.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:15,safety,test,test,15,"Agreed, that a test notebook is merited. To be explicit this should add support for the following:. * TGraph2D. * TH3. * TGraphPolar. * TProfile. * TF2. * TGeo. * TH2Poly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:15,testability,test,test,15,"Agreed, that a test notebook is merited. To be explicit this should add support for the following:. * TGraph2D. * TH3. * TGraphPolar. * TProfile. * TF2. * TGeo. * TH2Poly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:72,usability,support,support,72,"Agreed, that a test notebook is merited. To be explicit this should add support for the following:. * TGraph2D. * TH3. * TGraphPolar. * TProfile. * TF2. * TGeo. * TH2Poly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1191:30,usability,support,supported,30,"Actually, TPolyLine3D is also supported, but only when any other 3D plot was shown before. One cannot plot TPolyLine3D on empty canvas (not yet).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1191
https://github.com/root-project/root/pull/1192:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1192:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1192:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1192:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1192
https://github.com/root-project/root/pull/1193:5,safety,except,except,5,"LGTM except that I think one says ""Silence many ...""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1193
https://github.com/root-project/root/pull/1196:11,deployability,build,build,11,@phsft-bot build with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1196
https://github.com/root-project/root/pull/1200:4,availability,failur,failures,4,The failures in regression_zeroentries are fixed by [this PR in roottest](https://github.com/root-project/roottest/pull/99),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1200
https://github.com/root-project/root/pull/1200:4,deployability,fail,failures,4,The failures in regression_zeroentries are fixed by [this PR in roottest](https://github.com/root-project/roottest/pull/99),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1200
https://github.com/root-project/root/pull/1200:4,performance,failur,failures,4,The failures in regression_zeroentries are fixed by [this PR in roottest](https://github.com/root-project/roottest/pull/99),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1200
https://github.com/root-project/root/pull/1200:4,reliability,fail,failures,4,The failures in regression_zeroentries are fixed by [this PR in roottest](https://github.com/root-project/roottest/pull/99),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1200
https://github.com/root-project/root/pull/1203:526,availability,failur,failure,526,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:31,deployability,depend,depends,31,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:256,deployability,version,versions,256,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:400,deployability,build,build,400,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:526,deployability,fail,failure,526,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:31,integrability,depend,depends,31,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:256,integrability,version,versions,256,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:31,modifiability,depend,depends,31,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:256,modifiability,version,versions,256,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:223,performance,memor,memory,223,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:417,performance,memor,memory,417,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:526,performance,failur,failure,526,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:351,reliability,doe,does,351,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:526,reliability,fail,failure,526,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:31,safety,depend,depends,31,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:31,testability,depend,depends,31,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:510,testability,understand,understand,510,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:223,usability,memor,memory,223,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:238,usability,support,supported,238,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:417,usability,memor,memory,417,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead? ```c++. #ifdef WIN32. #include <memory> // our supported windows versions always ship with make_unique. #else. // rest of the file. #endif. ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:126,availability,avail,available,126,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:218,deployability,configurat,configuration,218,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:218,integrability,configur,configuration,218,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:111,interoperability,platform,platform,111,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:218,modifiability,configur,configuration,218,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:126,reliability,availab,available,126,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:126,safety,avail,available,126,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:159,safety,test,test,159,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:126,security,availab,available,126,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:218,security,configur,configuration,218,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1203:159,testability,test,test,159,"> . Could we put something like the following in RMakeUnique.hxx instead? Actually, rather than guessing which platform it is available on, we ought to have a test in CMakeList.txt and the corresponding #define in the configuration header file. We do this for std::string_view and the always_inline attibute for example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1203
https://github.com/root-project/root/pull/1204:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1204
https://github.com/root-project/root/pull/1208:11,deployability,build,build,11,@phsft-bot build with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:48,deployability,build,building,48,"Hi, merging this will unblock the TFuture/Async building blocks for parallelism. Is there any blocker preventing us from proceeding with the merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:68,performance,parallel,parallelism,68,"Hi, merging this will unblock the TFuture/Async building blocks for parallelism. Is there any blocker preventing us from proceeding with the merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:102,safety,prevent,preventing,102,"Hi, merging this will unblock the TFuture/Async building blocks for parallelism. Is there any blocker preventing us from proceeding with the merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:102,security,preven,preventing,102,"Hi, merging this will unblock the TFuture/Async building blocks for parallelism. Is there any blocker preventing us from proceeding with the merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:11,deployability,build,build,11,"@phsft-bot build! @Teemperor, could you fix formatting?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:44,interoperability,format,formatting,44,"@phsft-bot build! @Teemperor, could you fix formatting?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:11,deployability,build,build,11,@phsft-bot build only on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1208:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1208
https://github.com/root-project/root/pull/1211:11,deployability,build,build,11,@phsft-bot build with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:187,deployability,stack,stack,187,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:193,deployability,contain,containing,193,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:439,deployability,build,build,439,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:65,energy efficiency,current,current,65,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:458,integrability,event,event,458,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:866,integrability,event,event,866,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:650,modifiability,variab,variable,650,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:1053,safety,Test,Test,1053,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:1181,safety,Test,Test,1181,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:43,testability,simpl,simple,43,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:667,testability,simpl,simple,667,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:1053,testability,Test,Test,1053,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:1181,testability,Test,Test,1181,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:43,usability,simpl,simple,43,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:667,usability,simpl,simple,667,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:1084,usability,user,user-images,1084,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:1212,usability,user,user-images,1212,"Hi,. here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++. #include ""ROOT/TDataFrame.hxx"". #include <iostream>. using namespace ROOT::Experimental;. int main() {. // build a TDF with 1 event and 1 column ""x"" that is always equal 42. TDataFrame dd(1);. auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms. // all with the same cut and filled with the same variable in this simple example. std::vector<TDF::TResultProxy<TH1D>> histos;. const auto nHistos = 1000u;. histos.reserve(nHistos);. for (auto i = 0u; i < nHistos; ++i). histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok. // jitting of the 1000 booked histograms happens here. std::cout << histos.front()->GetMean() << std::endl;. return 0;. }. ```. **Test -O0**. ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**. ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:152,deployability,build,build,152,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:188,deployability,fail,fails,188,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:188,reliability,fail,fails,188,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:85,safety,test,test,85,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:183,safety,test,test,183,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:217,safety,valid,valid,217,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:268,safety,test,test,268,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:85,testability,test,test,85,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:183,testability,test,test,183,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:223,testability,regress,regression,223,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:268,testability,test,test,268,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:105,deployability,patch,patch,105,@vgvassilev nice job. The benchmark I have creating hundreds of histos relying on jitting takes w/o this patch 12s and 3s w/ it. For me the code good to be merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:105,safety,patch,patch,105,@vgvassilev nice job. The benchmark I have creating hundreds of histos relying on jitting takes w/o this patch 12s and 3s w/ it. For me the code good to be merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:105,security,patch,patch,105,@vgvassilev nice job. The benchmark I have creating hundreds of histos relying on jitting takes w/o this patch 12s and 3s w/ it. For me the code good to be merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:87,safety,hot,hotter,87,@bluehood thanks for the graphs. Looks like `llvm::FPPassManager::runOnModule` is much hotter than its O0 counterpart. Can we get some sort of number of calls for these functions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:132,deployability,stack,stack,132,"@vgvassilev I think the most notable difference is the absence of `cling::Intepreter::executeTransaction` (and deeper parts of that stack) in the `-O0` run. In any case, I will run `callgrind` on both versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:201,deployability,version,versions,201,"@vgvassilev I think the most notable difference is the absence of `cling::Intepreter::executeTransaction` (and deeper parts of that stack) in the `-O0` run. In any case, I will run `callgrind` on both versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:201,integrability,version,versions,201,"@vgvassilev I think the most notable difference is the absence of `cling::Intepreter::executeTransaction` (and deeper parts of that stack) in the `-O0` run. In any case, I will run `callgrind` on both versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:201,modifiability,version,versions,201,"@vgvassilev I think the most notable difference is the absence of `cling::Intepreter::executeTransaction` (and deeper parts of that stack) in the `-O0` run. In any case, I will run `callgrind` on both versions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1211:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1211
https://github.com/root-project/root/pull/1213:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1213
https://github.com/root-project/root/pull/1216:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1216
https://github.com/root-project/root/pull/1217:18,availability,failur,failures,18,All the unit test failures appear to be due to the extra bytes serialized in the tree. Working on an equivalent `roottest` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:18,deployability,fail,failures,18,All the unit test failures appear to be due to the extra bytes serialized in the tree. Working on an equivalent `roottest` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:18,performance,failur,failures,18,All the unit test failures appear to be due to the extra bytes serialized in the tree. Working on an equivalent `roottest` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:18,reliability,fail,failures,18,All the unit test failures appear to be due to the extra bytes serialized in the tree. Working on an equivalent `roottest` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:13,safety,test,test,13,All the unit test failures appear to be due to the extra bytes serialized in the tree. Working on an equivalent `roottest` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:8,testability,unit,unit,8,All the unit test failures appear to be due to the extra bytes serialized in the tree. Working on an equivalent `roottest` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:13,testability,test,test,13,All the unit test failures appear to be due to the extra bytes serialized in the tree. Working on an equivalent `roottest` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:19,integrability,sub,subset,19,@pcanal - selected subset of `clang-format` suggestions have been applied.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:36,interoperability,format,format,36,@pcanal - selected subset of `clang-format` suggestions have been applied.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1217:101,testability,simul,simultaneously,101,@pcanal - anything remaining on this one? I don't think I can make Jenkins happy unless things merge simultaneously...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1217
https://github.com/root-project/root/pull/1218:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1218
https://github.com/root-project/root/pull/1219:102,performance,cach,cache,102,great development. It will be necessary at some point and also useful for a csv ds 2.0 which does not cache in memory the entire file. I would go to Initialise instead of Init to be coherent with Finalise and other popular frameworks such as Gaudi.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:111,performance,memor,memory,111,great development. It will be necessary at some point and also useful for a csv ds 2.0 which does not cache in memory the entire file. I would go to Initialise instead of Init to be coherent with Finalise and other popular frameworks such as Gaudi.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:93,reliability,doe,does,93,great development. It will be necessary at some point and also useful for a csv ds 2.0 which does not cache in memory the entire file. I would go to Initialise instead of Init to be coherent with Finalise and other popular frameworks such as Gaudi.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:111,usability,memor,memory,111,great development. It will be necessary at some point and also useful for a csv ds 2.0 which does not cache in memory the entire file. I would go to Initialise instead of Init to be coherent with Finalise and other popular frameworks such as Gaudi.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:249,availability,slo,slots,249,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:292,integrability,configur,configurable,292,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:292,modifiability,configur,configurable,292,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:135,performance,time,time,135,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:154,performance,memor,memory,154,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:333,performance,memor,memory,333,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:376,performance,time,time,376,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:618,performance,synch,synchronization,618,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:249,reliability,slo,slots,249,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:501,reliability,doe,does,501,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:292,security,configur,configurable,292,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:321,security,control,control,321,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:391,security,control,control,391,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:634,security,barrier,barrier,634,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:25,testability,understand,understand,25,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:321,testability,control,control,321,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:391,testability,control,control,391,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:154,usability,memor,memory,154,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:312,usability,user,user,312,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:333,usability,memor,memory,333,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:250,integrability,batch,batches,250,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:608,integrability,queue,queue,608,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:113,performance,time,time,113,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:132,performance,memor,memory,132,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:250,performance,batch,batches,250,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:504,performance,synch,synchronization,504,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:608,performance,queue,queue,608,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:442,reliability,doe,does,442,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:154,safety,compl,completely,154,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:603,safety,safe,safe,603,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:154,security,compl,completely,154,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:520,security,barrier,barrier,520,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1219:132,usability,memor,memory,132,"Hi @etejedor,. > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier? Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1219
https://github.com/root-project/root/pull/1220:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1220
https://github.com/root-project/root/pull/1222:11,deployability,build,build,11,"@phsft-bot build just on centos7/gcc49, ubuntu14/native with flags -Dimt=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1222
https://github.com/root-project/root/pull/1223:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:10,safety,review,review,10,@pcanal - review item addressed. Please look again?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:10,testability,review,review,10,@pcanal - review item addressed. Please look again?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1223:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1223
https://github.com/root-project/root/pull/1225:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:35,reliability,doe,does,35,Could not test on windows/vc15. It does not work in the pullrequest yet. Watching the incrementals...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:10,safety,test,test,10,Could not test on windows/vc15. It does not work in the pullrequest yet. Watching the incrementals...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1225:10,testability,test,test,10,Could not test on windows/vc15. It does not work in the pullrequest yet. Watching the incrementals...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1225
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,"@phsft-bot build! @pcanal, that fixes the regression for modules. Let's see if the normal builds are ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:57,deployability,modul,modules,57,"@phsft-bot build! @pcanal, that fixes the regression for modules. Let's see if the normal builds are ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:90,deployability,build,builds,90,"@phsft-bot build! @pcanal, that fixes the regression for modules. Let's see if the normal builds are ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:57,modifiability,modul,modules,57,"@phsft-bot build! @pcanal, that fixes the regression for modules. Let's see if the normal builds are ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:57,safety,modul,modules,57,"@phsft-bot build! @pcanal, that fixes the regression for modules. Let's see if the normal builds are ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:42,testability,regress,regression,42,"@phsft-bot build! @pcanal, that fixes the regression for modules. Let's see if the normal builds are ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:16,deployability,modul,modules,16,"@pcanal, on the modules end it is okay but it seems the regular builds are failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:64,deployability,build,builds,64,"@pcanal, on the modules end it is okay but it seems the regular builds are failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:75,deployability,fail,failing,75,"@pcanal, on the modules end it is okay but it seems the regular builds are failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:16,modifiability,modul,modules,16,"@pcanal, on the modules end it is okay but it seems the regular builds are failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:75,reliability,fail,failing,75,"@pcanal, on the modules end it is okay but it seems the regular builds are failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:16,safety,modul,modules,16,"@pcanal, on the modules end it is okay but it seems the regular builds are failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:166,safety,test,test,166,"@pcanal, I am attaching a standalone example of the bug. It can be reproduced with clang and libstd++ 62 (on bot lcgapp-slc6-x86-64-29). You will find the command in test.sh in [reproducer.zip](https://github.com/root-project/root/files/1412573/reproducer.zip).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:166,testability,test,test,166,"@pcanal, I am attaching a standalone example of the bug. It can be reproduced with clang and libstd++ 62 (on bot lcgapp-slc6-x86-64-29). You will find the command in test.sh in [reproducer.zip](https://github.com/root-project/root/files/1412573/reproducer.zip).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:155,usability,command,command,155,"@pcanal, I am attaching a standalone example of the bug. It can be reproduced with clang and libstd++ 62 (on bot lcgapp-slc6-x86-64-29). You will find the command in test.sh in [reproducer.zip](https://github.com/root-project/root/files/1412573/reproducer.zip).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1226:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1226
https://github.com/root-project/root/pull/1227:12,testability,simpl,simplified,12,Revised and simplified in #1305 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1227
https://github.com/root-project/root/pull/1227:12,usability,simpl,simplified,12,Revised and simplified in #1305 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1227
https://github.com/root-project/root/pull/1228:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1228
https://github.com/root-project/root/pull/1228:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1228
https://github.com/root-project/root/pull/1228:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1228
https://github.com/root-project/root/pull/1228:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1228
https://github.com/root-project/root/pull/1228:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1228
https://github.com/root-project/root/pull/1229:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On -DCMAKE_BUILD_TYPE=Optimized,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:71,energy efficiency,Optim,Optimized,71,@phsft-bot build with flags -Druntime_cxxmodules=On -DCMAKE_BUILD_TYPE=Optimized,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1229:71,performance,Optimiz,Optimized,71,@phsft-bot build with flags -Druntime_cxxmodules=On -DCMAKE_BUILD_TYPE=Optimized,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1229
https://github.com/root-project/root/pull/1230:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1230
https://github.com/root-project/root/pull/1231:11,deployability,build,build,11,@phsft-bot build with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:11,deployability,build,build,11,@phsft-bot build with -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:11,deployability,build,build,11,@phsft-bot build with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:11,deployability,build,build,11,@phsft-bot build with flags -Dcxxmodules=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:0,availability,Failur,Failures,0,Failures seem to be unrelated/infrastructure issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:0,deployability,Fail,Failures,0,Failures seem to be unrelated/infrastructure issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:30,deployability,infrastructur,infrastructure,30,Failures seem to be unrelated/infrastructure issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:0,performance,Failur,Failures,0,Failures seem to be unrelated/infrastructure issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1231:0,reliability,Fail,Failures,0,Failures seem to be unrelated/infrastructure issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1231
https://github.com/root-project/root/pull/1236:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:0,availability,Failur,Failures,0,Failures seem to be unrelated/infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:0,deployability,Fail,Failures,0,Failures seem to be unrelated/infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:30,deployability,infrastructur,infrastructure,30,Failures seem to be unrelated/infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:0,performance,Failur,Failures,0,Failures seem to be unrelated/infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1236:0,reliability,Fail,Failures,0,Failures seem to be unrelated/infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1236
https://github.com/root-project/root/pull/1237:26,deployability,updat,updates,26,Many thanks for all these updates ! ;-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1237
https://github.com/root-project/root/pull/1237:26,safety,updat,updates,26,Many thanks for all these updates ! ;-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1237
https://github.com/root-project/root/pull/1237:26,security,updat,updates,26,Many thanks for all these updates ! ;-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1237
https://github.com/root-project/root/pull/1238:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1238
https://github.com/root-project/root/pull/1239:18,safety,review,reviewing,18,"Thanks, I'd defer reviewing to the other code owners.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:18,testability,review,reviewing,18,"Thanks, I'd defer reviewing to the other code owners.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:4,deployability,updat,update,4,Any update?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:4,safety,updat,update,4,Any update?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:4,security,updat,update,4,Any update?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:11,deployability,build,build,11,@phsft-bot build because you're stuck.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:23,deployability,build,build,23,"@serval2412 it doesn't build... Please fix your PR, then I'll make sure roottest works and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:15,reliability,doe,doesn,15,"@serval2412 it doesn't build... Please fix your PR, then I'll make sure roottest works and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:79,availability,error,error,79,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:463,availability,error,error,463,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:605,availability,error,error,605,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:658,availability,error,error-related-to-directive-in-rconfigure-h,658,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:13,deployability,instal,install,13,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:45,deployability,build,build,45,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:737,deployability,INSTAL,INSTALL,737,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:863,deployability,build,build,863,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:917,deployability,build,build,917,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:963,deployability,build,build,963,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1020,deployability,build,build,1020,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1111,deployability,version,version,1111,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:245,energy efficiency,core,core,245,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:299,energy efficiency,core,core,299,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:405,energy efficiency,core,core,405,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:951,integrability,messag,message,951,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1111,integrability,version,version,1111,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:951,interoperability,messag,message,951,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1111,modifiability,version,version,1111,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:79,performance,error,error,79,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:463,performance,error,error,463,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:605,performance,error,error,605,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:658,performance,error,error-related-to-directive-in-rconfigure-h,658,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:926,reliability,doe,does,926,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:79,safety,error,error,79,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:463,safety,error,error,463,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:605,safety,error,error,605,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:658,safety,error,error-related-to-directive-in-rconfigure-h,658,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1057,safety,test,testing,1057,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:1057,testability,test,testing,1057,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:79,usability,error,error,79,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:463,usability,error,error,463,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:605,usability,error,error,605,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:658,usability,error,error-related-to-directive-in-rconfigure-h,658,"After having install XPM headers, I tried to build root to not repeat the same error but had this:. Making include/compiledata.h. g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx. In file included from include/TObject.h:16:0,. from /home/julien/projects/root/core/base/src/TObject.cxx:38:. include/RConfigure.h:39:2: error: invalid preprocessing directive #@. #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/. ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:. 1) there's not ""root"" directory but there's a ""rootx"" directory. however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok. 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:. gcc (Debian 7.2.0-12) 7.2.1 20171025. cmake version 3.9.3. ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:36,deployability,INSTAL,INSTALL,36,@serval2412 I'll have a look at the INSTALL file - you can try the procedure described here: https://root.cern.ch/building-root. Or you can just wait - our PR builder is currently looking at your latest commit and will report back soon...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:114,deployability,build,building-root,114,@serval2412 I'll have a look at the INSTALL file - you can try the procedure described here: https://root.cern.ch/building-root. Or you can just wait - our PR builder is currently looking at your latest commit and will report back soon...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:159,deployability,build,builder,159,@serval2412 I'll have a look at the INSTALL file - you can try the procedure described here: https://root.cern.ch/building-root. Or you can just wait - our PR builder is currently looking at your latest commit and will report back soon...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:170,energy efficiency,current,currently,170,@serval2412 I'll have a look at the INSTALL file - you can try the procedure described here: https://root.cern.ch/building-root. Or you can just wait - our PR builder is currently looking at your latest commit and will report back soon...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:26,safety,avoid,avoid,26,I know but it was just to avoid more noise from a simple mistake :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:50,testability,simpl,simple,50,I know but it was just to avoid more noise from a simple mistake :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:50,usability,simpl,simple,50,I know but it was just to avoid more noise from a simple mistake :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:11,deployability,build,build,11,@phsft-bot build because you're stuck.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:37,deployability,integr,integration,37,@serval2412 There's a Jenkins github integration bug; we expect to have it fixed within the next days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:37,integrability,integr,integration,37,@serval2412 There's a Jenkins github integration bug; we expect to have it fixed within the next days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:37,interoperability,integr,integration,37,@serval2412 There's a Jenkins github integration bug; we expect to have it fixed within the next days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:37,modifiability,integr,integration,37,@serval2412 There's a Jenkins github integration bug; we expect to have it fixed within the next days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:37,reliability,integr,integration,37,@serval2412 There's a Jenkins github integration bug; we expect to have it fixed within the next days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:37,security,integr,integration,37,@serval2412 There's a Jenkins github integration bug; we expect to have it fixed within the next days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:37,testability,integr,integration,37,@serval2412 There's a Jenkins github integration bug; we expect to have it fixed within the next days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:11,deployability,build,build,11,@phsft-bot build now that you're back on your feet!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:41,interoperability,format,formatting,41,@serval2412 Could you please address the formatting issues and merge conflicts? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:69,interoperability,conflict,conflicts,69,@serval2412 Could you please address the formatting issues and merge conflicts? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:62,interoperability,format,formatting,62,Thank you Amadio for your feedback. I don't know what are the formatting pbs because I can't see travis results but I fixed conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:124,interoperability,conflict,conflicts,124,Thank you Amadio for your feedback. I don't know what are the formatting pbs because I can't see travis results but I fixed conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:26,usability,feedback,feedback,26,Thank you Amadio for your feedback. I don't know what are the formatting pbs because I can't see travis results but I fixed conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:62,deployability,log,logs,62,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:70,deployability,instal,installed,70,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:32,interoperability,format,format,32,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:86,interoperability,format,format-,86,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:168,interoperability,format,format,168,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:185,interoperability,format,format,185,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:257,interoperability,format,format-,257,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:62,safety,log,logs,62,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:62,security,log,logs,62,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:62,testability,log,logs,62,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:111,usability,command,command,111,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:144,usability,tool,tools,144,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:156,usability,tool,tools,156,I finally understood how to fix format when re reading Travis logs. I installed clang-format-3.9 and used this command:. ./interpreter/llvm/src/tools/clang/tools/clang-format/git-clang-format --commit 10c61dc6964fe8f0fc33321e9338a3247e78be83 --binary clang-format-3.9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:12,interoperability,format,format,12,Each time a format pb is fixed another format pb appears. It seems clang-format should be called on the whole code but some (all?) pull requests would be in conflict. Should I keep on fixing format pb commit after commit hoping to reach the end within some steps only?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:39,interoperability,format,format,39,Each time a format pb is fixed another format pb appears. It seems clang-format should be called on the whole code but some (all?) pull requests would be in conflict. Should I keep on fixing format pb commit after commit hoping to reach the end within some steps only?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:73,interoperability,format,format,73,Each time a format pb is fixed another format pb appears. It seems clang-format should be called on the whole code but some (all?) pull requests would be in conflict. Should I keep on fixing format pb commit after commit hoping to reach the end within some steps only?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:157,interoperability,conflict,conflict,157,Each time a format pb is fixed another format pb appears. It seems clang-format should be called on the whole code but some (all?) pull requests would be in conflict. Should I keep on fixing format pb commit after commit hoping to reach the end within some steps only?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:191,interoperability,format,format,191,Each time a format pb is fixed another format pb appears. It seems clang-format should be called on the whole code but some (all?) pull requests would be in conflict. Should I keep on fixing format pb commit after commit hoping to reach the end within some steps only?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:5,performance,time,time,5,Each time a format pb is fixed another format pb appears. It seems clang-format should be called on the whole code but some (all?) pull requests would be in conflict. Should I keep on fixing format pb commit after commit hoping to reach the end within some steps only?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:61,interoperability,format,format,61,"After some time, I realized I could call several times clang-format locally, each time amending the last commit. Now clang-format doesn't complain anymore locally, hope Travis will be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:123,interoperability,format,format,123,"After some time, I realized I could call several times clang-format locally, each time amending the last commit. Now clang-format doesn't complain anymore locally, hope Travis will be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:11,performance,time,time,11,"After some time, I realized I could call several times clang-format locally, each time amending the last commit. Now clang-format doesn't complain anymore locally, hope Travis will be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:49,performance,time,times,49,"After some time, I realized I could call several times clang-format locally, each time amending the last commit. Now clang-format doesn't complain anymore locally, hope Travis will be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:82,performance,time,time,82,"After some time, I realized I could call several times clang-format locally, each time amending the last commit. Now clang-format doesn't complain anymore locally, hope Travis will be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:130,reliability,doe,doesn,130,"After some time, I realized I could call several times clang-format locally, each time amending the last commit. Now clang-format doesn't complain anymore locally, hope Travis will be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:138,safety,compl,complain,138,"After some time, I realized I could call several times clang-format locally, each time amending the last commit. Now clang-format doesn't complain anymore locally, hope Travis will be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:138,security,compl,complain,138,"After some time, I realized I could call several times clang-format locally, each time amending the last commit. Now clang-format doesn't complain anymore locally, hope Travis will be ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:215,integrability,sub,subset,215,@serval2412 thanks for trying so hard! It's very unfortunate that our format checker doesn't stop where a human would stop - e.g. re-formatting external packages makes really no sense :-( I will pick the reasonable subset of your commits and merge on Monday - thanks a lot for all your efforts!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:70,interoperability,format,format,70,@serval2412 thanks for trying so hard! It's very unfortunate that our format checker doesn't stop where a human would stop - e.g. re-formatting external packages makes really no sense :-( I will pick the reasonable subset of your commits and merge on Monday - thanks a lot for all your efforts!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:133,interoperability,format,formatting,133,@serval2412 thanks for trying so hard! It's very unfortunate that our format checker doesn't stop where a human would stop - e.g. re-formatting external packages makes really no sense :-( I will pick the reasonable subset of your commits and merge on Monday - thanks a lot for all your efforts!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:153,modifiability,pac,packages,153,@serval2412 thanks for trying so hard! It's very unfortunate that our format checker doesn't stop where a human would stop - e.g. re-formatting external packages makes really no sense :-( I will pick the reasonable subset of your commits and merge on Monday - thanks a lot for all your efforts!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:85,reliability,doe,doesn,85,@serval2412 thanks for trying so hard! It's very unfortunate that our format checker doesn't stop where a human would stop - e.g. re-formatting external packages makes really no sense :-( I will pick the reasonable subset of your commits and merge on Monday - thanks a lot for all your efforts!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:93,usability,stop,stop,93,@serval2412 thanks for trying so hard! It's very unfortunate that our format checker doesn't stop where a human would stop - e.g. re-formatting external packages makes really no sense :-( I will pick the reasonable subset of your commits and merge on Monday - thanks a lot for all your efforts!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:118,usability,stop,stop,118,@serval2412 thanks for trying so hard! It's very unfortunate that our format checker doesn't stop where a human would stop - e.g. re-formatting external packages makes really no sense :-( I will pick the reasonable subset of your commits and merge on Monday - thanks a lot for all your efforts!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:45,interoperability,format,format,45,"@serval2412 Sorry for the trouble with clang-format! I usually keep a `git-reformat` in `$HOME/bin` with the following contents:. ```bash. #!/bin/sh. git rebase -i --autosquash -x 'git clang-format master && git commit -a --amend --no-edit' master. ```. Then, keeping clang-format happy is easy, just call `git reformat` before pushing the branch, or after each commit if you are touching the same lines in multiple commits (to avoid conflicts). Thanks a lot for your effort!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:191,interoperability,format,format,191,"@serval2412 Sorry for the trouble with clang-format! I usually keep a `git-reformat` in `$HOME/bin` with the following contents:. ```bash. #!/bin/sh. git rebase -i --autosquash -x 'git clang-format master && git commit -a --amend --no-edit' master. ```. Then, keeping clang-format happy is easy, just call `git reformat` before pushing the branch, or after each commit if you are touching the same lines in multiple commits (to avoid conflicts). Thanks a lot for your effort!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:274,interoperability,format,format,274,"@serval2412 Sorry for the trouble with clang-format! I usually keep a `git-reformat` in `$HOME/bin` with the following contents:. ```bash. #!/bin/sh. git rebase -i --autosquash -x 'git clang-format master && git commit -a --amend --no-edit' master. ```. Then, keeping clang-format happy is easy, just call `git reformat` before pushing the branch, or after each commit if you are touching the same lines in multiple commits (to avoid conflicts). Thanks a lot for your effort!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:434,interoperability,conflict,conflicts,434,"@serval2412 Sorry for the trouble with clang-format! I usually keep a `git-reformat` in `$HOME/bin` with the following contents:. ```bash. #!/bin/sh. git rebase -i --autosquash -x 'git clang-format master && git commit -a --amend --no-edit' master. ```. Then, keeping clang-format happy is easy, just call `git reformat` before pushing the branch, or after each commit if you are touching the same lines in multiple commits (to avoid conflicts). Thanks a lot for your effort!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:119,performance,content,contents,119,"@serval2412 Sorry for the trouble with clang-format! I usually keep a `git-reformat` in `$HOME/bin` with the following contents:. ```bash. #!/bin/sh. git rebase -i --autosquash -x 'git clang-format master && git commit -a --amend --no-edit' master. ```. Then, keeping clang-format happy is easy, just call `git reformat` before pushing the branch, or after each commit if you are touching the same lines in multiple commits (to avoid conflicts). Thanks a lot for your effort!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:428,safety,avoid,avoid,428,"@serval2412 Sorry for the trouble with clang-format! I usually keep a `git-reformat` in `$HOME/bin` with the following contents:. ```bash. #!/bin/sh. git rebase -i --autosquash -x 'git clang-format master && git commit -a --amend --no-edit' master. ```. Then, keeping clang-format happy is easy, just call `git reformat` before pushing the branch, or after each commit if you are touching the same lines in multiple commits (to avoid conflicts). Thanks a lot for your effort!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:79,energy efficiency,reduc,reduce,79,"Thanks a lot, @serval2412 ! Your changes have been merged as PR #1330. We will reduce the strength of clang-format's recommendations, also as a consequence of all the work you invested here. Apologies this took so long!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1239:108,interoperability,format,format,108,"Thanks a lot, @serval2412 ! Your changes have been merged as PR #1330. We will reduce the strength of clang-format's recommendations, also as a consequence of all the work you invested here. Apologies this took so long!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1239
https://github.com/root-project/root/pull/1240:41,interoperability,format,format,41,> Please check the c++ part of the clang-format . Done.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1240
https://github.com/root-project/root/pull/1241:13,availability,error,errors,13,Both timeout errors are reported on the first try to pull from the gut repository. A retry solved the issue. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1241
https://github.com/root-project/root/pull/1241:71,integrability,repositor,repository,71,Both timeout errors are reported on the first try to pull from the gut repository. A retry solved the issue. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1241
https://github.com/root-project/root/pull/1241:71,interoperability,repositor,repository,71,Both timeout errors are reported on the first try to pull from the gut repository. A retry solved the issue. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1241
https://github.com/root-project/root/pull/1241:5,performance,time,timeout,5,Both timeout errors are reported on the first try to pull from the gut repository. A retry solved the issue. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1241
https://github.com/root-project/root/pull/1241:13,performance,error,errors,13,Both timeout errors are reported on the first try to pull from the gut repository. A retry solved the issue. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1241
https://github.com/root-project/root/pull/1241:5,safety,timeout,timeout,5,Both timeout errors are reported on the first try to pull from the gut repository. A retry solved the issue. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1241
https://github.com/root-project/root/pull/1241:13,safety,error,errors,13,Both timeout errors are reported on the first try to pull from the gut repository. A retry solved the issue. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1241
https://github.com/root-project/root/pull/1241:13,usability,error,errors,13,Both timeout errors are reported on the first try to pull from the gut repository. A retry solved the issue. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1241
https://github.com/root-project/root/pull/1242:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:47,deployability,Releas,Release,47,@phsft-bot build with flags -DCMAKE_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:13,availability,failur,failure,13,Is the build failure here due to the PR changes? Should we rebuild?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:7,deployability,build,build,7,Is the build failure here due to the PR changes? Should we rebuild?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:13,deployability,fail,failure,13,Is the build failure here due to the PR changes? Should we rebuild?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:13,performance,failur,failure,13,Is the build failure here due to the PR changes? Should we rebuild?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:13,reliability,fail,failure,13,Is the build failure here due to the PR changes? Should we rebuild?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:29,performance,perform,performance,29,And we need some feedback on performance of this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:17,usability,feedback,feedback,17,And we need some feedback on performance of this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:29,usability,perform,performance,29,And we need some feedback on performance of this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:18,energy efficiency,current,currently,18,Just closing as I currently can't really work on this (due to time/legal reasons).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1242:62,performance,time,time,62,Just closing as I currently can't really work on this (due to time/legal reasons).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1242
https://github.com/root-project/root/pull/1245:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1245
https://github.com/root-project/root/pull/1246:3,safety,test,test,3,"If test are ok (including running with -Dcxxmodules and -Druntime_cxxmodules), LGTM!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:3,testability,test,test,3,"If test are ok (including running with -Dcxxmodules and -Druntime_cxxmodules), LGTM!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1246:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1246
https://github.com/root-project/root/pull/1249:48,energy efficiency,green,green,48,@lmoneta can you have a quick look and give the green light for this to go in?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1249
https://github.com/root-project/root/pull/1249:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1249
https://github.com/root-project/root/pull/1249:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1249
https://github.com/root-project/root/pull/1250:20,interoperability,format,formatting,20,I think some of the formatting suggestions make sense - can you pick and choose?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1250
https://github.com/root-project/root/pull/1250:38,interoperability,format,format,38,Now should be better concerning clang format,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1250
https://github.com/root-project/root/pull/1250:21,modifiability,concern,concerning,21,Now should be better concerning clang format,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1250
https://github.com/root-project/root/pull/1250:21,testability,concern,concerning,21,Now should be better concerning clang format,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1250
https://github.com/root-project/root/pull/1251:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:68,deployability,build,building,68,"@pcanal, could you please address the clang-format complaints? I am building and testing locally, but before merging, I'd like the checks to be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:144,energy efficiency,green,green,144,"@pcanal, could you please address the clang-format complaints? I am building and testing locally, but before merging, I'd like the checks to be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:44,interoperability,format,format,44,"@pcanal, could you please address the clang-format complaints? I am building and testing locally, but before merging, I'd like the checks to be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:51,safety,compl,complaints,51,"@pcanal, could you please address the clang-format complaints? I am building and testing locally, but before merging, I'd like the checks to be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:81,safety,test,testing,81,"@pcanal, could you please address the clang-format complaints? I am building and testing locally, but before merging, I'd like the checks to be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:51,security,compl,complaints,51,"@pcanal, could you please address the clang-format complaints? I am building and testing locally, but before merging, I'd like the checks to be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:81,testability,test,testing,81,"@pcanal, could you please address the clang-format complaints? I am building and testing locally, but before merging, I'd like the checks to be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:743,interoperability,specif,specific,743,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:88,performance,Time,Time,88,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:310,performance,time,time,310,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:390,performance,Time,Time,390,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:613,performance,time,time,613,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:692,performance,perform,performance,692,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:876,performance,lock,lock,876,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:25,safety,test,tests,25,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:125,safety,test,tests,125,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:159,safety,test,tests,159,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:188,safety,test,test,188,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:222,safety,test,tests,222,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:255,safety,test,tests,255,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:291,safety,test,tests,291,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:305,safety,Test,Test,305,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:427,safety,test,tests,427,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:462,safety,test,tests,462,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:491,safety,test,test,491,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:525,safety,test,tests,525,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:558,safety,test,tests,558,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:594,safety,test,tests,594,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:608,safety,Test,Test,608,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:752,safety,test,tests,752,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:783,safety,test,test,783,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:680,security,sign,significant,680,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:876,security,lock,lock,876,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:25,testability,test,tests,25,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:125,testability,test,tests,125,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:159,testability,test,tests,159,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:188,testability,test,test,188,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:195,testability,regress,regression,195,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:222,testability,test,tests,222,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:255,testability,test,tests,255,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:291,testability,test,tests,291,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:305,testability,Test,Test,305,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:427,testability,test,tests,427,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:462,testability,test,tests,462,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:491,testability,test,test,491,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:498,testability,regress,regression,498,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:525,testability,test,tests,525,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:558,testability,test,tests,558,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:594,testability,test,tests,594,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:608,testability,Test,Test,608,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:752,testability,test,tests,752,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:783,testability,test,test,783,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:692,usability,perform,performance,692,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:833,usability,close,closely,833,"Here is a summary of the tests I ran:. **Before changes from this branch:**. ```. Label Time Summary:. cling = 42.21 sec (98 tests). longtest = 942.83 sec (47 tests). matrix = 0.23 sec (1 test). regression = 41.80 sec (97 tests). roottest = 42.44 sec (99 tests). tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec. ```. **After changes from this branch:**. ```. Label Time Summary:. cling = 53.62 sec (98 tests). longtest = 1296.42 sec (47 tests). matrix = 0.21 sec (1 test). regression = 53.21 sec (97 tests). roottest = 53.83 sec (99 tests). tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec. ```. At first look, it seems there is a significant performance cost to these changes. I will run more specific tests (e.g. my `TBufferMerger` test) now and check. how things change a bit more closely. I will also check if removing the lock on. MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:157,availability,sli,slightly,157,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:272,deployability,contain,containers,272,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:61,energy efficiency,Core,Core,61,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:374,energy efficiency,core,core,374,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:256,performance,lock,locks,256,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:157,reliability,sli,slightly,157,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:41,safety,test,test,41,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:256,security,lock,locks,256,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:41,testability,test,test,41,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:472,usability,user,user-images,472,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:596,usability,user,user-images,596,"`TBufferMerger` random number generation test on my machine (Core i7 6700). Differences are not so visible below, but it's possible to notice that waits are slightly more costly (wider gaps), and the total runtime is longer. The wait count (due to the new locks on global containers) goes from ~1500 to about ~34300. These changes need to be checked on machines with higher core count and should probably be discussed with experiments too. *before*. ![screenshot](https://user-images.githubusercontent.com/249404/32664993-29215c94-c633-11e7-91be-539b4b66f97c.png). *after*. ![screenshot](https://user-images.githubusercontent.com/249404/32665020-3bdb1596-c633-11e7-8980-29df072740e2.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:311,energy efficiency,Core,Core,311,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:354,performance,lock,lock,354,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:142,reliability,doe,does,142,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:291,safety,test,test,291,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:373,safety,test,test,373,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:354,security,lock,lock,354,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:291,testability,test,test,291,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:373,testability,test,test,373,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:105,usability,stop,stopped,105,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:222,usability,stop,stopped,222,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:398,usability,clear,clear,398,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime? > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:216,energy efficiency,Load,LoadClassInfo,216,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:584,energy efficiency,Core,Core,584,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:216,performance,Load,LoadClassInfo,216,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:454,performance,lock,lock,454,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:629,performance,lock,lock,629,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:787,performance,lock,lock,787,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:831,performance,lock,lock,831,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:144,reliability,doe,does,144,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:564,safety,test,test,564,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:648,safety,test,test,648,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:698,safety,test,test,698,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:817,safety,test,test,817,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:454,security,lock,lock,454,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:629,security,lock,lock,629,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:787,security,lock,lock,787,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:831,security,lock,lock,831,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:564,testability,test,test,564,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:648,testability,test,test,648,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:698,testability,test,test,698,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:817,testability,test,test,817,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:107,usability,stop,stopped,107,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:396,usability,stop,stopped,396,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:430,usability,stop,stops,430,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:673,usability,clear,clear,673,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime? These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700). > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:33,energy efficiency,Load,LoadClassInfo,33,"> Yes, that's the point at which LoadClassInfo() gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. One thing I would like to explore is why it is (or seems to be) larger in the new case and why there is additional waits 'just' right after.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1251:33,performance,Load,LoadClassInfo,33,"> Yes, that's the point at which LoadClassInfo() gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. One thing I would like to explore is why it is (or seems to be) larger in the new case and why there is additional waits 'just' right after.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1251
https://github.com/root-project/root/pull/1252:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Dcxx14=ON -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1252
https://github.com/root-project/root/pull/1253:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_all=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1253:41,availability,consist,consistent,41,@bbockelm now it's all SHA256 and with a consistent style,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1253:41,usability,consist,consistent,41,@bbockelm now it's all SHA256 and with a consistent style,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1253:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_all=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1253:33,energy efficiency,load,loadAllLibs,33,> projectroot.roottest.root.meta.loadAllLibs.roottest_root_meta_loadAllLibs_LoadAllLibsAZ. Is this problem reproducible locally or is it a jenkins glitch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1253:33,performance,load,loadAllLibs,33,> projectroot.roottest.root.meta.loadAllLibs.roottest_root_meta_loadAllLibs_LoadAllLibsAZ. Is this problem reproducible locally or is it a jenkins glitch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1253
https://github.com/root-project/root/pull/1254:21,usability,statu,status,21,@pcanal - what's the status of this one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1254:82,reliability,doe,does,82,"HUmm ... I suppose I was waiting for it to be fixed on MacOS ... but since github does not notify on success, I did not notice it (likely) did.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1254
https://github.com/root-project/root/pull/1255:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On. Do the thing Jenkins!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1255
https://github.com/root-project/root/pull/1255:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off. Just to abort the stuck builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1255
https://github.com/root-project/root/pull/1255:78,deployability,build,builds,78,@phsft-bot build with flags -Druntime_cxxmodules=Off. Just to abort the stuck builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1255
https://github.com/root-project/root/pull/1256:170,deployability,patch,patch,170,"This is actually due to a GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82906 - lld does ""the right thing"". I'll compare the stressTMVA time with and without this patch before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:143,performance,time,time,143,"This is actually due to a GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82906 - lld does ""the right thing"". I'll compare the stressTMVA time with and without this patch before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:91,reliability,doe,does,91,"This is actually due to a GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82906 - lld does ""the right thing"". I'll compare the stressTMVA time with and without this patch before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:170,safety,patch,patch,170,"This is actually due to a GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82906 - lld does ""the right thing"". I'll compare the stressTMVA time with and without this patch before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:170,security,patch,patch,170,"This is actually due to a GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82906 - lld does ""the right thing"". I'll compare the stressTMVA time with and without this patch before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:0,availability,ping,ping,0,ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:199,integrability,event,event,199,"@Axel-Naumann are we still having a problem in ldd for this one ? . I would prefer to close this and not merge, since I suspect outlining this function will be very costly. It is heavily used in the event loop by the DecisionTree class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:76,usability,prefer,prefer,76,"@Axel-Naumann are we still having a problem in ldd for this one ? . I would prefer to close this and not merge, since I suspect outlining this function will be very costly. It is heavily used in the event loop by the DecisionTree class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1256:86,usability,close,close,86,"@Axel-Naumann are we still having a problem in ldd for this one ? . I would prefer to close this and not merge, since I suspect outlining this function will be very costly. It is heavily used in the event loop by the DecisionTree class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1256
https://github.com/root-project/root/pull/1257:0,deployability,Depend,Depends,0,Depends on PR #1218 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:0,integrability,Depend,Depends,0,Depends on PR #1218 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:0,modifiability,Depend,Depends,0,Depends on PR #1218 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:0,safety,Depend,Depends,0,Depends on PR #1218 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1257:0,testability,Depend,Depends,0,Depends on PR #1218 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1257
https://github.com/root-project/root/pull/1259:18,safety,test,tests,18,The `colWiseRead` tests are fixed by [this PR in roottest](https://github.com/root-project/roottest/pull/102).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:18,testability,test,tests,18,The `colWiseRead` tests are fixed by [this PR in roottest](https://github.com/root-project/roottest/pull/102).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:52,interoperability,format,format,52,Rebased on master and fixed almost all of the clang-format issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:347,availability,operat,operator,347,Hi @axel-naumann. thank you for the thorough review! I will address all comments when I'm back on Wednesday. A major problem I see is that I have to fix the behaviour of the const iterator. Are const iterators usually implemented as a different type altogether? Should I add a boolean template parameter that causes changes in the return type of `operator*`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:294,modifiability,paramet,parameter,294,Hi @axel-naumann. thank you for the thorough review! I will address all comments when I'm back on Wednesday. A major problem I see is that I have to fix the behaviour of the const iterator. Are const iterators usually implemented as a different type altogether? Should I add a boolean template parameter that causes changes in the return type of `operator*`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:45,safety,review,review,45,Hi @axel-naumann. thank you for the thorough review! I will address all comments when I'm back on Wednesday. A major problem I see is that I have to fix the behaviour of the const iterator. Are const iterators usually implemented as a different type altogether? Should I add a boolean template parameter that causes changes in the return type of `operator*`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:45,testability,review,review,45,Hi @axel-naumann. thank you for the thorough review! I will address all comments when I'm back on Wednesday. A major problem I see is that I have to fix the behaviour of the const iterator. Are const iterators usually implemented as a different type altogether? Should I add a boolean template parameter that causes changes in the return type of `operator*`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:157,usability,behavi,behaviour,157,Hi @axel-naumann. thank you for the thorough review! I will address all comments when I'm back on Wednesday. A major problem I see is that I have to fix the behaviour of the const iterator. Are const iterators usually implemented as a different type altogether? Should I add a boolean template parameter that causes changes in the return type of `operator*`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:152,availability,operat,operator,152,"Yes, the trick is basically to template on the pointer type, so you can pass it as `T` to build an `iterator` and `const T` for `const_iterator`. Then `operator*` can return `add_reference<remove_pointer<PTR>>`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:90,deployability,build,build,90,"Yes, the trick is basically to template on the pointer type, so you can pass it as `T` to build an `iterator` and `const T` for `const_iterator`. Then `operator*` can return `add_reference<remove_pointer<PTR>>`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:186,availability,operat,operator,186,"Cleaned up commit history, rebased and pushed again. All previous comments should have been addressed except avoiding code duplication in the unit test. I have also introduced `iterator operator+(int, iterator)`, which cppreference lists as required. Also, now incrementing an invalid (e.g. past-the-end) iterator is a no-op.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:102,safety,except,except,102,"Cleaned up commit history, rebased and pushed again. All previous comments should have been addressed except avoiding code duplication in the unit test. I have also introduced `iterator operator+(int, iterator)`, which cppreference lists as required. Also, now incrementing an invalid (e.g. past-the-end) iterator is a no-op.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:109,safety,avoid,avoiding,109,"Cleaned up commit history, rebased and pushed again. All previous comments should have been addressed except avoiding code duplication in the unit test. I have also introduced `iterator operator+(int, iterator)`, which cppreference lists as required. Also, now incrementing an invalid (e.g. past-the-end) iterator is a no-op.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:147,safety,test,test,147,"Cleaned up commit history, rebased and pushed again. All previous comments should have been addressed except avoiding code duplication in the unit test. I have also introduced `iterator operator+(int, iterator)`, which cppreference lists as required. Also, now incrementing an invalid (e.g. past-the-end) iterator is a no-op.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:142,testability,unit,unit,142,"Cleaned up commit history, rebased and pushed again. All previous comments should have been addressed except avoiding code duplication in the unit test. I have also introduced `iterator operator+(int, iterator)`, which cppreference lists as required. Also, now incrementing an invalid (e.g. past-the-end) iterator is a no-op.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:147,testability,test,test,147,"Cleaned up commit history, rebased and pushed again. All previous comments should have been addressed except avoiding code duplication in the unit test. I have also introduced `iterator operator+(int, iterator)`, which cppreference lists as required. Also, now incrementing an invalid (e.g. past-the-end) iterator is a no-op.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:181,energy efficiency,load,loads,181,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator. We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:65,integrability,topic,topic,65,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator. We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:33,modifiability,refact,refactoring,33,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator. We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:33,performance,refactor,refactoring,33,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator. We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:181,performance,load,loads,181,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator. We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:49,safety,test,tests,49,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator. We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:49,testability,test,tests,49,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator. We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:135,usability,user,user,135,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator. We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:250,usability,document,document,250,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator. We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:316,availability,operat,operator,316,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:395,availability,operat,operator,395,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:586,deployability,depend,dependent,586,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:586,integrability,depend,dependent,586,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:29,modifiability,refact,refactored,29,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:586,modifiability,depend,dependent,586,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:29,performance,refactor,refactored,29,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:0,safety,Test,Tests,0,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:43,safety,avoid,avoid,43,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:586,safety,depend,dependent,586,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:124,security,access,access,124,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:0,testability,Test,Tests,0,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:586,testability,depend,dependent,586,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1259:157,usability,support,support,157,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++. template <typename T>. auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it). -> decltype(it + n). {. return it + n;. }. ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1259
https://github.com/root-project/root/pull/1261:11,deployability,build,build,11,@phsft-bot build with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1261
https://github.com/root-project/root/pull/1262:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1262
https://github.com/root-project/root/pull/1263:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1263
https://github.com/root-project/root/pull/1268:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1268:11,deployability,build,build,11,@phsft-bot build with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1268
https://github.com/root-project/root/pull/1271:9,availability,failur,failure,9,The test failure gtest-tree-treeplayer-test-datasource-root is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:9,deployability,fail,failure,9,The test failure gtest-tree-treeplayer-test-datasource-root is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:9,performance,failur,failure,9,The test failure gtest-tree-treeplayer-test-datasource-root is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:9,reliability,fail,failure,9,The test failure gtest-tree-treeplayer-test-datasource-root is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:4,safety,test,test,4,The test failure gtest-tree-treeplayer-test-datasource-root is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:39,safety,test,test-datasource-root,39,The test failure gtest-tree-treeplayer-test-datasource-root is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:4,testability,test,test,4,The test failure gtest-tree-treeplayer-test-datasource-root is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1271:39,testability,test,test-datasource-root,39,The test failure gtest-tree-treeplayer-test-datasource-root is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1271
https://github.com/root-project/root/pull/1272:11,deployability,build,build,11,@phsft-bot build with flags - Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1272:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1272
https://github.com/root-project/root/pull/1275:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON -Dvc=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1275:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON -Dvc=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1275:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON -Dvc=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1275
https://github.com/root-project/root/pull/1277:11,deployability,build,build,11,@phsft-bot build with flags -Dtesting=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1277
https://github.com/root-project/root/pull/1277:11,deployability,build,build,11,@phsft-bot build with flags -Dtesting=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1277
https://github.com/root-project/root/pull/1277:11,deployability,build,build,11,@phsft-bot build with flags -Dtesting=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1277
https://github.com/root-project/root/pull/1278:11,deployability,build,build,11,@phsft-bot build again because you messed up the previous one!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1278
https://github.com/root-project/root/pull/1278:11,deployability,build,build,11,@phsft-bot build now that you're back on your feet!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1278
https://github.com/root-project/root/pull/1279:11,deployability,build,build,11,@phsft-bot build also on clang_gcc62,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1279
https://github.com/root-project/root/pull/1279:11,deployability,build,build,11,@phsft-bot build also on slc6/clang_gcc62,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1279
https://github.com/root-project/root/pull/1279:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1279
https://github.com/root-project/root/pull/1280:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1280
https://github.com/root-project/root/pull/1281:75,performance,content,content,75,> webgui: merge changes from Olivier. Please use wording that describe the content of the commit not the action that let to it :) Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:79,performance,content,content,79,">> webgui: merge changes from Olivier . > Please use wording that describe the content of the commit not the action that let to it :) Thanks. Problem, that Olivier changes same files parallel to this PR. And actually, changes are equivalent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:183,performance,parallel,parallel,183,">> webgui: merge changes from Olivier . > Please use wording that describe the content of the commit not the action that let to it :) Thanks. Problem, that Olivier changes same files parallel to this PR. And actually, changes are equivalent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15 with flags -Dcxx14=ON -Droot7=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1281:13,interoperability,conflict,conflict,13,Because of a conflict with the Readme.md file this PR is replaced by #1290,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1281
https://github.com/root-project/root/pull/1282:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1282:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off. Just to make Jenkins green,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1282:75,energy efficiency,green,green,75,@phsft-bot build with flags -Druntime_cxxmodules=Off. Just to make Jenkins green,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1282:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1282
https://github.com/root-project/root/pull/1284:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1284:11,deployability,build,build,11,@phsft-bot build -Dvc=OFF -Dimt=ON -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1284
https://github.com/root-project/root/pull/1285:10,integrability,sub,submit,10,Could you submit that fix for review at: review.llvm.org. We only backport fixes from there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:30,safety,review,review,30,Could you submit that fix for review at: review.llvm.org. We only backport fixes from there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:41,safety,review,review,41,Could you submit that fix for review at: review.llvm.org. We only backport fixes from there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:30,testability,review,review,30,Could you submit that fix for review at: review.llvm.org. We only backport fixes from there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:41,testability,review,review,41,Could you submit that fix for review at: review.llvm.org. We only backport fixes from there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:11,availability,sli,slightly,11,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:79,deployability,build,build,79,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:89,deployability,patch,patch,89,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:205,deployability,patch,patches,205,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:317,deployability,patch,patch-free,317,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:119,energy efficiency,green,green-lit,119,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:11,reliability,sli,slightly,11,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:89,safety,patch,patch,89,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:205,safety,patch,patches,205,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:231,safety,review,review,231,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:317,safety,patch,patch-free,317,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:89,security,patch,patch,89,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:205,security,patch,patches,205,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:317,security,patch,patch-free,317,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:231,testability,review,review,231,"Rephrasing slightly: unless it's breaking someone's back (e.g. an experiment's build), a patch to llvm should first be green-lit by the llvm people and then applied here. The llvm people often improve our patches (because they can review them), so it's better to do it this way around. This also makes sure we remain patch-free wrt llvm, even though some of its commits might have landed a bit early in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:72,deployability,patch,patch,72,Uploaded as https://reviews.llvm.org/D39716. Will need to be a separate patch in ROOT since upstream's CMakeLists.txt has changed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:20,safety,review,reviews,20,Uploaded as https://reviews.llvm.org/D39716. Will need to be a separate patch in ROOT since upstream's CMakeLists.txt has changed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:72,safety,patch,patch,72,Uploaded as https://reviews.llvm.org/D39716. Will need to be a separate patch in ROOT since upstream's CMakeLists.txt has changed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:72,security,patch,patch,72,Uploaded as https://reviews.llvm.org/D39716. Will need to be a separate patch in ROOT since upstream's CMakeLists.txt has changed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:20,testability,review,reviews,20,Uploaded as https://reviews.llvm.org/D39716. Will need to be a separate patch in ROOT since upstream's CMakeLists.txt has changed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:26,usability,help,help,26,Thanks @Teemperor for the help with uploading :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:69,safety,review,review,69,"@amadio, how urgent is this? Could we wait to see the outcome of the review before merging this in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:69,testability,review,review,69,"@amadio, how urgent is this? Could we wait to see the outcome of the review before merging this in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:47,safety,review,review,47,"This isn't urgent, so we can wait for the LLVM review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:47,testability,review,review,47,"This isn't urgent, so we can wait for the LLVM review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:29,deployability,upgrad,upgrade,29,"It seems that since the LLVM upgrade the warnings due to this do not happen on master anymore, but only on the 6.10 and 6.08 branches. How about I close this and just apply this patch to those branches, then? @Axel-Naumann @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:178,deployability,patch,patch,178,"It seems that since the LLVM upgrade the warnings due to this do not happen on master anymore, but only on the 6.10 and 6.08 branches. How about I close this and just apply this patch to those branches, then? @Axel-Naumann @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:29,modifiability,upgrad,upgrade,29,"It seems that since the LLVM upgrade the warnings due to this do not happen on master anymore, but only on the 6.10 and 6.08 branches. How about I close this and just apply this patch to those branches, then? @Axel-Naumann @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:178,safety,patch,patch,178,"It seems that since the LLVM upgrade the warnings due to this do not happen on master anymore, but only on the 6.10 and 6.08 branches. How about I close this and just apply this patch to those branches, then? @Axel-Naumann @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:178,security,patch,patch,178,"It seems that since the LLVM upgrade the warnings due to this do not happen on master anymore, but only on the 6.10 and 6.08 branches. How about I close this and just apply this patch to those branches, then? @Axel-Naumann @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1285:147,usability,close,close,147,"It seems that since the LLVM upgrade the warnings due to this do not happen on master anymore, but only on the 6.10 and 6.08 branches. How about I close this and just apply this patch to those branches, then? @Axel-Naumann @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1285
https://github.com/root-project/root/pull/1287:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off. Just to have Jenkins green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1287:75,energy efficiency,green,green,75,@phsft-bot build with flags -Druntime_cxxmodules=Off. Just to have Jenkins green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1287
https://github.com/root-project/root/pull/1290:123,energy efficiency,model,model,123,"@couet I guess, it can be merged now. I already have new bunch of commits with improved documentation and better ownership model",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:123,security,model,model,123,"@couet I guess, it can be merged now. I already have new bunch of commits with improved documentation and better ownership model",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1290:88,usability,document,documentation,88,"@couet I guess, it can be merged now. I already have new bunch of commits with improved documentation and better ownership model",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1290
https://github.com/root-project/root/pull/1292:11,deployability,build,build,11,@phsft-bot build with -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1292
https://github.com/root-project/root/pull/1292:11,deployability,build,build,11,@phsft-bot build with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1292
https://github.com/root-project/root/pull/1294:8,availability,error,errors,8,"Jenkins errors are false positives and the PR looks good to me, except for a few formalities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:8,performance,error,errors,8,"Jenkins errors are false positives and the PR looks good to me, except for a few formalities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:8,safety,error,errors,8,"Jenkins errors are false positives and the PR looks good to me, except for a few formalities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:64,safety,except,except,64,"Jenkins errors are false positives and the PR looks good to me, except for a few formalities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:8,usability,error,errors,8,"Jenkins errors are false positives and the PR looks good to me, except for a few formalities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:649,integrability,interfac,interface,649,"On top of what we have already and a bit more of pyroot testing, I need to figure out what to do with the signatures. The fact that the size of bins is an integer and not a size_t is a problem for initialiser lists. Now one would do in Python:. ``` py. v = ROOT.std.vector('double')(). for i in [0,1,2,3,4,5]: v.push_back(i). tdf.Histo1D(('myhisto', 'myhisto', int(v.size()), v.data()),""mycol""). ```. that cast is bad. What would be desirable would be:. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v.size(), v.data()),""mycol""). ```. or even. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v),""mycol""). ```. The last but one line involves a change in the interface (which makes it incompatible with the one of TH*) while the last one also a change in PyROOT for implicit conversions to array_view<T>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:649,interoperability,interfac,interface,649,"On top of what we have already and a bit more of pyroot testing, I need to figure out what to do with the signatures. The fact that the size of bins is an integer and not a size_t is a problem for initialiser lists. Now one would do in Python:. ``` py. v = ROOT.std.vector('double')(). for i in [0,1,2,3,4,5]: v.push_back(i). tdf.Histo1D(('myhisto', 'myhisto', int(v.size()), v.data()),""mycol""). ```. that cast is bad. What would be desirable would be:. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v.size(), v.data()),""mycol""). ```. or even. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v),""mycol""). ```. The last but one line involves a change in the interface (which makes it incompatible with the one of TH*) while the last one also a change in PyROOT for implicit conversions to array_view<T>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:675,interoperability,incompatib,incompatible,675,"On top of what we have already and a bit more of pyroot testing, I need to figure out what to do with the signatures. The fact that the size of bins is an integer and not a size_t is a problem for initialiser lists. Now one would do in Python:. ``` py. v = ROOT.std.vector('double')(). for i in [0,1,2,3,4,5]: v.push_back(i). tdf.Histo1D(('myhisto', 'myhisto', int(v.size()), v.data()),""mycol""). ```. that cast is bad. What would be desirable would be:. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v.size(), v.data()),""mycol""). ```. or even. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v),""mycol""). ```. The last but one line involves a change in the interface (which makes it incompatible with the one of TH*) while the last one also a change in PyROOT for implicit conversions to array_view<T>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:765,interoperability,convers,conversions,765,"On top of what we have already and a bit more of pyroot testing, I need to figure out what to do with the signatures. The fact that the size of bins is an integer and not a size_t is a problem for initialiser lists. Now one would do in Python:. ``` py. v = ROOT.std.vector('double')(). for i in [0,1,2,3,4,5]: v.push_back(i). tdf.Histo1D(('myhisto', 'myhisto', int(v.size()), v.data()),""mycol""). ```. that cast is bad. What would be desirable would be:. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v.size(), v.data()),""mycol""). ```. or even. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v),""mycol""). ```. The last but one line involves a change in the interface (which makes it incompatible with the one of TH*) while the last one also a change in PyROOT for implicit conversions to array_view<T>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:649,modifiability,interfac,interface,649,"On top of what we have already and a bit more of pyroot testing, I need to figure out what to do with the signatures. The fact that the size of bins is an integer and not a size_t is a problem for initialiser lists. Now one would do in Python:. ``` py. v = ROOT.std.vector('double')(). for i in [0,1,2,3,4,5]: v.push_back(i). tdf.Histo1D(('myhisto', 'myhisto', int(v.size()), v.data()),""mycol""). ```. that cast is bad. What would be desirable would be:. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v.size(), v.data()),""mycol""). ```. or even. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v),""mycol""). ```. The last but one line involves a change in the interface (which makes it incompatible with the one of TH*) while the last one also a change in PyROOT for implicit conversions to array_view<T>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:56,safety,test,testing,56,"On top of what we have already and a bit more of pyroot testing, I need to figure out what to do with the signatures. The fact that the size of bins is an integer and not a size_t is a problem for initialiser lists. Now one would do in Python:. ``` py. v = ROOT.std.vector('double')(). for i in [0,1,2,3,4,5]: v.push_back(i). tdf.Histo1D(('myhisto', 'myhisto', int(v.size()), v.data()),""mycol""). ```. that cast is bad. What would be desirable would be:. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v.size(), v.data()),""mycol""). ```. or even. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v),""mycol""). ```. The last but one line involves a change in the interface (which makes it incompatible with the one of TH*) while the last one also a change in PyROOT for implicit conversions to array_view<T>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:106,security,sign,signatures,106,"On top of what we have already and a bit more of pyroot testing, I need to figure out what to do with the signatures. The fact that the size of bins is an integer and not a size_t is a problem for initialiser lists. Now one would do in Python:. ``` py. v = ROOT.std.vector('double')(). for i in [0,1,2,3,4,5]: v.push_back(i). tdf.Histo1D(('myhisto', 'myhisto', int(v.size()), v.data()),""mycol""). ```. that cast is bad. What would be desirable would be:. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v.size(), v.data()),""mycol""). ```. or even. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v),""mycol""). ```. The last but one line involves a change in the interface (which makes it incompatible with the one of TH*) while the last one also a change in PyROOT for implicit conversions to array_view<T>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:56,testability,test,testing,56,"On top of what we have already and a bit more of pyroot testing, I need to figure out what to do with the signatures. The fact that the size of bins is an integer and not a size_t is a problem for initialiser lists. Now one would do in Python:. ``` py. v = ROOT.std.vector('double')(). for i in [0,1,2,3,4,5]: v.push_back(i). tdf.Histo1D(('myhisto', 'myhisto', int(v.size()), v.data()),""mycol""). ```. that cast is bad. What would be desirable would be:. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v.size(), v.data()),""mycol""). ```. or even. ``` py. tdf.Histo1D(('myhisto', 'myhisto', v),""mycol""). ```. The last but one line involves a change in the interface (which makes it incompatible with the one of TH*) while the last one also a change in PyROOT for implicit conversions to array_view<T>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:169,performance,perform,perform,169,"@dpiparo I agree the cast is not nice, but isn't that issue separate from the one this PR addresses? If I understand correctly pyROOT users have always been required to perform that cast due to the C++ signatures of `TH*`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:202,security,sign,signatures,202,"@dpiparo I agree the cast is not nice, but isn't that issue separate from the one this PR addresses? If I understand correctly pyROOT users have always been required to perform that cast due to the C++ signatures of `TH*`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:106,testability,understand,understand,106,"@dpiparo I agree the cast is not nice, but isn't that issue separate from the one this PR addresses? If I understand correctly pyROOT users have always been required to perform that cast due to the C++ signatures of `TH*`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:134,usability,user,users,134,"@dpiparo I agree the cast is not nice, but isn't that issue separate from the one this PR addresses? If I understand correctly pyROOT users have always been required to perform that cast due to the C++ signatures of `TH*`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1294:169,usability,perform,perform,169,"@dpiparo I agree the cast is not nice, but isn't that issue separate from the one this PR addresses? If I understand correctly pyROOT users have always been required to perform that cast due to the C++ signatures of `TH*`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1294
https://github.com/root-project/root/pull/1296:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1296
https://github.com/root-project/root/pull/1296:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1296
https://github.com/root-project/root/pull/1297:15,availability,error,errors,15,Based on those errors it should resolve the ticket. Let's ask OP on the ticket to try now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1297
https://github.com/root-project/root/pull/1297:15,performance,error,errors,15,Based on those errors it should resolve the ticket. Let's ask OP on the ticket to try now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1297
https://github.com/root-project/root/pull/1297:15,safety,error,errors,15,Based on those errors it should resolve the ticket. Let's ask OP on the ticket to try now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1297
https://github.com/root-project/root/pull/1297:15,usability,error,errors,15,Based on those errors it should resolve the ticket. Let's ask OP on the ticket to try now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1297
https://github.com/root-project/root/pull/1302:38,interoperability,format,formatting,38,"I've made all changes related to code formatting, adding credits to new files, fixing backward compatibility issues, testing that this does not break anything. @peremato can you have a look and approve these changes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1302
https://github.com/root-project/root/pull/1302:95,interoperability,compatib,compatibility,95,"I've made all changes related to code formatting, adding credits to new files, fixing backward compatibility issues, testing that this does not break anything. @peremato can you have a look and approve these changes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1302
https://github.com/root-project/root/pull/1302:135,reliability,doe,does,135,"I've made all changes related to code formatting, adding credits to new files, fixing backward compatibility issues, testing that this does not break anything. @peremato can you have a look and approve these changes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1302
https://github.com/root-project/root/pull/1302:117,safety,test,testing,117,"I've made all changes related to code formatting, adding credits to new files, fixing backward compatibility issues, testing that this does not break anything. @peremato can you have a look and approve these changes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1302
https://github.com/root-project/root/pull/1302:117,testability,test,testing,117,"I've made all changes related to code formatting, adding credits to new files, fixing backward compatibility issues, testing that this does not break anything. @peremato can you have a look and approve these changes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1302
https://github.com/root-project/root/pull/1302:50,safety,test,test,50,"All ok, sorry for the delay. Just for reference a test with beryllium. quantity | G4 | TGeo | TGeo(G4). --- | --- | --- | ---. RadLen | 35.2 | 34.4 | 35.2. IntLen | 39.4 | 39.4 | 39.4. Will this go to 6.12?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1302
https://github.com/root-project/root/pull/1302:50,testability,test,test,50,"All ok, sorry for the delay. Just for reference a test with beryllium. quantity | G4 | TGeo | TGeo(G4). --- | --- | --- | ---. RadLen | 35.2 | 34.4 | 35.2. IntLen | 39.4 | 39.4 | 39.4. Will this go to 6.12?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1302
https://github.com/root-project/root/pull/1305:27,safety,test,test,27,Working on the fix for the test... I will create a PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:27,testability,test,test,27,Working on the fix for the test... I will create a PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:82,safety,test,test,82,https://github.com/root-project/roottest/pull/108 fixes the reference file of the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:82,testability,test,test,82,https://github.com/root-project/roottest/pull/108 fixes the reference file of the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:22,deployability,integr,integration,22,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:134,deployability,version,versions,134,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:105,energy efficiency,model,model,105,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:224,energy efficiency,current,current,224,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:284,energy efficiency,model,model,284,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:393,energy efficiency,model,model,393,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:479,energy efficiency,model,model,479,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:524,energy efficiency,model,model,524,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:22,integrability,integr,integration,22,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:134,integrability,version,versions,134,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:22,interoperability,integr,integration,22,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:9,modifiability,concern,concerns,9,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:22,modifiability,integr,integration,22,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:134,modifiability,version,versions,134,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:22,reliability,integr,integration,22,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:22,security,integr,integration,22,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:105,security,model,model,105,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:284,security,model,model,284,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:393,security,model,model,393,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:479,security,model,model,479,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:524,security,model,model,524,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:9,testability,concern,concerns,9,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1305:22,testability,integr,integration,22,"For what concerns the integration in TDF, the cases to cover are:. 1) tdf.Histo1D(""col""). 2) tdf.Histo1D(model, ""col""). (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64. For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1305
https://github.com/root-project/root/pull/1306:37,interoperability,conflict,conflicts,37,Hi @vgvassilev could you resolve the conflicts of this one and merge if it's good to go? Thanks,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:26,testability,plan,plans,26,@vgvassilev what are your plans for this one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:66,deployability,fail,failing,66,@vgvassilev @Axel-Naumann what do we do with this one ? . Can the failing tests be fixed ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:66,reliability,fail,failing,66,@vgvassilev @Axel-Naumann what do we do with this one ? . Can the failing tests be fixed ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:74,safety,test,tests,74,@vgvassilev @Axel-Naumann what do we do with this one ? . Can the failing tests be fixed ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:74,testability,test,tests,74,@vgvassilev @Axel-Naumann what do we do with this one ? . Can the failing tests be fixed ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:97,availability,error,error,97,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:205,availability,failur,failure,205,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:205,deployability,fail,failure,205,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:160,integrability,sub,submit,160,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:97,performance,error,error,97,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:185,performance,time,time,185,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:205,performance,failur,failure,205,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:205,reliability,fail,failure,205,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:97,safety,error,error,97,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:97,usability,error,error,97,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1306:129,usability,close,close,129,projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make shows an actual error. @vgvassilev I propose we close this for now; you can re-submit once you find the time to address the failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1306
https://github.com/root-project/root/pull/1310:38,safety,test,test,38,Thank you a lot!! Is it worth to also test the friends-of-friends case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1310:38,testability,test,test,38,Thank you a lot!! Is it worth to also test the friends-of-friends case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1310:38,usability,support,supported,38,"I'm afraid friends of friends are not supported in TTreeProcessorMT itself. I was not aware of this use case, this means that when I read a tree I can also see the branches of the friends of the friends (of the friends of the friends etc.) of that tree?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1310:40,usability,support,supported,40,"> I'm afraid friends of friends are not supported in TTreeProcessorMT itself. I was not aware of this use case, this means that when I read a tree I can also see the branches of the friends of the friends (of the friends of the friends etc.) of that tree? Yes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1310:13,usability,document,document,13,"I propose to document this feature clearly unless it can be easily implemented. Technically it's a bug fix, I do not see issues in dealing with it for 6.12 too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1310:35,usability,clear,clearly,35,"I propose to document this feature clearly unless it can be easily implemented. Technically it's a bug fix, I do not see issues in dealing with it for 6.12 too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1310
https://github.com/root-project/root/pull/1312:297,energy efficiency,current,current,297,"Hi, even before starting to comment this, for the sake of clarity, my proposal was not to go for the inheritance chain but rather for a utility function/class in ROOT::Internal which could absorb the duplication of code you described present in TMVA and fitting. This was intended to simplify the current status of the *implementations* for 6.12. The timeline I suggested for a change of the Executors structure involved May, i.e. target 6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:101,modifiability,inherit,inheritance,101,"Hi, even before starting to comment this, for the sake of clarity, my proposal was not to go for the inheritance chain but rather for a utility function/class in ROOT::Internal which could absorb the duplication of code you described present in TMVA and fitting. This was intended to simplify the current status of the *implementations* for 6.12. The timeline I suggested for a change of the Executors structure involved May, i.e. target 6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:351,performance,time,timeline,351,"Hi, even before starting to comment this, for the sake of clarity, my proposal was not to go for the inheritance chain but rather for a utility function/class in ROOT::Internal which could absorb the duplication of code you described present in TMVA and fitting. This was intended to simplify the current status of the *implementations* for 6.12. The timeline I suggested for a change of the Executors structure involved May, i.e. target 6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:284,testability,simpl,simplify,284,"Hi, even before starting to comment this, for the sake of clarity, my proposal was not to go for the inheritance chain but rather for a utility function/class in ROOT::Internal which could absorb the duplication of code you described present in TMVA and fitting. This was intended to simplify the current status of the *implementations* for 6.12. The timeline I suggested for a change of the Executors structure involved May, i.e. target 6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:58,usability,clarit,clarity,58,"Hi, even before starting to comment this, for the sake of clarity, my proposal was not to go for the inheritance chain but rather for a utility function/class in ROOT::Internal which could absorb the duplication of code you described present in TMVA and fitting. This was intended to simplify the current status of the *implementations* for 6.12. The timeline I suggested for a change of the Executors structure involved May, i.e. target 6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:284,usability,simpl,simplify,284,"Hi, even before starting to comment this, for the sake of clarity, my proposal was not to go for the inheritance chain but rather for a utility function/class in ROOT::Internal which could absorb the duplication of code you described present in TMVA and fitting. This was intended to simplify the current status of the *implementations* for 6.12. The timeline I suggested for a change of the Executors structure involved May, i.e. target 6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:305,usability,statu,status,305,"Hi, even before starting to comment this, for the sake of clarity, my proposal was not to go for the inheritance chain but rather for a utility function/class in ROOT::Internal which could absorb the duplication of code you described present in TMVA and fitting. This was intended to simplify the current status of the *implementations* for 6.12. The timeline I suggested for a change of the Executors structure involved May, i.e. target 6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:184,energy efficiency,reduc,reduce,184,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:221,energy efficiency,reduc,reducing,221,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:260,integrability,interfac,interface,260,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:260,interoperability,interfac,interface,260,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:25,modifiability,inherit,inheritance,25,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:260,modifiability,interfac,interface,260,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:61,performance,time,time,61,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:234,performance,time,time,234,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:273,security,expos,exposed,273,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:104,usability,feedback,feedback,104,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:205,usability,user,user,205,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:10,availability,failur,failure,10,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:10,deployability,fail,failure,10,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:101,energy efficiency,load,loaded,101,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:10,performance,failur,failure,10,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:101,performance,load,loaded,101,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:111,performance,memor,memory,111,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:10,reliability,fail,failure,10,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:33,safety,test,test,33,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:33,testability,test,test,33,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:38,usability,indicat,indicates,38,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:111,usability,memor,memory,111,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:154,deployability,depend,dependency,154,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:195,deployability,patch,patch,195,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:217,deployability,updat,updated,217,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:154,integrability,depend,dependency,154,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:154,modifiability,depend,dependency,154,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:154,safety,depend,dependency,154,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:195,safety,patch,patch,195,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:217,safety,updat,updated,217,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:195,security,patch,patch,195,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:217,security,updat,updated,217,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:154,testability,depend,dependency,154,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:59,usability,close,close,59,@dpiparo can you look at this one and decide if we need to close it ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:16,deployability,version,version,16,Will open a new version of this PR in the near future with the TExecutor discussed in PPP #67,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:16,integrability,version,version,16,Will open a new version of this PR in the near future with the TExecutor discussed in PPP #67,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1312:16,modifiability,version,version,16,Will open a new version of this PR in the near future with the TExecutor discussed in PPP #67,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1312
https://github.com/root-project/root/pull/1313:1087,energy efficiency,profil,profile,1087,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:1043,integrability,filter,filters,1043,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:216,performance,memor,memory,216,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:391,performance,memor,memory,391,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:594,performance,memor,memory,594,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:627,performance,memor,memory,627,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:669,performance,memor,memory,669,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:818,performance,memor,memory,818,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:841,performance,memor,memory,841,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:902,performance,time,times,902,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:984,performance,time,times,984,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:1087,performance,profil,profile,1087,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:1199,performance,time,time,1199,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:1223,performance,overhead,overheads,1223,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:1336,performance,memor,memory,1336,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:216,usability,memor,memory,216,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:391,usability,memor,memory,391,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:594,usability,memor,memory,594,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:627,usability,memor,memory,627,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:669,usability,memor,memory,669,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:818,usability,memor,memory,818,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:841,usability,memor,memory,841,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1313:1336,usability,memor,memory,1336,"This is a major issue, especially for PyROOT. Thanks for kicking off this PR. Let me be even more concrete about the interpreter feature we are trying to workaround here. If you take this trivial example:. ```. void memory(). {. static ProcInfo_t info;. gSystem->GetProcInfo(&info);. static auto zero = info.fMemResident/1024.;. auto val = info.fMemResident/1024. - zero;. printf(""Delta res memory = %g Mbytes\n"",val);. }. void mem2(){. // for (auto i : ROOT::TSeqUL(2000)) {. // std::string s= ""void f_"" + std::to_string(i) + ""(){};"";. // gInterpreter->Declare(s.c_str());. // if (i%100 == 0) memory();. // }. // // Delta res memory = 10.2773 Mbytes. std::string ss;. memory();. for (auto i : ROOT::TSeqUL(2000)) {. string s = ""void f_"" + std::to_string(i) + ""(){};"";. ss +=s;. }. gInterpreter->Declare(ss.c_str());. memory();. //Delta res memory = 1.75781 Mbytes. }. ```. You can see that jitting 2k times a no-op `void(void)` function in one go needs 1.7MB while doing the same 2k times line by line 10MB. The very same effect is seen with filters and alike with TDF. I do not have a profile yet but what strikes me is that the AST we produce in the two cases is the same (sure it will take more time because of various overheads but let's discuss this is understood). I wonder if we are in presence of some kind of leak/hoarding of memory. Involving @Axel-Naumann .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1313
https://github.com/root-project/root/pull/1314:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1314
https://github.com/root-project/root/pull/1314:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1314
https://github.com/root-project/root/pull/1314:101,availability,outag,outages,101,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On. We really need to fix the GH outages by repeating if we detect one...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1314
https://github.com/root-project/root/pull/1314:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On. We really need to fix the GH outages by repeating if we detect one...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1314
https://github.com/root-project/root/pull/1314:101,reliability,outag,outages,101,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On. We really need to fix the GH outages by repeating if we detect one...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1314
https://github.com/root-project/root/pull/1314:128,safety,detect,detect,128,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On. We really need to fix the GH outages by repeating if we detect one...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1314
https://github.com/root-project/root/pull/1314:128,security,detect,detect,128,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On. We really need to fix the GH outages by repeating if we detect one...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1314
https://github.com/root-project/root/pull/1315:0,safety,test,tests,0,tests made ;),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1315:0,testability,test,tests,0,tests made ;),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1315
https://github.com/root-project/root/pull/1316:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1316:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1316
https://github.com/root-project/root/pull/1317:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1317:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1317
https://github.com/root-project/root/pull/1318:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1318
https://github.com/root-project/root/pull/1320:8,availability,failur,failure,8,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:44,availability,down,download,44,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:67,availability,Error,Error,67,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:164,availability,Error,Error,164,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:8,deployability,fail,failure,8,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:34,deployability,fail,failed,34,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:8,performance,failur,failure,8,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:67,performance,Error,Error,67,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:149,performance,time,timed,149,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:164,performance,Error,Error,164,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:8,reliability,fail,failure,8,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:34,reliability,fail,failed,34,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:67,safety,Error,Error,67,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:164,safety,Error,Error,164,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:67,usability,Error,Error,67,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:164,usability,Error,Error,164,"The IMT failure is infra-related, failed to download a file:. ```. Error in <TDavixFile::DavixPReadBuffer>: can not read data with davix: Connection timed out (8). Error in <TBranchElement::GetBasket>: File: http://root.cern.ch/files/tp_process_imt_small.root at byte:0, branch:tracks.fCoordinates.fT, entry:12345, badread=1, nerrors=1, basketnumber=12. ```. However, it would be nice if ROOT didn't crash when that happened...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:11,deployability,build,build,11,@phsft-bot build. Previous build failed due to network problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:27,deployability,build,build,27,@phsft-bot build. Previous build failed due to network problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:33,deployability,fail,failed,33,@phsft-bot build. Previous build failed due to network problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:47,performance,network,network,47,@phsft-bot build. Previous build failed due to network problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:33,reliability,fail,failed,33,@phsft-bot build. Previous build failed due to network problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:47,security,network,network,47,@phsft-bot build. Previous build failed due to network problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1320:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1320
https://github.com/root-project/root/pull/1321:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:38,deployability,fail,failing,38,"@pcanal The TClass test above started failing since your merge. Could you please take a look? https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/BUILDTYPE=Release,COMPILER=native,LABEL=ubuntu16/1517",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:158,deployability,BUILD,BUILDTYPE,158,"@pcanal The TClass test above started failing since your merge. Could you please take a look? https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/BUILDTYPE=Release,COMPILER=native,LABEL=ubuntu16/1517",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:168,deployability,Releas,Release,168,"@pcanal The TClass test above started failing since your merge. Could you please take a look? https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/BUILDTYPE=Release,COMPILER=native,LABEL=ubuntu16/1517",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:38,reliability,fail,failing,38,"@pcanal The TClass test above started failing since your merge. Could you please take a look? https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/BUILDTYPE=Release,COMPILER=native,LABEL=ubuntu16/1517",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:19,safety,test,test,19,"@pcanal The TClass test above started failing since your merge. Could you please take a look? https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/BUILDTYPE=Release,COMPILER=native,LABEL=ubuntu16/1517",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:19,testability,test,test,19,"@pcanal The TClass test above started failing since your merge. Could you please take a look? https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/BUILDTYPE=Release,COMPILER=native,LABEL=ubuntu16/1517",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1321:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1321
https://github.com/root-project/root/pull/1322:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1322
https://github.com/root-project/root/pull/1323:76,energy efficiency,green,green,76,"All comments so far have been addressed, will merge when @dpiparo gives the green light.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1323
https://github.com/root-project/root/pull/1326:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1326
https://github.com/root-project/root/pull/1327:112,interoperability,format,formatting-comments-doxygen,112,Can you please modify your code to follow the documentation guide lines described here https://root.cern.ch/how/formatting-comments-doxygen ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:15,security,modif,modify,15,Can you please modify your code to follow the documentation guide lines described here https://root.cern.ch/how/formatting-comments-doxygen ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:46,usability,document,documentation,46,Can you please modify your code to follow the documentation guide lines described here https://root.cern.ch/how/formatting-comments-doxygen ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:60,usability,guid,guide,60,Can you please modify your code to follow the documentation guide lines described here https://root.cern.ch/how/formatting-comments-doxygen ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:112,deployability,build,build,112,I did all the changes you guys requested. What will be the next step? Or are we just waiting for the Jenkins Ci build check to be finished? If yes how long does that usually take?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:156,reliability,doe,does,156,I did all the changes you guys requested. What will be the next step? Or are we just waiting for the Jenkins Ci build check to be finished? If yes how long does that usually take?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:71,deployability,build,builds,71,"@odahme Jenkins takes quite a bit (maybe a few hours since the nightly builds are running and the system is overloaded at the moment). If the requested changes were addressed, @couet and @pcanal need to approve the changes prior to merging too. I would also like @lmoneta to give his explicit approval, since he is the code owner. So, on your side, you don't have to do anything for the moment. Thanks for the contribution and for addressing everyone's comments!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:102,deployability,version,version,102,@pcanal @couet @lmoneta Please review this PR again and remove the request for changes if the current version has addressed your comments. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:94,energy efficiency,current,current,94,@pcanal @couet @lmoneta Please review this PR again and remove the request for changes if the current version has addressed your comments. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:102,integrability,version,version,102,@pcanal @couet @lmoneta Please review this PR again and remove the request for changes if the current version has addressed your comments. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:102,modifiability,version,version,102,@pcanal @couet @lmoneta Please review this PR again and remove the request for changes if the current version has addressed your comments. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:31,safety,review,review,31,@pcanal @couet @lmoneta Please review this PR again and remove the request for changes if the current version has addressed your comments. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:31,testability,review,review,31,@pcanal @couet @lmoneta Please review this PR again and remove the request for changes if the current version has addressed your comments. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:46,deployability,fail,failed,46,"Unfortunately, this had to be reverted, as it failed the included test in many of the nightly builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:94,deployability,build,builds,94,"Unfortunately, this had to be reverted, as it failed the included test in many of the nightly builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:46,reliability,fail,failed,46,"Unfortunately, this had to be reverted, as it failed the included test in many of the nightly builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:66,safety,test,test,66,"Unfortunately, this had to be reverted, as it failed the included test in many of the nightly builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:66,testability,test,test,66,"Unfortunately, this had to be reverted, as it failed the included test in many of the nightly builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:38,deployability,fail,failed,38,@amadio that is too bad. What exactly failed? and do you have any idea why it failed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:78,deployability,fail,failed,78,@amadio that is too bad. What exactly failed? and do you have any idea why it failed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:38,reliability,fail,failed,38,@amadio that is too bad. What exactly failed? and do you have any idea why it failed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:78,reliability,fail,failed,78,@amadio that is too bad. What exactly failed? and do you have any idea why it failed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:32,availability,error,error,32,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:597,availability,ERROR,ERROR,597,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:651,availability,error,error,651,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:847,availability,ERROR,ERROR,847,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:901,availability,error,error,901,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1097,availability,ERROR,ERROR,1097," The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERRO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1151,availability,error,error,1151,"lumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1347,availability,ERROR,ERROR,1347,"RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERRO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1401,availability,error,error,1401," Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1597,availability,ERROR,ERROR,1597,"OR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1651,availability,error,error,1651,"or, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1847,availability,ERROR,ERROR,1847,"OR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1901,availability,error,error,1901,"or, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2096,availability,ERROR,ERROR,2096,"ROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2150,availability,error,error,2150,"ror, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2346,availability,ERROR,ERROR,2346,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2400,availability,error,error,2400,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2595,availability,ERROR,ERROR,2595,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2649,availability,error,error,2649,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2843,availability,ERROR,ERROR,2843,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2897,availability,error,error,2897,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3093,availability,ERROR,ERROR,3093,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3147,availability,error,error,3147,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:110,deployability,fail,failed,110,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:176,deployability,build,build,176,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:223,deployability,BUILD,BUILDTYPE,223,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:233,deployability,Releas,Release,233,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:623,deployability,log,logEvalError,623,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:747,deployability,integr,integral,747,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:873,deployability,log,logEvalError,873,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:997,deployability,integr,integral,997,"odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1123,deployability,log,logEvalError,1123,"odes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1247,deployability,integr,integral,1247,"ative/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1373,deployability,log,logEvalError,1373,"Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1497,deployability,integr,integral,1497,"rd University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1623,deployability,log,logEvalError,1623,"lError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1747,deployability,integr,integral,1747,"gral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1873,deployability,log,logEvalError,1873,"lError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalErr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1997,deployability,integr,integral,1997,"gral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2122,deployability,log,logEvalError,2122,"alError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalEr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2246,deployability,integr,integral,2246,"egral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2372,deployability,log,logEvalError,2372,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2496,deployability,integr,integral,2496,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2621,deployability,log,logEvalError,2621,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2745,deployability,integr,integral,2745,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2869,deployability,log,logEvalError,2869,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2993,deployability,integr,integral,2993,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3119,deployability,log,logEvalError,3119,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3243,deployability,integr,integral,3243,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:717,integrability,messag,message,717,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:747,integrability,integr,integral,747,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:967,integrability,messag,message,967,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:997,integrability,integr,integral,997,"odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1217,integrability,messag,message,1217,"7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. messa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1247,integrability,integr,integral,1247,"ative/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1467,integrability,messag,message,1467,"versity of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. messa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1497,integrability,integr,integral,1497,"rd University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1717,integrability,messag,message,1717,"age : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. messag",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1747,integrability,integr,integral,1747,"gral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1967,integrability,messag,message,1967,"age : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1997,integrability,integr,integral,1997,"gral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2216,integrability,messag,message,2216,"sage : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2246,integrability,integr,integral,2246,"egral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2466,integrability,messag,message,2466,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2496,integrability,integr,integral,2496,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2715,integrability,messag,message,2715,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2745,integrability,integr,integral,2745,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2963,integrability,messag,message,2963,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2993,integrability,integr,integral,2993,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3213,integrability,messag,message,3213,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3243,integrability,integr,integral,3243,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:333,interoperability,XML,XML-CHAR-,333,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:416,interoperability,XML,XML-CHAR-,416,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:717,interoperability,messag,message,717,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:747,interoperability,integr,integral,747,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:967,interoperability,messag,message,967,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:997,interoperability,integr,integral,997,"odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1217,interoperability,messag,message,1217,"7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. messa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1247,interoperability,integr,integral,1247,"ative/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1467,interoperability,messag,message,1467,"versity of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. messa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1497,interoperability,integr,integral,1497,"rd University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1717,interoperability,messag,message,1717,"age : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. messag",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1747,interoperability,integr,integral,1747,"gral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1967,interoperability,messag,message,1967,"age : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1997,interoperability,integr,integral,1997,"gral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2216,interoperability,messag,message,2216,"sage : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2246,interoperability,integr,integral,2246,"egral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2466,interoperability,messag,message,2466,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2496,interoperability,integr,integral,2496,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2715,interoperability,messag,message,2715,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2745,interoperability,integr,integral,2745,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2963,interoperability,messag,message,2963,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2993,interoperability,integr,integral,2993,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3213,interoperability,messag,message,3213,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3243,interoperability,integr,integral,3243,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:747,modifiability,integr,integral,747,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:997,modifiability,integr,integral,997,"odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1247,modifiability,integr,integral,1247,"ative/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1497,modifiability,integr,integral,1497,"rd University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1747,modifiability,integr,integral,1747,"gral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1997,modifiability,integr,integral,1997,"gral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2246,modifiability,integr,integral,2246,"egral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2496,modifiability,integr,integral,2496,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2745,modifiability,integr,integral,2745,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2993,modifiability,integr,integral,2993,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3243,modifiability,integr,integral,3243,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:32,performance,error,error,32,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:597,performance,ERROR,ERROR,597,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:651,performance,error,error,651,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:847,performance,ERROR,ERROR,847,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:901,performance,error,error,901,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1097,performance,ERROR,ERROR,1097," The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERRO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1151,performance,error,error,1151,"lumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1347,performance,ERROR,ERROR,1347,"RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERRO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1401,performance,error,error,1401," Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1597,performance,ERROR,ERROR,1597,"OR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1651,performance,error,error,1651,"or, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1847,performance,ERROR,ERROR,1847,"OR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1901,performance,error,error,1901,"or, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2096,performance,ERROR,ERROR,2096,"ROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2150,performance,error,error,2150,"ror, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2346,performance,ERROR,ERROR,2346,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2400,performance,error,error,2400,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2595,performance,ERROR,ERROR,2595,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2649,performance,error,error,2649,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2843,performance,ERROR,ERROR,2843,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2897,performance,error,error,2897,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3093,performance,ERROR,ERROR,3093,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3147,performance,error,error,3147,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:110,reliability,fail,failed,110,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:747,reliability,integr,integral,747,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:997,reliability,integr,integral,997,"odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1247,reliability,integr,integral,1247,"ative/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1497,reliability,integr,integral,1497,"rd University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1747,reliability,integr,integral,1747,"gral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1997,reliability,integr,integral,1997,"gral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2246,reliability,integr,integral,2246,"egral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2496,reliability,integr,integral,2496,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2745,reliability,integr,integral,2745,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2993,reliability,integr,integral,2993,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3243,reliability,integr,integral,3243,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:32,safety,error,error,32,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:105,safety,test,test,105,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:597,safety,ERROR,ERROR,597,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:623,safety,log,logEvalError,623,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:651,safety,error,error,651,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:847,safety,ERROR,ERROR,847,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:873,safety,log,logEvalError,873,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:901,safety,error,error,901,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1097,safety,ERROR,ERROR,1097," The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERRO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1123,safety,log,logEvalError,1123,"odes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1151,safety,error,error,1151,"lumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1347,safety,ERROR,ERROR,1347,"RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERRO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1373,safety,log,logEvalError,1373,"Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1401,safety,error,error,1401," Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1597,safety,ERROR,ERROR,1597,"OR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1623,safety,log,logEvalError,1623,"lError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1651,safety,error,error,1651,"or, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1847,safety,ERROR,ERROR,1847,"OR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1873,safety,log,logEvalError,1873,"lError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalErr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1901,safety,error,error,1901,"or, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2096,safety,ERROR,ERROR,2096,"ROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2122,safety,log,logEvalError,2122,"alError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalEr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2150,safety,error,error,2150,"ror, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2346,safety,ERROR,ERROR,2346,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2372,safety,log,logEvalError,2372,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2400,safety,error,error,2400,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2595,safety,ERROR,ERROR,2595,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2621,safety,log,logEvalError,2621,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2649,safety,error,error,2649,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2843,safety,ERROR,ERROR,2843,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2869,safety,log,logEvalError,2869,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2897,safety,error,error,2897,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3093,safety,ERROR,ERROR,3093,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3119,safety,log,logEvalError,3119,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3147,safety,error,error,3147,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:623,security,log,logEvalError,623,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:747,security,integr,integral,747,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:873,security,log,logEvalError,873,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:997,security,integr,integral,997,"odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1123,security,log,logEvalError,1123,"odes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1247,security,integr,integral,1247,"ative/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1373,security,log,logEvalError,1373,"Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1497,security,integr,integral,1497,"rd University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1623,security,log,logEvalError,1623,"lError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1747,security,integr,integral,1747,"gral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1873,security,log,logEvalError,1873,"lError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalErr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1997,security,integr,integral,1997,"gral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2122,security,log,logEvalError,2122,"alError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalEr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2246,security,integr,integral,2246,"egral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2372,security,log,logEvalError,2372,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2496,security,integr,integral,2496,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2621,security,log,logEvalError,2621,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2745,security,integr,integral,2745,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2869,security,log,logEvalError,2869,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2993,security,integr,integral,2993,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3119,security,log,logEvalError,3119,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3243,security,integr,integral,3243,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:105,testability,test,test,105,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:623,testability,log,logEvalError,623,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:747,testability,integr,integral,747,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:873,testability,log,logEvalError,873,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:997,testability,integr,integral,997,"odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1123,testability,log,logEvalError,1123,"odes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1247,testability,integr,integral,1247,"ative/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1373,testability,log,logEvalError,1373,"Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEval",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1497,testability,integr,integral,1497,"rd University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1623,testability,log,logEvalError,1623,"lError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1747,testability,integr,integral,1747,"gral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1873,testability,log,logEvalError,1873,"lError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalErr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1997,testability,integr,integral,1997,"gral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2122,testability,log,logEvalError,2122,"alError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalEr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2246,testability,integr,integral,2246,"egral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2372,testability,log,logEvalError,2372,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2496,testability,integr,integral,2496,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2621,testability,log,logEvalError,2621,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2745,testability,integr,integral,2745,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2869,testability,log,logEvalError,2869,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2993,testability,integr,integral,2993,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3119,testability,log,logEvalError,3119,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3243,testability,integr,integral,3243,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:32,usability,error,error,32,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:597,usability,ERROR,ERROR,597,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:651,usability,error,error,651,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:847,usability,ERROR,ERROR,847,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:901,usability,error,error,901,"@odahme Here is a sample of the error output (that are many more of these lines in the full output). The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1097,usability,ERROR,ERROR,1097," The test failed on all Mac nodes. ```. Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERRO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1151,usability,error,error,1151,"lumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1347,usability,ERROR,ERROR,1347,"RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERRO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1401,usability,error,error,1401," Kirkby[NON-XML-CHAR-0x1B][0m . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1597,usability,ERROR,ERROR,1597,"OR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1651,usability,error,error,1651,"or, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1847,usability,ERROR,ERROR,1847,"OR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:1901,usability,error,error,1901,"or, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2096,usability,ERROR,ERROR,2096,"ROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2150,usability,error,error,2150,"ror, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2346,usability,ERROR,ERROR,2346,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2400,usability,error,error,2400,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2595,usability,ERROR,ERROR,2595,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2649,usability,error,error,2649,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2843,usability,ERROR,ERROR,2843,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:2897,usability,error,error,2897,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3093,usability,ERROR,ERROR,3093,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:3147,usability,error,error,3147,". [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=3.42638, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=2.6117, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-3.10404, mean=mean1=3.74943, sigma=sigma1=0. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, . origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]. message : p.d.f normalization integral is zero or negative. server values: x=x=-2.5732, mean=mean1=3.74943, sigma=sigma1=0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:248,availability,error,error,248,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:356,availability,error,error,356,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:458,availability,error,error,458,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:503,availability,error,error,503,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:98,deployability,log,log,98,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:113,deployability,fail,failes,113,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:362,integrability,messag,messages,362,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:464,integrability,messag,message,464,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:362,interoperability,messag,messages,362,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:464,interoperability,messag,message,464,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:248,performance,error,error,248,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:356,performance,error,error,356,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:458,performance,error,error,458,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:503,performance,error,error,503,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:113,reliability,fail,failes,113,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:281,reliability,doe,does,281,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:17,safety,reme,remember,17,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:98,safety,log,log,98,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:248,safety,error,error,248,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:356,safety,error,error,356,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:458,safety,error,error,458,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:503,safety,error,error,503,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:98,security,log,log,98,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:98,testability,log,log,98,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:248,usability,error,error,248,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:268,usability,minim,minimizer,268,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:356,usability,error,error,356,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:458,usability,error,error,458,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:503,usability,error,error,503,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:181,availability,error,error,181,"@odahme No, sorry, I'm not sure how to fix the problem, that's why I decided to revert the changes. Please discuss this with @lmoneta, as he can help you with that. Turning off the error messages is not a solution. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:187,integrability,messag,messages,187,"@odahme No, sorry, I'm not sure how to fix the problem, that's why I decided to revert the changes. Please discuss this with @lmoneta, as he can help you with that. Turning off the error messages is not a solution. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:187,interoperability,messag,messages,187,"@odahme No, sorry, I'm not sure how to fix the problem, that's why I decided to revert the changes. Please discuss this with @lmoneta, as he can help you with that. Turning off the error messages is not a solution. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:181,performance,error,error,181,"@odahme No, sorry, I'm not sure how to fix the problem, that's why I decided to revert the changes. Please discuss this with @lmoneta, as he can help you with that. Turning off the error messages is not a solution. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
https://github.com/root-project/root/pull/1327:181,safety,error,error,181,"@odahme No, sorry, I'm not sure how to fix the problem, that's why I decided to revert the changes. Please discuss this with @lmoneta, as he can help you with that. Turning off the error messages is not a solution. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1327
